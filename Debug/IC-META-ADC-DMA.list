
IC-META-ADC-DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000931c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080095b4  080095b4  000195b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080095cc  080095cc  000195cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080095d0  080095d0  000195d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  080095d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000019c  24000010  080095e4  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240001ac  080095e4  000201ac  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00014b69  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000245a  00000000  00000000  00034ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001160  00000000  00000000  00037008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001068  00000000  00000000  00038168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00037e22  00000000  00000000  000391d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001533c  00000000  00000000  00070ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0016f5eb  00000000  00000000  0008632e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001f5919  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004acc  00000000  00000000  001f596c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800959c 	.word	0x0800959c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800959c 	.word	0x0800959c

080002d8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]

	for(uint16_t i = 0; i < ADC_NUM_CONVERSIONS; i++){
 80002e0:	2300      	movs	r3, #0
 80002e2:	81fb      	strh	r3, [r7, #14]
 80002e4:	e019      	b.n	800031a <HAL_ADC_ConvCpltCallback+0x42>
		sensorVoltage[i] = ADC_PURE_VOLTAGE * (float) adcData[i];
 80002e6:	89fb      	ldrh	r3, [r7, #14]
 80002e8:	4a13      	ldr	r2, [pc, #76]	; (8000338 <HAL_ADC_ConvCpltCallback+0x60>)
 80002ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002ee:	b29b      	uxth	r3, r3
 80002f0:	ee07 3a90 	vmov	s15, r3
 80002f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80002f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80002fc:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000330 <HAL_ADC_ConvCpltCallback+0x58>
 8000300:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000304:	89fb      	ldrh	r3, [r7, #14]
 8000306:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800030a:	4a0c      	ldr	r2, [pc, #48]	; (800033c <HAL_ADC_ConvCpltCallback+0x64>)
 800030c:	009b      	lsls	r3, r3, #2
 800030e:	4413      	add	r3, r2
 8000310:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < ADC_NUM_CONVERSIONS; i++){
 8000314:	89fb      	ldrh	r3, [r7, #14]
 8000316:	3301      	adds	r3, #1
 8000318:	81fb      	strh	r3, [r7, #14]
 800031a:	89fb      	ldrh	r3, [r7, #14]
 800031c:	2b0d      	cmp	r3, #13
 800031e:	d9e2      	bls.n	80002e6 <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 8000320:	bf00      	nop
 8000322:	bf00      	nop
 8000324:	3714      	adds	r7, #20
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	b90829dc 	.word	0xb90829dc
 8000334:	3f0a6680 	.word	0x3f0a6680
 8000338:	24000154 	.word	0x24000154
 800033c:	24000170 	.word	0x24000170

08000340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000344:	f000 faa4 	bl	8000890 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000348:	f000 fcf0 	bl	8000d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034c:	f000 f820 	bl	8000390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000350:	f000 fa66 	bl	8000820 <MX_GPIO_Init>
  MX_DMA_Init();
 8000354:	f000 fa44 	bl	80007e0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000358:	f000 f898 	bl	800048c <MX_ADC1_Init>
  MX_TIM8_Init();
 800035c:	f000 f9ec 	bl	8000738 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1 , ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000360:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000364:	2100      	movs	r1, #0
 8000366:	4807      	ldr	r0, [pc, #28]	; (8000384 <main+0x44>)
 8000368:	f002 face 	bl	8002908 <HAL_ADCEx_Calibration_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcData, ADC_NUM_CONVERSIONS);
 800036c:	220e      	movs	r2, #14
 800036e:	4906      	ldr	r1, [pc, #24]	; (8000388 <main+0x48>)
 8000370:	4804      	ldr	r0, [pc, #16]	; (8000384 <main+0x44>)
 8000372:	f001 f96d 	bl	8001650 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim8);
 8000376:	4805      	ldr	r0, [pc, #20]	; (800038c <main+0x4c>)
 8000378:	f008 fdaa 	bl	8008ed0 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_Delay(100);
 800037c:	2064      	movs	r0, #100	; 0x64
 800037e:	f000 fd67 	bl	8000e50 <HAL_Delay>
 8000382:	e7fb      	b.n	800037c <main+0x3c>
 8000384:	2400002c 	.word	0x2400002c
 8000388:	24000154 	.word	0x24000154
 800038c:	24000108 	.word	0x24000108

08000390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b09c      	sub	sp, #112	; 0x70
 8000394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800039a:	224c      	movs	r2, #76	; 0x4c
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f009 f8f4 	bl	800958c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	2220      	movs	r2, #32
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f009 f8ee 	bl	800958c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003b0:	2002      	movs	r0, #2
 80003b2:	f005 f82d 	bl	8005410 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80003b6:	2300      	movs	r3, #0
 80003b8:	603b      	str	r3, [r7, #0]
 80003ba:	4b32      	ldr	r3, [pc, #200]	; (8000484 <SystemClock_Config+0xf4>)
 80003bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003be:	4a31      	ldr	r2, [pc, #196]	; (8000484 <SystemClock_Config+0xf4>)
 80003c0:	f023 0301 	bic.w	r3, r3, #1
 80003c4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003c6:	4b2f      	ldr	r3, [pc, #188]	; (8000484 <SystemClock_Config+0xf4>)
 80003c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ca:	f003 0301 	and.w	r3, r3, #1
 80003ce:	603b      	str	r3, [r7, #0]
 80003d0:	4b2d      	ldr	r3, [pc, #180]	; (8000488 <SystemClock_Config+0xf8>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003d8:	4a2b      	ldr	r2, [pc, #172]	; (8000488 <SystemClock_Config+0xf8>)
 80003da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b29      	ldr	r3, [pc, #164]	; (8000488 <SystemClock_Config+0xf8>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003e8:	603b      	str	r3, [r7, #0]
 80003ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003ec:	bf00      	nop
 80003ee:	4b26      	ldr	r3, [pc, #152]	; (8000488 <SystemClock_Config+0xf8>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003fa:	d1f8      	bne.n	80003ee <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003fc:	2302      	movs	r3, #2
 80003fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000400:	2301      	movs	r3, #1
 8000402:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000404:	2340      	movs	r3, #64	; 0x40
 8000406:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000408:	2302      	movs	r3, #2
 800040a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800040c:	2300      	movs	r3, #0
 800040e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000410:	2304      	movs	r3, #4
 8000412:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 37;
 8000414:	2325      	movs	r3, #37	; 0x25
 8000416:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000418:	2302      	movs	r3, #2
 800041a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800041c:	2302      	movs	r3, #2
 800041e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 3;
 8000420:	2303      	movs	r3, #3
 8000422:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000424:	230c      	movs	r3, #12
 8000426:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000428:	2300      	movs	r3, #0
 800042a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 800042c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000430:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000436:	4618      	mov	r0, r3
 8000438:	f005 f824 	bl	8005484 <HAL_RCC_OscConfig>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000442:	f000 fa51 	bl	80008e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000446:	233f      	movs	r3, #63	; 0x3f
 8000448:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044a:	2303      	movs	r3, #3
 800044c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000452:	2308      	movs	r3, #8
 8000454:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000456:	2340      	movs	r3, #64	; 0x40
 8000458:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800045a:	2340      	movs	r3, #64	; 0x40
 800045c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800045e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000462:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000464:	2340      	movs	r3, #64	; 0x40
 8000466:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	2102      	movs	r1, #2
 800046c:	4618      	mov	r0, r3
 800046e:	f005 fc63 	bl	8005d38 <HAL_RCC_ClockConfig>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000478:	f000 fa36 	bl	80008e8 <Error_Handler>
  }
}
 800047c:	bf00      	nop
 800047e:	3770      	adds	r7, #112	; 0x70
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	58000400 	.word	0x58000400
 8000488:	58024800 	.word	0x58024800

0800048c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b08a      	sub	sp, #40	; 0x28
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000492:	f107 031c 	add.w	r3, r7, #28
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]
 800049c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800049e:	463b      	mov	r3, r7
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	605a      	str	r2, [r3, #4]
 80004a6:	609a      	str	r2, [r3, #8]
 80004a8:	60da      	str	r2, [r3, #12]
 80004aa:	611a      	str	r2, [r3, #16]
 80004ac:	615a      	str	r2, [r3, #20]
 80004ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004b0:	4b91      	ldr	r3, [pc, #580]	; (80006f8 <MX_ADC1_Init+0x26c>)
 80004b2:	4a92      	ldr	r2, [pc, #584]	; (80006fc <MX_ADC1_Init+0x270>)
 80004b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80004b6:	4b90      	ldr	r3, [pc, #576]	; (80006f8 <MX_ADC1_Init+0x26c>)
 80004b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80004bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80004be:	4b8e      	ldr	r3, [pc, #568]	; (80006f8 <MX_ADC1_Init+0x26c>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004c4:	4b8c      	ldr	r3, [pc, #560]	; (80006f8 <MX_ADC1_Init+0x26c>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80004ca:	4b8b      	ldr	r3, [pc, #556]	; (80006f8 <MX_ADC1_Init+0x26c>)
 80004cc:	2208      	movs	r2, #8
 80004ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004d0:	4b89      	ldr	r3, [pc, #548]	; (80006f8 <MX_ADC1_Init+0x26c>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004d6:	4b88      	ldr	r3, [pc, #544]	; (80006f8 <MX_ADC1_Init+0x26c>)
 80004d8:	2200      	movs	r2, #0
 80004da:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 14;
 80004dc:	4b86      	ldr	r3, [pc, #536]	; (80006f8 <MX_ADC1_Init+0x26c>)
 80004de:	220e      	movs	r2, #14
 80004e0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004e2:	4b85      	ldr	r3, [pc, #532]	; (80006f8 <MX_ADC1_Init+0x26c>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T8_TRGO;
 80004e8:	4b83      	ldr	r3, [pc, #524]	; (80006f8 <MX_ADC1_Init+0x26c>)
 80004ea:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 80004ee:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80004f0:	4b81      	ldr	r3, [pc, #516]	; (80006f8 <MX_ADC1_Init+0x26c>)
 80004f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80004f8:	4b7f      	ldr	r3, [pc, #508]	; (80006f8 <MX_ADC1_Init+0x26c>)
 80004fa:	2203      	movs	r2, #3
 80004fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004fe:	4b7e      	ldr	r3, [pc, #504]	; (80006f8 <MX_ADC1_Init+0x26c>)
 8000500:	2200      	movs	r2, #0
 8000502:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000504:	4b7c      	ldr	r3, [pc, #496]	; (80006f8 <MX_ADC1_Init+0x26c>)
 8000506:	2200      	movs	r2, #0
 8000508:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800050a:	4b7b      	ldr	r3, [pc, #492]	; (80006f8 <MX_ADC1_Init+0x26c>)
 800050c:	2200      	movs	r2, #0
 800050e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000512:	4879      	ldr	r0, [pc, #484]	; (80006f8 <MX_ADC1_Init+0x26c>)
 8000514:	f000 fefa 	bl	800130c <HAL_ADC_Init>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800051e:	f000 f9e3 	bl	80008e8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000522:	2300      	movs	r3, #0
 8000524:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000526:	f107 031c 	add.w	r3, r7, #28
 800052a:	4619      	mov	r1, r3
 800052c:	4872      	ldr	r0, [pc, #456]	; (80006f8 <MX_ADC1_Init+0x26c>)
 800052e:	f002 fa81 	bl	8002a34 <HAL_ADCEx_MultiModeConfigChannel>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000538:	f000 f9d6 	bl	80008e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800053c:	4b70      	ldr	r3, [pc, #448]	; (8000700 <MX_ADC1_Init+0x274>)
 800053e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000540:	2306      	movs	r3, #6
 8000542:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8000544:	2306      	movs	r3, #6
 8000546:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000548:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800054c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800054e:	2304      	movs	r3, #4
 8000550:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000556:	2300      	movs	r3, #0
 8000558:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800055a:	463b      	mov	r3, r7
 800055c:	4619      	mov	r1, r3
 800055e:	4866      	ldr	r0, [pc, #408]	; (80006f8 <MX_ADC1_Init+0x26c>)
 8000560:	f001 fb92 	bl	8001c88 <HAL_ADC_ConfigChannel>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800056a:	f000 f9bd 	bl	80008e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800056e:	4b65      	ldr	r3, [pc, #404]	; (8000704 <MX_ADC1_Init+0x278>)
 8000570:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000572:	230c      	movs	r3, #12
 8000574:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000576:	463b      	mov	r3, r7
 8000578:	4619      	mov	r1, r3
 800057a:	485f      	ldr	r0, [pc, #380]	; (80006f8 <MX_ADC1_Init+0x26c>)
 800057c:	f001 fb84 	bl	8001c88 <HAL_ADC_ConfigChannel>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000586:	f000 f9af 	bl	80008e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800058a:	4b5f      	ldr	r3, [pc, #380]	; (8000708 <MX_ADC1_Init+0x27c>)
 800058c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800058e:	2312      	movs	r3, #18
 8000590:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000592:	463b      	mov	r3, r7
 8000594:	4619      	mov	r1, r3
 8000596:	4858      	ldr	r0, [pc, #352]	; (80006f8 <MX_ADC1_Init+0x26c>)
 8000598:	f001 fb76 	bl	8001c88 <HAL_ADC_ConfigChannel>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80005a2:	f000 f9a1 	bl	80008e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80005a6:	4b59      	ldr	r3, [pc, #356]	; (800070c <MX_ADC1_Init+0x280>)
 80005a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80005aa:	2318      	movs	r3, #24
 80005ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ae:	463b      	mov	r3, r7
 80005b0:	4619      	mov	r1, r3
 80005b2:	4851      	ldr	r0, [pc, #324]	; (80006f8 <MX_ADC1_Init+0x26c>)
 80005b4:	f001 fb68 	bl	8001c88 <HAL_ADC_ConfigChannel>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 80005be:	f000 f993 	bl	80008e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005c2:	4b53      	ldr	r3, [pc, #332]	; (8000710 <MX_ADC1_Init+0x284>)
 80005c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80005c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005cc:	463b      	mov	r3, r7
 80005ce:	4619      	mov	r1, r3
 80005d0:	4849      	ldr	r0, [pc, #292]	; (80006f8 <MX_ADC1_Init+0x26c>)
 80005d2:	f001 fb59 	bl	8001c88 <HAL_ADC_ConfigChannel>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80005dc:	f000 f984 	bl	80008e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80005e0:	4b4c      	ldr	r3, [pc, #304]	; (8000714 <MX_ADC1_Init+0x288>)
 80005e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80005e4:	f44f 7383 	mov.w	r3, #262	; 0x106
 80005e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ea:	463b      	mov	r3, r7
 80005ec:	4619      	mov	r1, r3
 80005ee:	4842      	ldr	r0, [pc, #264]	; (80006f8 <MX_ADC1_Init+0x26c>)
 80005f0:	f001 fb4a 	bl	8001c88 <HAL_ADC_ConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 80005fa:	f000 f975 	bl	80008e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80005fe:	4b46      	ldr	r3, [pc, #280]	; (8000718 <MX_ADC1_Init+0x28c>)
 8000600:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000602:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000606:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000608:	463b      	mov	r3, r7
 800060a:	4619      	mov	r1, r3
 800060c:	483a      	ldr	r0, [pc, #232]	; (80006f8 <MX_ADC1_Init+0x26c>)
 800060e:	f001 fb3b 	bl	8001c88 <HAL_ADC_ConfigChannel>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_ADC1_Init+0x190>
  {
    Error_Handler();
 8000618:	f000 f966 	bl	80008e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800061c:	4b3f      	ldr	r3, [pc, #252]	; (800071c <MX_ADC1_Init+0x290>)
 800061e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000620:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000624:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000626:	463b      	mov	r3, r7
 8000628:	4619      	mov	r1, r3
 800062a:	4833      	ldr	r0, [pc, #204]	; (80006f8 <MX_ADC1_Init+0x26c>)
 800062c:	f001 fb2c 	bl	8001c88 <HAL_ADC_ConfigChannel>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_ADC1_Init+0x1ae>
  {
    Error_Handler();
 8000636:	f000 f957 	bl	80008e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800063a:	4b39      	ldr	r3, [pc, #228]	; (8000720 <MX_ADC1_Init+0x294>)
 800063c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800063e:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000642:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000644:	463b      	mov	r3, r7
 8000646:	4619      	mov	r1, r3
 8000648:	482b      	ldr	r0, [pc, #172]	; (80006f8 <MX_ADC1_Init+0x26c>)
 800064a:	f001 fb1d 	bl	8001c88 <HAL_ADC_ConfigChannel>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC1_Init+0x1cc>
  {
    Error_Handler();
 8000654:	f000 f948 	bl	80008e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000658:	4b32      	ldr	r3, [pc, #200]	; (8000724 <MX_ADC1_Init+0x298>)
 800065a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800065c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000660:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000662:	463b      	mov	r3, r7
 8000664:	4619      	mov	r1, r3
 8000666:	4824      	ldr	r0, [pc, #144]	; (80006f8 <MX_ADC1_Init+0x26c>)
 8000668:	f001 fb0e 	bl	8001c88 <HAL_ADC_ConfigChannel>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_ADC1_Init+0x1ea>
  {
    Error_Handler();
 8000672:	f000 f939 	bl	80008e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000676:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <MX_ADC1_Init+0x29c>)
 8000678:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800067a:	f240 2306 	movw	r3, #518	; 0x206
 800067e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000680:	463b      	mov	r3, r7
 8000682:	4619      	mov	r1, r3
 8000684:	481c      	ldr	r0, [pc, #112]	; (80006f8 <MX_ADC1_Init+0x26c>)
 8000686:	f001 faff 	bl	8001c88 <HAL_ADC_ConfigChannel>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ADC1_Init+0x208>
  {
    Error_Handler();
 8000690:	f000 f92a 	bl	80008e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000694:	4b25      	ldr	r3, [pc, #148]	; (800072c <MX_ADC1_Init+0x2a0>)
 8000696:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000698:	f44f 7303 	mov.w	r3, #524	; 0x20c
 800069c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069e:	463b      	mov	r3, r7
 80006a0:	4619      	mov	r1, r3
 80006a2:	4815      	ldr	r0, [pc, #84]	; (80006f8 <MX_ADC1_Init+0x26c>)
 80006a4:	f001 faf0 	bl	8001c88 <HAL_ADC_ConfigChannel>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_ADC1_Init+0x226>
  {
    Error_Handler();
 80006ae:	f000 f91b 	bl	80008e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80006b2:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <MX_ADC1_Init+0x2a4>)
 80006b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 80006b6:	f240 2312 	movw	r3, #530	; 0x212
 80006ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006bc:	463b      	mov	r3, r7
 80006be:	4619      	mov	r1, r3
 80006c0:	480d      	ldr	r0, [pc, #52]	; (80006f8 <MX_ADC1_Init+0x26c>)
 80006c2:	f001 fae1 	bl	8001c88 <HAL_ADC_ConfigChannel>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0x244>
  {
    Error_Handler();
 80006cc:	f000 f90c 	bl	80008e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <MX_ADC1_Init+0x2a8>)
 80006d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 80006d4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80006d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	4619      	mov	r1, r3
 80006de:	4806      	ldr	r0, [pc, #24]	; (80006f8 <MX_ADC1_Init+0x26c>)
 80006e0:	f001 fad2 	bl	8001c88 <HAL_ADC_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC1_Init+0x262>
  {
    Error_Handler();
 80006ea:	f000 f8fd 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	; 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2400002c 	.word	0x2400002c
 80006fc:	40022000 	.word	0x40022000
 8000700:	0c900008 	.word	0x0c900008
 8000704:	10c00010 	.word	0x10c00010
 8000708:	14f00020 	.word	0x14f00020
 800070c:	1d500080 	.word	0x1d500080
 8000710:	21800100 	.word	0x21800100
 8000714:	25b00200 	.word	0x25b00200
 8000718:	2a000400 	.word	0x2a000400
 800071c:	2e300800 	.word	0x2e300800
 8000720:	3ac04000 	.word	0x3ac04000
 8000724:	3ef08000 	.word	0x3ef08000
 8000728:	43210000 	.word	0x43210000
 800072c:	47520000 	.word	0x47520000
 8000730:	4b840000 	.word	0x4b840000
 8000734:	4fb80000 	.word	0x4fb80000

08000738 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800073e:	f107 0310 	add.w	r3, r7, #16
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000756:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <MX_TIM8_Init+0xa0>)
 8000758:	4a20      	ldr	r2, [pc, #128]	; (80007dc <MX_TIM8_Init+0xa4>)
 800075a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3000 -1;
 800075c:	4b1e      	ldr	r3, [pc, #120]	; (80007d8 <MX_TIM8_Init+0xa0>)
 800075e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000762:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000764:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <MX_TIM8_Init+0xa0>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000 - 1;
 800076a:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_TIM8_Init+0xa0>)
 800076c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000770:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000772:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <MX_TIM8_Init+0xa0>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000778:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <MX_TIM8_Init+0xa0>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077e:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <MX_TIM8_Init+0xa0>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000784:	4814      	ldr	r0, [pc, #80]	; (80007d8 <MX_TIM8_Init+0xa0>)
 8000786:	f008 fb4b 	bl	8008e20 <HAL_TIM_Base_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8000790:	f000 f8aa 	bl	80008e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000798:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800079a:	f107 0310 	add.w	r3, r7, #16
 800079e:	4619      	mov	r1, r3
 80007a0:	480d      	ldr	r0, [pc, #52]	; (80007d8 <MX_TIM8_Init+0xa0>)
 80007a2:	f008 fc05 	bl	8008fb0 <HAL_TIM_ConfigClockSource>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80007ac:	f000 f89c 	bl	80008e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80007b0:	2320      	movs	r3, #32
 80007b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_TIM8_Init+0xa0>)
 80007c2:	f008 fe31 	bl	8009428 <HAL_TIMEx_MasterConfigSynchronization>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80007cc:	f000 f88c 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	24000108 	.word	0x24000108
 80007dc:	40010400 	.word	0x40010400

080007e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <MX_DMA_Init+0x3c>)
 80007e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007ec:	4a0b      	ldr	r2, [pc, #44]	; (800081c <MX_DMA_Init+0x3c>)
 80007ee:	f043 0301 	orr.w	r3, r3, #1
 80007f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_DMA_Init+0x3c>)
 80007f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007fc:	f003 0301 	and.w	r3, r3, #1
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000804:	2200      	movs	r2, #0
 8000806:	2100      	movs	r1, #0
 8000808:	200b      	movs	r0, #11
 800080a:	f002 facc 	bl	8002da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800080e:	200b      	movs	r0, #11
 8000810:	f002 fae3 	bl	8002dda <HAL_NVIC_EnableIRQ>

}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	58024400 	.word	0x58024400

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_GPIO_Init+0x6c>)
 8000828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800082c:	4a17      	ldr	r2, [pc, #92]	; (800088c <MX_GPIO_Init+0x6c>)
 800082e:	f043 0304 	orr.w	r3, r3, #4
 8000832:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_GPIO_Init+0x6c>)
 8000838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800083c:	f003 0304 	and.w	r3, r3, #4
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_GPIO_Init+0x6c>)
 8000846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800084a:	4a10      	ldr	r2, [pc, #64]	; (800088c <MX_GPIO_Init+0x6c>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000854:	4b0d      	ldr	r3, [pc, #52]	; (800088c <MX_GPIO_Init+0x6c>)
 8000856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	4b0a      	ldr	r3, [pc, #40]	; (800088c <MX_GPIO_Init+0x6c>)
 8000864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000868:	4a08      	ldr	r2, [pc, #32]	; (800088c <MX_GPIO_Init+0x6c>)
 800086a:	f043 0302 	orr.w	r3, r3, #2
 800086e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_GPIO_Init+0x6c>)
 8000874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000878:	f003 0302 	and.w	r3, r3, #2
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000880:	bf00      	nop
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	58024400 	.word	0x58024400

08000890 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000896:	463b      	mov	r3, r7
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008a2:	f002 fab5 	bl	8002e10 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008a6:	2301      	movs	r3, #1
 80008a8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80008b2:	231f      	movs	r3, #31
 80008b4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80008b6:	2387      	movs	r3, #135	; 0x87
 80008b8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80008be:	2300      	movs	r3, #0
 80008c0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008c2:	2301      	movs	r3, #1
 80008c4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008c6:	2301      	movs	r3, #1
 80008c8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008d2:	463b      	mov	r3, r7
 80008d4:	4618      	mov	r0, r3
 80008d6:	f002 fad3 	bl	8002e80 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008da:	2004      	movs	r0, #4
 80008dc:	f002 fab0 	bl	8002e40 <HAL_MPU_Enable>

}
 80008e0:	bf00      	nop
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <Error_Handler+0x8>
	...

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <HAL_MspInit+0x30>)
 80008fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000900:	4a08      	ldr	r2, [pc, #32]	; (8000924 <HAL_MspInit+0x30>)
 8000902:	f043 0302 	orr.w	r3, r3, #2
 8000906:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_MspInit+0x30>)
 800090c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000910:	f003 0302 	and.w	r3, r3, #2
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	58024400 	.word	0x58024400

08000928 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b0bc      	sub	sp, #240	; 0xf0
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000940:	f107 0318 	add.w	r3, r7, #24
 8000944:	22c0      	movs	r2, #192	; 0xc0
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f008 fe1f 	bl	800958c <memset>
  if(hadc->Instance==ADC1)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a66      	ldr	r2, [pc, #408]	; (8000aec <HAL_ADC_MspInit+0x1c4>)
 8000954:	4293      	cmp	r3, r2
 8000956:	f040 80c5 	bne.w	8000ae4 <HAL_ADC_MspInit+0x1bc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800095a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800095e:	f04f 0300 	mov.w	r3, #0
 8000962:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000966:	2304      	movs	r3, #4
 8000968:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 800096a:	2309      	movs	r3, #9
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 800096e:	2304      	movs	r3, #4
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000972:	2302      	movs	r3, #2
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000976:	2302      	movs	r3, #2
 8000978:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800097a:	23c0      	movs	r3, #192	; 0xc0
 800097c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800097e:	2320      	movs	r3, #32
 8000980:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072.0;
 8000982:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000986:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000988:	2300      	movs	r3, #0
 800098a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800098e:	f107 0318 	add.w	r3, r7, #24
 8000992:	4618      	mov	r0, r3
 8000994:	f005 fd46 	bl	8006424 <HAL_RCCEx_PeriphCLKConfig>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 800099e:	f7ff ffa3 	bl	80008e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80009a2:	4b53      	ldr	r3, [pc, #332]	; (8000af0 <HAL_ADC_MspInit+0x1c8>)
 80009a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009a8:	4a51      	ldr	r2, [pc, #324]	; (8000af0 <HAL_ADC_MspInit+0x1c8>)
 80009aa:	f043 0320 	orr.w	r3, r3, #32
 80009ae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80009b2:	4b4f      	ldr	r3, [pc, #316]	; (8000af0 <HAL_ADC_MspInit+0x1c8>)
 80009b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009b8:	f003 0320 	and.w	r3, r3, #32
 80009bc:	617b      	str	r3, [r7, #20]
 80009be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c0:	4b4b      	ldr	r3, [pc, #300]	; (8000af0 <HAL_ADC_MspInit+0x1c8>)
 80009c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c6:	4a4a      	ldr	r2, [pc, #296]	; (8000af0 <HAL_ADC_MspInit+0x1c8>)
 80009c8:	f043 0304 	orr.w	r3, r3, #4
 80009cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d0:	4b47      	ldr	r3, [pc, #284]	; (8000af0 <HAL_ADC_MspInit+0x1c8>)
 80009d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d6:	f003 0304 	and.w	r3, r3, #4
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b44      	ldr	r3, [pc, #272]	; (8000af0 <HAL_ADC_MspInit+0x1c8>)
 80009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e4:	4a42      	ldr	r2, [pc, #264]	; (8000af0 <HAL_ADC_MspInit+0x1c8>)
 80009e6:	f043 0301 	orr.w	r3, r3, #1
 80009ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ee:	4b40      	ldr	r3, [pc, #256]	; (8000af0 <HAL_ADC_MspInit+0x1c8>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fc:	4b3c      	ldr	r3, [pc, #240]	; (8000af0 <HAL_ADC_MspInit+0x1c8>)
 80009fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a02:	4a3b      	ldr	r2, [pc, #236]	; (8000af0 <HAL_ADC_MspInit+0x1c8>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a0c:	4b38      	ldr	r3, [pc, #224]	; (8000af0 <HAL_ADC_MspInit+0x1c8>)
 8000a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000a1a:	2333      	movs	r3, #51	; 0x33
 8000a1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a20:	2303      	movs	r3, #3
 8000a22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000a30:	4619      	mov	r1, r3
 8000a32:	4830      	ldr	r0, [pc, #192]	; (8000af4 <HAL_ADC_MspInit+0x1cc>)
 8000a34:	f004 fb3c 	bl	80050b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a38:	23ff      	movs	r3, #255	; 0xff
 8000a3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4829      	ldr	r0, [pc, #164]	; (8000af8 <HAL_ADC_MspInit+0x1d0>)
 8000a52:	f004 fb2d 	bl	80050b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a56:	2303      	movs	r3, #3
 8000a58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a68:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4823      	ldr	r0, [pc, #140]	; (8000afc <HAL_ADC_MspInit+0x1d4>)
 8000a70:	f004 fb1e 	bl	80050b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a74:	4b22      	ldr	r3, [pc, #136]	; (8000b00 <HAL_ADC_MspInit+0x1d8>)
 8000a76:	4a23      	ldr	r2, [pc, #140]	; (8000b04 <HAL_ADC_MspInit+0x1dc>)
 8000a78:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a7a:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <HAL_ADC_MspInit+0x1d8>)
 8000a7c:	2209      	movs	r2, #9
 8000a7e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a80:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <HAL_ADC_MspInit+0x1d8>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a86:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <HAL_ADC_MspInit+0x1d8>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a8c:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <HAL_ADC_MspInit+0x1d8>)
 8000a8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a92:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a94:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <HAL_ADC_MspInit+0x1d8>)
 8000a96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a9a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a9c:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <HAL_ADC_MspInit+0x1d8>)
 8000a9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aa2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000aa4:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <HAL_ADC_MspInit+0x1d8>)
 8000aa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aaa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <HAL_ADC_MspInit+0x1d8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ab2:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <HAL_ADC_MspInit+0x1d8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ab8:	4811      	ldr	r0, [pc, #68]	; (8000b00 <HAL_ADC_MspInit+0x1d8>)
 8000aba:	f002 fa21 	bl	8002f00 <HAL_DMA_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <HAL_ADC_MspInit+0x1a0>
    {
      Error_Handler();
 8000ac4:	f7ff ff10 	bl	80008e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <HAL_ADC_MspInit+0x1d8>)
 8000acc:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ace:	4a0c      	ldr	r2, [pc, #48]	; (8000b00 <HAL_ADC_MspInit+0x1d8>)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	2012      	movs	r0, #18
 8000ada:	f002 f964 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ade:	2012      	movs	r0, #18
 8000ae0:	f002 f97b 	bl	8002dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ae4:	bf00      	nop
 8000ae6:	37f0      	adds	r7, #240	; 0xf0
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40022000 	.word	0x40022000
 8000af0:	58024400 	.word	0x58024400
 8000af4:	58020800 	.word	0x58020800
 8000af8:	58020000 	.word	0x58020000
 8000afc:	58020400 	.word	0x58020400
 8000b00:	24000090 	.word	0x24000090
 8000b04:	40020010 	.word	0x40020010

08000b08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0b      	ldr	r2, [pc, #44]	; (8000b44 <HAL_TIM_Base_MspInit+0x3c>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d10e      	bne.n	8000b38 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <HAL_TIM_Base_MspInit+0x40>)
 8000b1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b20:	4a09      	ldr	r2, [pc, #36]	; (8000b48 <HAL_TIM_Base_MspInit+0x40>)
 8000b22:	f043 0302 	orr.w	r3, r3, #2
 8000b26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <HAL_TIM_Base_MspInit+0x40>)
 8000b2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b30:	f003 0302 	and.w	r3, r3, #2
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	40010400 	.word	0x40010400
 8000b48:	58024400 	.word	0x58024400

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <NMI_Handler+0x4>

08000b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <MemManage_Handler+0x4>

08000b5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b98:	f000 f93a 	bl	8000e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ba4:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <DMA1_Stream0_IRQHandler+0x10>)
 8000ba6:	f002 ff71 	bl	8003a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	24000090 	.word	0x24000090

08000bb4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000bb8:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <ADC_IRQHandler+0x10>)
 8000bba:	f000 fe0d 	bl	80017d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	2400002c 	.word	0x2400002c

08000bc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bcc:	4b37      	ldr	r3, [pc, #220]	; (8000cac <SystemInit+0xe4>)
 8000bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd2:	4a36      	ldr	r2, [pc, #216]	; (8000cac <SystemInit+0xe4>)
 8000bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bdc:	4b34      	ldr	r3, [pc, #208]	; (8000cb0 <SystemInit+0xe8>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f003 030f 	and.w	r3, r3, #15
 8000be4:	2b06      	cmp	r3, #6
 8000be6:	d807      	bhi.n	8000bf8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000be8:	4b31      	ldr	r3, [pc, #196]	; (8000cb0 <SystemInit+0xe8>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f023 030f 	bic.w	r3, r3, #15
 8000bf0:	4a2f      	ldr	r2, [pc, #188]	; (8000cb0 <SystemInit+0xe8>)
 8000bf2:	f043 0307 	orr.w	r3, r3, #7
 8000bf6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bf8:	4b2e      	ldr	r3, [pc, #184]	; (8000cb4 <SystemInit+0xec>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a2d      	ldr	r2, [pc, #180]	; (8000cb4 <SystemInit+0xec>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c04:	4b2b      	ldr	r3, [pc, #172]	; (8000cb4 <SystemInit+0xec>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c0a:	4b2a      	ldr	r3, [pc, #168]	; (8000cb4 <SystemInit+0xec>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	4929      	ldr	r1, [pc, #164]	; (8000cb4 <SystemInit+0xec>)
 8000c10:	4b29      	ldr	r3, [pc, #164]	; (8000cb8 <SystemInit+0xf0>)
 8000c12:	4013      	ands	r3, r2
 8000c14:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c16:	4b26      	ldr	r3, [pc, #152]	; (8000cb0 <SystemInit+0xe8>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f003 0308 	and.w	r3, r3, #8
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d007      	beq.n	8000c32 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c22:	4b23      	ldr	r3, [pc, #140]	; (8000cb0 <SystemInit+0xe8>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f023 030f 	bic.w	r3, r3, #15
 8000c2a:	4a21      	ldr	r2, [pc, #132]	; (8000cb0 <SystemInit+0xe8>)
 8000c2c:	f043 0307 	orr.w	r3, r3, #7
 8000c30:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c32:	4b20      	ldr	r3, [pc, #128]	; (8000cb4 <SystemInit+0xec>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c38:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <SystemInit+0xec>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <SystemInit+0xec>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <SystemInit+0xec>)
 8000c46:	4a1d      	ldr	r2, [pc, #116]	; (8000cbc <SystemInit+0xf4>)
 8000c48:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <SystemInit+0xec>)
 8000c4c:	4a1c      	ldr	r2, [pc, #112]	; (8000cc0 <SystemInit+0xf8>)
 8000c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c50:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <SystemInit+0xec>)
 8000c52:	4a1c      	ldr	r2, [pc, #112]	; (8000cc4 <SystemInit+0xfc>)
 8000c54:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c56:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <SystemInit+0xec>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c5c:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <SystemInit+0xec>)
 8000c5e:	4a19      	ldr	r2, [pc, #100]	; (8000cc4 <SystemInit+0xfc>)
 8000c60:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <SystemInit+0xec>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <SystemInit+0xec>)
 8000c6a:	4a16      	ldr	r2, [pc, #88]	; (8000cc4 <SystemInit+0xfc>)
 8000c6c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <SystemInit+0xec>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <SystemInit+0xec>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <SystemInit+0xec>)
 8000c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <SystemInit+0xec>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <SystemInit+0x100>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <SystemInit+0x104>)
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c92:	d202      	bcs.n	8000c9a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <SystemInit+0x108>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <SystemInit+0x10c>)
 8000c9c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ca0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00
 8000cb0:	52002000 	.word	0x52002000
 8000cb4:	58024400 	.word	0x58024400
 8000cb8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cbc:	02020200 	.word	0x02020200
 8000cc0:	01ff0000 	.word	0x01ff0000
 8000cc4:	01010280 	.word	0x01010280
 8000cc8:	5c001000 	.word	0x5c001000
 8000ccc:	ffff0000 	.word	0xffff0000
 8000cd0:	51008108 	.word	0x51008108
 8000cd4:	52004000 	.word	0x52004000

08000cd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cdc:	f7ff ff74 	bl	8000bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce0:	480c      	ldr	r0, [pc, #48]	; (8000d14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ce2:	490d      	ldr	r1, [pc, #52]	; (8000d18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	; (8000d1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce8:	e002      	b.n	8000cf0 <LoopCopyDataInit>

08000cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cee:	3304      	adds	r3, #4

08000cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf4:	d3f9      	bcc.n	8000cea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cf8:	4c0a      	ldr	r4, [pc, #40]	; (8000d24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cfc:	e001      	b.n	8000d02 <LoopFillZerobss>

08000cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d00:	3204      	adds	r2, #4

08000d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d04:	d3fb      	bcc.n	8000cfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d06:	f008 fc1d 	bl	8009544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d0a:	f7ff fb19 	bl	8000340 <main>
  bx  lr
 8000d0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d10:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d14:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d18:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000d1c:	080095d4 	.word	0x080095d4
  ldr r2, =_sbss
 8000d20:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000d24:	240001ac 	.word	0x240001ac

08000d28 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC3_IRQHandler>
	...

08000d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d32:	2003      	movs	r0, #3
 8000d34:	f002 f82c 	bl	8002d90 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d38:	f005 f9b4 	bl	80060a4 <HAL_RCC_GetSysClockFreq>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <HAL_Init+0x68>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	0a1b      	lsrs	r3, r3, #8
 8000d44:	f003 030f 	and.w	r3, r3, #15
 8000d48:	4913      	ldr	r1, [pc, #76]	; (8000d98 <HAL_Init+0x6c>)
 8000d4a:	5ccb      	ldrb	r3, [r1, r3]
 8000d4c:	f003 031f 	and.w	r3, r3, #31
 8000d50:	fa22 f303 	lsr.w	r3, r2, r3
 8000d54:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d56:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <HAL_Init+0x68>)
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	f003 030f 	and.w	r3, r3, #15
 8000d5e:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <HAL_Init+0x6c>)
 8000d60:	5cd3      	ldrb	r3, [r2, r3]
 8000d62:	f003 031f 	and.w	r3, r3, #31
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	fa22 f303 	lsr.w	r3, r2, r3
 8000d6c:	4a0b      	ldr	r2, [pc, #44]	; (8000d9c <HAL_Init+0x70>)
 8000d6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d70:	4a0b      	ldr	r2, [pc, #44]	; (8000da0 <HAL_Init+0x74>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d76:	200f      	movs	r0, #15
 8000d78:	f000 f814 	bl	8000da4 <HAL_InitTick>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e002      	b.n	8000d8c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d86:	f7ff fdb5 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400
 8000d98:	080095b4 	.word	0x080095b4
 8000d9c:	24000004 	.word	0x24000004
 8000da0:	24000000 	.word	0x24000000

08000da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000dac:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <HAL_InitTick+0x60>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d101      	bne.n	8000db8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	e021      	b.n	8000dfc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <HAL_InitTick+0x64>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <HAL_InitTick+0x60>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f002 f811 	bl	8002df6 <HAL_SYSTICK_Config>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00e      	b.n	8000dfc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b0f      	cmp	r3, #15
 8000de2:	d80a      	bhi.n	8000dfa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de4:	2200      	movs	r2, #0
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dec:	f001 ffdb 	bl	8002da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <HAL_InitTick+0x68>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	e000      	b.n	8000dfc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	2400000c 	.word	0x2400000c
 8000e08:	24000000 	.word	0x24000000
 8000e0c:	24000008 	.word	0x24000008

08000e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x20>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_IncTick+0x24>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <HAL_IncTick+0x24>)
 8000e22:	6013      	str	r3, [r2, #0]
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	2400000c 	.word	0x2400000c
 8000e34:	240001a8 	.word	0x240001a8

08000e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <HAL_GetTick+0x14>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	240001a8 	.word	0x240001a8

08000e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e58:	f7ff ffee 	bl	8000e38 <HAL_GetTick>
 8000e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e68:	d005      	beq.n	8000e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <HAL_Delay+0x44>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4413      	add	r3, r2
 8000e74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e76:	bf00      	nop
 8000e78:	f7ff ffde 	bl	8000e38 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d8f7      	bhi.n	8000e78 <HAL_Delay+0x28>
  {
  }
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2400000c 	.word	0x2400000c

08000e98 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <HAL_GetREVID+0x14>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	0c1b      	lsrs	r3, r3, #16
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	5c001000 	.word	0x5c001000

08000eb0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	431a      	orrs	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	609a      	str	r2, [r3, #8]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b087      	sub	sp, #28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
 8000f24:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	3360      	adds	r3, #96	; 0x60
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	430b      	orrs	r3, r1
 8000f46:	431a      	orrs	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	371c      	adds	r7, #28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	f003 031f 	and.w	r3, r3, #31
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	fa01 f303 	lsl.w	r3, r1, r3
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	611a      	str	r2, [r3, #16]
}
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b087      	sub	sp, #28
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	60f8      	str	r0, [r7, #12]
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3360      	adds	r3, #96	; 0x60
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	601a      	str	r2, [r3, #0]
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	371c      	adds	r7, #28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e000      	b.n	8000fda <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b087      	sub	sp, #28
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	60f8      	str	r0, [r7, #12]
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	3330      	adds	r3, #48	; 0x30
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	0a1b      	lsrs	r3, r3, #8
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	f003 030c 	and.w	r3, r3, #12
 8001002:	4413      	add	r3, r2
 8001004:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	f003 031f 	and.w	r3, r3, #31
 8001010:	211f      	movs	r1, #31
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	401a      	ands	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	0e9b      	lsrs	r3, r3, #26
 800101e:	f003 011f 	and.w	r1, r3, #31
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	f003 031f 	and.w	r3, r3, #31
 8001028:	fa01 f303 	lsl.w	r3, r1, r3
 800102c:	431a      	orrs	r2, r3
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001032:	bf00      	nop
 8001034:	371c      	adds	r7, #28
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	f023 0203 	bic.w	r2, r3, #3
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	431a      	orrs	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	60da      	str	r2, [r3, #12]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001070:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001078:	2301      	movs	r3, #1
 800107a:	e000      	b.n	800107e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800108a:	b480      	push	{r7}
 800108c:	b087      	sub	sp, #28
 800108e:	af00      	add	r7, sp, #0
 8001090:	60f8      	str	r0, [r7, #12]
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	3314      	adds	r3, #20
 800109a:	461a      	mov	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	0e5b      	lsrs	r3, r3, #25
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	f003 0304 	and.w	r3, r3, #4
 80010a6:	4413      	add	r3, r2
 80010a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	0d1b      	lsrs	r3, r3, #20
 80010b2:	f003 031f 	and.w	r3, r3, #31
 80010b6:	2107      	movs	r1, #7
 80010b8:	fa01 f303 	lsl.w	r3, r1, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	401a      	ands	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	0d1b      	lsrs	r3, r3, #20
 80010c4:	f003 031f 	and.w	r3, r3, #31
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	431a      	orrs	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80010d4:	bf00      	nop
 80010d6:	371c      	adds	r7, #28
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80010f8:	43db      	mvns	r3, r3
 80010fa:	401a      	ands	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f003 0318 	and.w	r3, r3, #24
 8001102:	4908      	ldr	r1, [pc, #32]	; (8001124 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001104:	40d9      	lsrs	r1, r3
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	400b      	ands	r3, r1
 800110a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800110e:	431a      	orrs	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001116:	bf00      	nop
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	000fffff 	.word	0x000fffff

08001128 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f003 031f 	and.w	r3, r3, #31
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <LL_ADC_DisableDeepPowerDown+0x20>)
 800116e:	4013      	ands	r3, r2
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	6093      	str	r3, [r2, #8]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	5fffffc0 	.word	0x5fffffc0

08001184 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001198:	d101      	bne.n	800119e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800119a:	2301      	movs	r3, #1
 800119c:	e000      	b.n	80011a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <LL_ADC_EnableInternalRegulator+0x24>)
 80011ba:	4013      	ands	r3, r2
 80011bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	6fffffc0 	.word	0x6fffffc0

080011d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80011e8:	d101      	bne.n	80011ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <LL_ADC_Enable+0x24>)
 800120a:	4013      	ands	r3, r2
 800120c:	f043 0201 	orr.w	r2, r3, #1
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	7fffffc0 	.word	0x7fffffc0

08001224 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <LL_ADC_Disable+0x24>)
 8001232:	4013      	ands	r3, r2
 8001234:	f043 0202 	orr.w	r2, r3, #2
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	7fffffc0 	.word	0x7fffffc0

0800124c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b01      	cmp	r3, #1
 800125e:	d101      	bne.n	8001264 <LL_ADC_IsEnabled+0x18>
 8001260:	2301      	movs	r3, #1
 8001262:	e000      	b.n	8001266 <LL_ADC_IsEnabled+0x1a>
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b02      	cmp	r3, #2
 8001284:	d101      	bne.n	800128a <LL_ADC_IsDisableOngoing+0x18>
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <LL_ADC_IsDisableOngoing+0x1a>
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <LL_ADC_REG_StartConversion+0x24>)
 80012a6:	4013      	ands	r3, r2
 80012a8:	f043 0204 	orr.w	r2, r3, #4
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	7fffffc0 	.word	0x7fffffc0

080012c0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	2b04      	cmp	r3, #4
 80012d2:	d101      	bne.n	80012d8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80012d4:	2301      	movs	r3, #1
 80012d6:	e000      	b.n	80012da <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d101      	bne.n	80012fe <LL_ADC_INJ_IsConversionOngoing+0x18>
 80012fa:	2301      	movs	r3, #1
 80012fc:	e000      	b.n	8001300 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800130c:	b590      	push	{r4, r7, lr}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001314:	2300      	movs	r3, #0
 8001316:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e18f      	b.n	8001646 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001330:	2b00      	cmp	r3, #0
 8001332:	d109      	bne.n	8001348 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff faf7 	bl	8000928 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff19 	bl	8001184 <LL_ADC_IsDeepPowerDownEnabled>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d004      	beq.n	8001362 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff feff 	bl	8001160 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff ff34 	bl	80011d4 <LL_ADC_IsInternalRegulatorEnabled>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d114      	bne.n	800139c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff ff18 	bl	80011ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800137c:	4b87      	ldr	r3, [pc, #540]	; (800159c <HAL_ADC_Init+0x290>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	099b      	lsrs	r3, r3, #6
 8001382:	4a87      	ldr	r2, [pc, #540]	; (80015a0 <HAL_ADC_Init+0x294>)
 8001384:	fba2 2303 	umull	r2, r3, r2, r3
 8001388:	099b      	lsrs	r3, r3, #6
 800138a:	3301      	adds	r3, #1
 800138c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800138e:	e002      	b.n	8001396 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	3b01      	subs	r3, #1
 8001394:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1f9      	bne.n	8001390 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff17 	bl	80011d4 <LL_ADC_IsInternalRegulatorEnabled>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d10d      	bne.n	80013c8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b0:	f043 0210 	orr.w	r2, r3, #16
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013bc:	f043 0201 	orr.w	r2, r3, #1
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff77 	bl	80012c0 <LL_ADC_REG_IsConversionOngoing>
 80013d2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d8:	f003 0310 	and.w	r3, r3, #16
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f040 8129 	bne.w	8001634 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f040 8125 	bne.w	8001634 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ee:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80013f2:	f043 0202 	orr.w	r2, r3, #2
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ff24 	bl	800124c <LL_ADC_IsEnabled>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d136      	bne.n	8001478 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a65      	ldr	r2, [pc, #404]	; (80015a4 <HAL_ADC_Init+0x298>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d004      	beq.n	800141e <HAL_ADC_Init+0x112>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a63      	ldr	r2, [pc, #396]	; (80015a8 <HAL_ADC_Init+0x29c>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d10e      	bne.n	800143c <HAL_ADC_Init+0x130>
 800141e:	4861      	ldr	r0, [pc, #388]	; (80015a4 <HAL_ADC_Init+0x298>)
 8001420:	f7ff ff14 	bl	800124c <LL_ADC_IsEnabled>
 8001424:	4604      	mov	r4, r0
 8001426:	4860      	ldr	r0, [pc, #384]	; (80015a8 <HAL_ADC_Init+0x29c>)
 8001428:	f7ff ff10 	bl	800124c <LL_ADC_IsEnabled>
 800142c:	4603      	mov	r3, r0
 800142e:	4323      	orrs	r3, r4
 8001430:	2b00      	cmp	r3, #0
 8001432:	bf0c      	ite	eq
 8001434:	2301      	moveq	r3, #1
 8001436:	2300      	movne	r3, #0
 8001438:	b2db      	uxtb	r3, r3
 800143a:	e008      	b.n	800144e <HAL_ADC_Init+0x142>
 800143c:	485b      	ldr	r0, [pc, #364]	; (80015ac <HAL_ADC_Init+0x2a0>)
 800143e:	f7ff ff05 	bl	800124c <LL_ADC_IsEnabled>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	bf0c      	ite	eq
 8001448:	2301      	moveq	r3, #1
 800144a:	2300      	movne	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d012      	beq.n	8001478 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a53      	ldr	r2, [pc, #332]	; (80015a4 <HAL_ADC_Init+0x298>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d004      	beq.n	8001466 <HAL_ADC_Init+0x15a>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a51      	ldr	r2, [pc, #324]	; (80015a8 <HAL_ADC_Init+0x29c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d101      	bne.n	800146a <HAL_ADC_Init+0x15e>
 8001466:	4a52      	ldr	r2, [pc, #328]	; (80015b0 <HAL_ADC_Init+0x2a4>)
 8001468:	e000      	b.n	800146c <HAL_ADC_Init+0x160>
 800146a:	4a52      	ldr	r2, [pc, #328]	; (80015b4 <HAL_ADC_Init+0x2a8>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	4619      	mov	r1, r3
 8001472:	4610      	mov	r0, r2
 8001474:	f7ff fd1c 	bl	8000eb0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001478:	f7ff fd0e 	bl	8000e98 <HAL_GetREVID>
 800147c:	4603      	mov	r3, r0
 800147e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001482:	4293      	cmp	r3, r2
 8001484:	d914      	bls.n	80014b0 <HAL_ADC_Init+0x1a4>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	2b10      	cmp	r3, #16
 800148c:	d110      	bne.n	80014b0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	7d5b      	ldrb	r3, [r3, #21]
 8001492:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001498:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800149e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	7f1b      	ldrb	r3, [r3, #28]
 80014a4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80014a6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80014a8:	f043 030c 	orr.w	r3, r3, #12
 80014ac:	61bb      	str	r3, [r7, #24]
 80014ae:	e00d      	b.n	80014cc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	7d5b      	ldrb	r3, [r3, #21]
 80014b4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80014ba:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80014c0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	7f1b      	ldrb	r3, [r3, #28]
 80014c6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	7f1b      	ldrb	r3, [r3, #28]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d106      	bne.n	80014e2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	3b01      	subs	r3, #1
 80014da:	045b      	lsls	r3, r3, #17
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d009      	beq.n	80014fe <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68da      	ldr	r2, [r3, #12]
 8001504:	4b2c      	ldr	r3, [pc, #176]	; (80015b8 <HAL_ADC_Init+0x2ac>)
 8001506:	4013      	ands	r3, r2
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	6812      	ldr	r2, [r2, #0]
 800150c:	69b9      	ldr	r1, [r7, #24]
 800150e:	430b      	orrs	r3, r1
 8001510:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fed2 	bl	80012c0 <LL_ADC_REG_IsConversionOngoing>
 800151c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fedf 	bl	80012e6 <LL_ADC_INJ_IsConversionOngoing>
 8001528:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d15f      	bne.n	80015f0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d15c      	bne.n	80015f0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	7d1b      	ldrb	r3, [r3, #20]
 800153a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68da      	ldr	r2, [r3, #12]
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <HAL_ADC_Init+0x2b0>)
 800154c:	4013      	ands	r3, r2
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	69b9      	ldr	r1, [r7, #24]
 8001554:	430b      	orrs	r3, r1
 8001556:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800155e:	2b01      	cmp	r3, #1
 8001560:	d130      	bne.n	80015c4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	691a      	ldr	r2, [r3, #16]
 800156e:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <HAL_ADC_Init+0x2b4>)
 8001570:	4013      	ands	r3, r2
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001576:	3a01      	subs	r2, #1
 8001578:	0411      	lsls	r1, r2, #16
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800157e:	4311      	orrs	r1, r2
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001584:	4311      	orrs	r1, r2
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800158a:	430a      	orrs	r2, r1
 800158c:	431a      	orrs	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0201 	orr.w	r2, r2, #1
 8001596:	611a      	str	r2, [r3, #16]
 8001598:	e01c      	b.n	80015d4 <HAL_ADC_Init+0x2c8>
 800159a:	bf00      	nop
 800159c:	24000000 	.word	0x24000000
 80015a0:	053e2d63 	.word	0x053e2d63
 80015a4:	40022000 	.word	0x40022000
 80015a8:	40022100 	.word	0x40022100
 80015ac:	58026000 	.word	0x58026000
 80015b0:	40022300 	.word	0x40022300
 80015b4:	58026300 	.word	0x58026300
 80015b8:	fff0c003 	.word	0xfff0c003
 80015bc:	ffffbffc 	.word	0xffffbffc
 80015c0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	691a      	ldr	r2, [r3, #16]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 0201 	bic.w	r2, r2, #1
 80015d2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f001 f826 	bl	800263c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d10c      	bne.n	8001612 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f023 010f 	bic.w	r1, r3, #15
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	1e5a      	subs	r2, r3, #1
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	631a      	str	r2, [r3, #48]	; 0x30
 8001610:	e007      	b.n	8001622 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 020f 	bic.w	r2, r2, #15
 8001620:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001626:	f023 0303 	bic.w	r3, r3, #3
 800162a:	f043 0201 	orr.w	r2, r3, #1
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	655a      	str	r2, [r3, #84]	; 0x54
 8001632:	e007      	b.n	8001644 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001638:	f043 0210 	orr.w	r2, r3, #16
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001644:	7ffb      	ldrb	r3, [r7, #31]
}
 8001646:	4618      	mov	r0, r3
 8001648:	3724      	adds	r7, #36	; 0x24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd90      	pop	{r4, r7, pc}
 800164e:	bf00      	nop

08001650 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a55      	ldr	r2, [pc, #340]	; (80017b8 <HAL_ADC_Start_DMA+0x168>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d004      	beq.n	8001670 <HAL_ADC_Start_DMA+0x20>
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a54      	ldr	r2, [pc, #336]	; (80017bc <HAL_ADC_Start_DMA+0x16c>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d101      	bne.n	8001674 <HAL_ADC_Start_DMA+0x24>
 8001670:	4b53      	ldr	r3, [pc, #332]	; (80017c0 <HAL_ADC_Start_DMA+0x170>)
 8001672:	e000      	b.n	8001676 <HAL_ADC_Start_DMA+0x26>
 8001674:	4b53      	ldr	r3, [pc, #332]	; (80017c4 <HAL_ADC_Start_DMA+0x174>)
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fd56 	bl	8001128 <LL_ADC_GetMultimode>
 800167c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fe1c 	bl	80012c0 <LL_ADC_REG_IsConversionOngoing>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	f040 808c 	bne.w	80017a8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001696:	2b01      	cmp	r3, #1
 8001698:	d101      	bne.n	800169e <HAL_ADC_Start_DMA+0x4e>
 800169a:	2302      	movs	r3, #2
 800169c:	e087      	b.n	80017ae <HAL_ADC_Start_DMA+0x15e>
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	2b05      	cmp	r3, #5
 80016b0:	d002      	beq.n	80016b8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	2b09      	cmp	r3, #9
 80016b6:	d170      	bne.n	800179a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80016b8:	68f8      	ldr	r0, [r7, #12]
 80016ba:	f000 fe41 	bl	8002340 <ADC_Enable>
 80016be:	4603      	mov	r3, r0
 80016c0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80016c2:	7dfb      	ldrb	r3, [r7, #23]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d163      	bne.n	8001790 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80016cc:	4b3e      	ldr	r3, [pc, #248]	; (80017c8 <HAL_ADC_Start_DMA+0x178>)
 80016ce:	4013      	ands	r3, r2
 80016d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a37      	ldr	r2, [pc, #220]	; (80017bc <HAL_ADC_Start_DMA+0x16c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d002      	beq.n	80016e8 <HAL_ADC_Start_DMA+0x98>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	e000      	b.n	80016ea <HAL_ADC_Start_DMA+0x9a>
 80016e8:	4b33      	ldr	r3, [pc, #204]	; (80017b8 <HAL_ADC_Start_DMA+0x168>)
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d002      	beq.n	80016f8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d105      	bne.n	8001704 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001708:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d006      	beq.n	800171e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001714:	f023 0206 	bic.w	r2, r3, #6
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	659a      	str	r2, [r3, #88]	; 0x58
 800171c:	e002      	b.n	8001724 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001728:	4a28      	ldr	r2, [pc, #160]	; (80017cc <HAL_ADC_Start_DMA+0x17c>)
 800172a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001730:	4a27      	ldr	r2, [pc, #156]	; (80017d0 <HAL_ADC_Start_DMA+0x180>)
 8001732:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001738:	4a26      	ldr	r2, [pc, #152]	; (80017d4 <HAL_ADC_Start_DMA+0x184>)
 800173a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	221c      	movs	r2, #28
 8001742:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0210 	orr.w	r2, r2, #16
 800175a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001764:	4619      	mov	r1, r3
 8001766:	4610      	mov	r0, r2
 8001768:	f7ff fc69 	bl	800103e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	3340      	adds	r3, #64	; 0x40
 8001776:	4619      	mov	r1, r3
 8001778:	68ba      	ldr	r2, [r7, #8]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f001 ff1c 	bl	80035b8 <HAL_DMA_Start_IT>
 8001780:	4603      	mov	r3, r0
 8001782:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fd85 	bl	8001298 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800178e:	e00d      	b.n	80017ac <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001798:	e008      	b.n	80017ac <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80017a6:	e001      	b.n	80017ac <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017a8:	2302      	movs	r3, #2
 80017aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80017ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40022000 	.word	0x40022000
 80017bc:	40022100 	.word	0x40022100
 80017c0:	40022300 	.word	0x40022300
 80017c4:	58026300 	.word	0x58026300
 80017c8:	fffff0fe 	.word	0xfffff0fe
 80017cc:	08002513 	.word	0x08002513
 80017d0:	080025eb 	.word	0x080025eb
 80017d4:	08002607 	.word	0x08002607

080017d8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	; 0x28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80017e0:	2300      	movs	r3, #0
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a87      	ldr	r2, [pc, #540]	; (8001a18 <HAL_ADC_IRQHandler+0x240>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d004      	beq.n	8001808 <HAL_ADC_IRQHandler+0x30>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a86      	ldr	r2, [pc, #536]	; (8001a1c <HAL_ADC_IRQHandler+0x244>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d101      	bne.n	800180c <HAL_ADC_IRQHandler+0x34>
 8001808:	4b85      	ldr	r3, [pc, #532]	; (8001a20 <HAL_ADC_IRQHandler+0x248>)
 800180a:	e000      	b.n	800180e <HAL_ADC_IRQHandler+0x36>
 800180c:	4b85      	ldr	r3, [pc, #532]	; (8001a24 <HAL_ADC_IRQHandler+0x24c>)
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fc8a 	bl	8001128 <LL_ADC_GetMultimode>
 8001814:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d017      	beq.n	8001850 <HAL_ADC_IRQHandler+0x78>
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d012      	beq.n	8001850 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182e:	f003 0310 	and.w	r3, r3, #16
 8001832:	2b00      	cmp	r3, #0
 8001834:	d105      	bne.n	8001842 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f001 f8ec 	bl	8002a20 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2202      	movs	r2, #2
 800184e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	2b00      	cmp	r3, #0
 8001858:	d004      	beq.n	8001864 <HAL_ADC_IRQHandler+0x8c>
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	d10a      	bne.n	800187a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 8083 	beq.w	8001976 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	2b00      	cmp	r3, #0
 8001878:	d07d      	beq.n	8001976 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187e:	f003 0310 	and.w	r3, r3, #16
 8001882:	2b00      	cmp	r3, #0
 8001884:	d105      	bne.n	8001892 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800188a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fb92 	bl	8000fc0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d062      	beq.n	8001968 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a5d      	ldr	r2, [pc, #372]	; (8001a1c <HAL_ADC_IRQHandler+0x244>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d002      	beq.n	80018b2 <HAL_ADC_IRQHandler+0xda>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	e000      	b.n	80018b4 <HAL_ADC_IRQHandler+0xdc>
 80018b2:	4b59      	ldr	r3, [pc, #356]	; (8001a18 <HAL_ADC_IRQHandler+0x240>)
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d008      	beq.n	80018ce <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d005      	beq.n	80018ce <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	2b05      	cmp	r3, #5
 80018c6:	d002      	beq.n	80018ce <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	2b09      	cmp	r3, #9
 80018cc:	d104      	bne.n	80018d8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	623b      	str	r3, [r7, #32]
 80018d6:	e00c      	b.n	80018f2 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a4f      	ldr	r2, [pc, #316]	; (8001a1c <HAL_ADC_IRQHandler+0x244>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d002      	beq.n	80018e8 <HAL_ADC_IRQHandler+0x110>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	e000      	b.n	80018ea <HAL_ADC_IRQHandler+0x112>
 80018e8:	4b4b      	ldr	r3, [pc, #300]	; (8001a18 <HAL_ADC_IRQHandler+0x240>)
 80018ea:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d135      	bne.n	8001968 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b08      	cmp	r3, #8
 8001908:	d12e      	bne.n	8001968 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fcd6 	bl	80012c0 <LL_ADC_REG_IsConversionOngoing>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d11a      	bne.n	8001950 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 020c 	bic.w	r2, r2, #12
 8001928:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d112      	bne.n	8001968 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001946:	f043 0201 	orr.w	r2, r3, #1
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	655a      	str	r2, [r3, #84]	; 0x54
 800194e:	e00b      	b.n	8001968 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001954:	f043 0210 	orr.w	r2, r3, #16
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001960:	f043 0201 	orr.w	r2, r3, #1
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7fe fcb5 	bl	80002d8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	220c      	movs	r2, #12
 8001974:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	f003 0320 	and.w	r3, r3, #32
 800197c:	2b00      	cmp	r3, #0
 800197e:	d004      	beq.n	800198a <HAL_ADC_IRQHandler+0x1b2>
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	f003 0320 	and.w	r3, r3, #32
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10b      	bne.n	80019a2 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 80a0 	beq.w	8001ad6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800199c:	2b00      	cmp	r3, #0
 800199e:	f000 809a 	beq.w	8001ad6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a6:	f003 0310 	and.w	r3, r3, #16
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d105      	bne.n	80019ba <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fb50 	bl	8001064 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80019c4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff faf8 	bl	8000fc0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80019d0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a11      	ldr	r2, [pc, #68]	; (8001a1c <HAL_ADC_IRQHandler+0x244>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d002      	beq.n	80019e2 <HAL_ADC_IRQHandler+0x20a>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	e000      	b.n	80019e4 <HAL_ADC_IRQHandler+0x20c>
 80019e2:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <HAL_ADC_IRQHandler+0x240>)
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d008      	beq.n	80019fe <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d005      	beq.n	80019fe <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	2b06      	cmp	r3, #6
 80019f6:	d002      	beq.n	80019fe <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	2b07      	cmp	r3, #7
 80019fc:	d104      	bne.n	8001a08 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	623b      	str	r3, [r7, #32]
 8001a06:	e014      	b.n	8001a32 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a03      	ldr	r2, [pc, #12]	; (8001a1c <HAL_ADC_IRQHandler+0x244>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d00a      	beq.n	8001a28 <HAL_ADC_IRQHandler+0x250>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	e008      	b.n	8001a2a <HAL_ADC_IRQHandler+0x252>
 8001a18:	40022000 	.word	0x40022000
 8001a1c:	40022100 	.word	0x40022100
 8001a20:	40022300 	.word	0x40022300
 8001a24:	58026300 	.word	0x58026300
 8001a28:	4b84      	ldr	r3, [pc, #528]	; (8001c3c <HAL_ADC_IRQHandler+0x464>)
 8001a2a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d047      	beq.n	8001ac8 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001a38:	6a3b      	ldr	r3, [r7, #32]
 8001a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d007      	beq.n	8001a52 <HAL_ADC_IRQHandler+0x27a>
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d03f      	beq.n	8001ac8 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d13a      	bne.n	8001ac8 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a5c:	2b40      	cmp	r3, #64	; 0x40
 8001a5e:	d133      	bne.n	8001ac8 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001a60:	6a3b      	ldr	r3, [r7, #32]
 8001a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d12e      	bne.n	8001ac8 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fc39 	bl	80012e6 <LL_ADC_INJ_IsConversionOngoing>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d11a      	bne.n	8001ab0 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001a88:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d112      	bne.n	8001ac8 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa6:	f043 0201 	orr.w	r2, r3, #1
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	655a      	str	r2, [r3, #84]	; 0x54
 8001aae:	e00b      	b.n	8001ac8 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab4:	f043 0210 	orr.w	r2, r3, #16
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac0:	f043 0201 	orr.w	r2, r3, #1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 ff81 	bl	80029d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2260      	movs	r2, #96	; 0x60
 8001ad4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d011      	beq.n	8001b04 <HAL_ADC_IRQHandler+0x32c>
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00c      	beq.n	8001b04 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f8b2 	bl	8001c60 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2280      	movs	r2, #128	; 0x80
 8001b02:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d012      	beq.n	8001b34 <HAL_ADC_IRQHandler+0x35c>
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00d      	beq.n	8001b34 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 ff67 	bl	80029f8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b32:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d012      	beq.n	8001b64 <HAL_ADC_IRQHandler+0x38c>
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00d      	beq.n	8001b64 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 ff59 	bl	8002a0c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b62:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f003 0310 	and.w	r3, r3, #16
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d043      	beq.n	8001bf6 <HAL_ADC_IRQHandler+0x41e>
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	f003 0310 	and.w	r3, r3, #16
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d03e      	beq.n	8001bf6 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d102      	bne.n	8001b86 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8001b80:	2301      	movs	r3, #1
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
 8001b84:	e021      	b.n	8001bca <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d015      	beq.n	8001bb8 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a2a      	ldr	r2, [pc, #168]	; (8001c3c <HAL_ADC_IRQHandler+0x464>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d004      	beq.n	8001ba0 <HAL_ADC_IRQHandler+0x3c8>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a29      	ldr	r2, [pc, #164]	; (8001c40 <HAL_ADC_IRQHandler+0x468>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d101      	bne.n	8001ba4 <HAL_ADC_IRQHandler+0x3cc>
 8001ba0:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <HAL_ADC_IRQHandler+0x46c>)
 8001ba2:	e000      	b.n	8001ba6 <HAL_ADC_IRQHandler+0x3ce>
 8001ba4:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <HAL_ADC_IRQHandler+0x470>)
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff facc 	bl	8001144 <LL_ADC_GetMultiDMATransfer>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00b      	beq.n	8001bca <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb6:	e008      	b.n	8001bca <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d10e      	bne.n	8001bee <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be0:	f043 0202 	orr.w	r2, r3, #2
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f843 	bl	8001c74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2210      	movs	r2, #16
 8001bf4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d018      	beq.n	8001c32 <HAL_ADC_IRQHandler+0x45a>
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d013      	beq.n	8001c32 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1a:	f043 0208 	orr.w	r2, r3, #8
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c2a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 fed9 	bl	80029e4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001c32:	bf00      	nop
 8001c34:	3728      	adds	r7, #40	; 0x28
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40022000 	.word	0x40022000
 8001c40:	40022100 	.word	0x40022100
 8001c44:	40022300 	.word	0x40022300
 8001c48:	58026300 	.word	0x58026300

08001c4c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c88:	b590      	push	{r4, r7, lr}
 8001c8a:	b0a1      	sub	sp, #132	; 0x84
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	4a65      	ldr	r2, [pc, #404]	; (8001e38 <HAL_ADC_ConfigChannel+0x1b0>)
 8001ca2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x2a>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e32e      	b.n	8002310 <HAL_ADC_ConfigChannel+0x688>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fafe 	bl	80012c0 <LL_ADC_REG_IsConversionOngoing>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f040 8313 	bne.w	80022f2 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	db2c      	blt.n	8001d2e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d108      	bne.n	8001cf2 <HAL_ADC_ConfigChannel+0x6a>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	0e9b      	lsrs	r3, r3, #26
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	2201      	movs	r2, #1
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	e016      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x98>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cfa:	fa93 f3a3 	rbit	r3, r3
 8001cfe:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d02:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001d0a:	2320      	movs	r3, #32
 8001d0c:	e003      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001d0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d10:	fab3 f383 	clz	r3, r3
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	f003 031f 	and.w	r3, r3, #31
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	69d1      	ldr	r1, [r2, #28]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6812      	ldr	r2, [r2, #0]
 8001d2a:	430b      	orrs	r3, r1
 8001d2c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	6859      	ldr	r1, [r3, #4]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	f7ff f953 	bl	8000fe6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fabb 	bl	80012c0 <LL_ADC_REG_IsConversionOngoing>
 8001d4a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fac8 	bl	80012e6 <LL_ADC_INJ_IsConversionOngoing>
 8001d56:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f040 80b8 	bne.w	8001ed0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f040 80b4 	bne.w	8001ed0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6818      	ldr	r0, [r3, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	6819      	ldr	r1, [r3, #0]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	461a      	mov	r2, r3
 8001d76:	f7ff f988 	bl	800108a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d7a:	4b30      	ldr	r3, [pc, #192]	; (8001e3c <HAL_ADC_ConfigChannel+0x1b4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001d82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d86:	d10b      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x118>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	695a      	ldr	r2, [r3, #20]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	089b      	lsrs	r3, r3, #2
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	e01d      	b.n	8001ddc <HAL_ADC_ConfigChannel+0x154>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	f003 0310 	and.w	r3, r3, #16
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10b      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x13e>
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	695a      	ldr	r2, [r3, #20]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	089b      	lsrs	r3, r3, #2
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	e00a      	b.n	8001ddc <HAL_ADC_ConfigChannel+0x154>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	695a      	ldr	r2, [r3, #20]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	089b      	lsrs	r3, r3, #2
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d02c      	beq.n	8001e40 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	6919      	ldr	r1, [r3, #16]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001df4:	f7ff f890 	bl	8000f18 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6818      	ldr	r0, [r3, #0]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	6919      	ldr	r1, [r3, #16]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	7e5b      	ldrb	r3, [r3, #25]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d102      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x186>
 8001e08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001e0c:	e000      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x188>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	461a      	mov	r2, r3
 8001e12:	f7ff f8ba 	bl	8000f8a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	6919      	ldr	r1, [r3, #16]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	7e1b      	ldrb	r3, [r3, #24]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d102      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x1a4>
 8001e26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e2a:	e000      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x1a6>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	461a      	mov	r2, r3
 8001e30:	f7ff f892 	bl	8000f58 <LL_ADC_SetDataRightShift>
 8001e34:	e04c      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x248>
 8001e36:	bf00      	nop
 8001e38:	47ff0000 	.word	0x47ff0000
 8001e3c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	069b      	lsls	r3, r3, #26
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d107      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e62:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	069b      	lsls	r3, r3, #26
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d107      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e86:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	069b      	lsls	r3, r3, #26
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d107      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001eaa:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	069b      	lsls	r3, r3, #26
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d107      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ece:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff f9b9 	bl	800124c <LL_ADC_IsEnabled>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f040 8211 	bne.w	8002304 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6818      	ldr	r0, [r3, #0]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	6819      	ldr	r1, [r3, #0]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	f7ff f8f6 	bl	80010e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	4aa1      	ldr	r2, [pc, #644]	; (8002180 <HAL_ADC_ConfigChannel+0x4f8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	f040 812e 	bne.w	800215c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10b      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x2a0>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	0e9b      	lsrs	r3, r3, #26
 8001f16:	3301      	adds	r3, #1
 8001f18:	f003 031f 	and.w	r3, r3, #31
 8001f1c:	2b09      	cmp	r3, #9
 8001f1e:	bf94      	ite	ls
 8001f20:	2301      	movls	r3, #1
 8001f22:	2300      	movhi	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	e019      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x2d4>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f30:	fa93 f3a3 	rbit	r3, r3
 8001f34:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f38:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8001f40:	2320      	movs	r3, #32
 8001f42:	e003      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8001f44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	2b09      	cmp	r3, #9
 8001f54:	bf94      	ite	ls
 8001f56:	2301      	movls	r3, #1
 8001f58:	2300      	movhi	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d079      	beq.n	8002054 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d107      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x2f4>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	0e9b      	lsrs	r3, r3, #26
 8001f72:	3301      	adds	r3, #1
 8001f74:	069b      	lsls	r3, r3, #26
 8001f76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f7a:	e015      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x320>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f84:	fa93 f3a3 	rbit	r3, r3
 8001f88:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f8c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8001f94:	2320      	movs	r3, #32
 8001f96:	e003      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8001f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	069b      	lsls	r3, r3, #26
 8001fa4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d109      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x340>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	0e9b      	lsrs	r3, r3, #26
 8001fba:	3301      	adds	r3, #1
 8001fbc:	f003 031f 	and.w	r3, r3, #31
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc6:	e017      	b.n	8001ff8 <HAL_ADC_ConfigChannel+0x370>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fd0:	fa93 f3a3 	rbit	r3, r3
 8001fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fd8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001fda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8001fe0:	2320      	movs	r3, #32
 8001fe2:	e003      	b.n	8001fec <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8001fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fe6:	fab3 f383 	clz	r3, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	3301      	adds	r3, #1
 8001fee:	f003 031f 	and.w	r3, r3, #31
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff8:	ea42 0103 	orr.w	r1, r2, r3
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10a      	bne.n	800201e <HAL_ADC_ConfigChannel+0x396>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	0e9b      	lsrs	r3, r3, #26
 800200e:	3301      	adds	r3, #1
 8002010:	f003 021f 	and.w	r2, r3, #31
 8002014:	4613      	mov	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4413      	add	r3, r2
 800201a:	051b      	lsls	r3, r3, #20
 800201c:	e018      	b.n	8002050 <HAL_ADC_ConfigChannel+0x3c8>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002026:	fa93 f3a3 	rbit	r3, r3
 800202a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800202c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002036:	2320      	movs	r3, #32
 8002038:	e003      	b.n	8002042 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800203a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800203c:	fab3 f383 	clz	r3, r3
 8002040:	b2db      	uxtb	r3, r3
 8002042:	3301      	adds	r3, #1
 8002044:	f003 021f 	and.w	r2, r3, #31
 8002048:	4613      	mov	r3, r2
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4413      	add	r3, r2
 800204e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002050:	430b      	orrs	r3, r1
 8002052:	e07e      	b.n	8002152 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800205c:	2b00      	cmp	r3, #0
 800205e:	d107      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x3e8>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	0e9b      	lsrs	r3, r3, #26
 8002066:	3301      	adds	r3, #1
 8002068:	069b      	lsls	r3, r3, #26
 800206a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800206e:	e015      	b.n	800209c <HAL_ADC_ConfigChannel+0x414>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002078:	fa93 f3a3 	rbit	r3, r3
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002088:	2320      	movs	r3, #32
 800208a:	e003      	b.n	8002094 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 800208c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	3301      	adds	r3, #1
 8002096:	069b      	lsls	r3, r3, #26
 8002098:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d109      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x434>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	0e9b      	lsrs	r3, r3, #26
 80020ae:	3301      	adds	r3, #1
 80020b0:	f003 031f 	and.w	r3, r3, #31
 80020b4:	2101      	movs	r1, #1
 80020b6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ba:	e017      	b.n	80020ec <HAL_ADC_ConfigChannel+0x464>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa93 f3a3 	rbit	r3, r3
 80020c8:	61bb      	str	r3, [r7, #24]
  return result;
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80020d4:	2320      	movs	r3, #32
 80020d6:	e003      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80020d8:	6a3b      	ldr	r3, [r7, #32]
 80020da:	fab3 f383 	clz	r3, r3
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	3301      	adds	r3, #1
 80020e2:	f003 031f 	and.w	r3, r3, #31
 80020e6:	2101      	movs	r1, #1
 80020e8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ec:	ea42 0103 	orr.w	r1, r2, r3
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10d      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x490>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	0e9b      	lsrs	r3, r3, #26
 8002102:	3301      	adds	r3, #1
 8002104:	f003 021f 	and.w	r2, r3, #31
 8002108:	4613      	mov	r3, r2
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	4413      	add	r3, r2
 800210e:	3b1e      	subs	r3, #30
 8002110:	051b      	lsls	r3, r3, #20
 8002112:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002116:	e01b      	b.n	8002150 <HAL_ADC_ConfigChannel+0x4c8>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	fa93 f3a3 	rbit	r3, r3
 8002124:	60fb      	str	r3, [r7, #12]
  return result;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002130:	2320      	movs	r3, #32
 8002132:	e003      	b.n	800213c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	fab3 f383 	clz	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	3301      	adds	r3, #1
 800213e:	f003 021f 	and.w	r2, r3, #31
 8002142:	4613      	mov	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	3b1e      	subs	r3, #30
 800214a:	051b      	lsls	r3, r3, #20
 800214c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002150:	430b      	orrs	r3, r1
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	6892      	ldr	r2, [r2, #8]
 8002156:	4619      	mov	r1, r3
 8002158:	f7fe ff97 	bl	800108a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	f280 80cf 	bge.w	8002304 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a06      	ldr	r2, [pc, #24]	; (8002184 <HAL_ADC_ConfigChannel+0x4fc>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d004      	beq.n	800217a <HAL_ADC_ConfigChannel+0x4f2>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a04      	ldr	r2, [pc, #16]	; (8002188 <HAL_ADC_ConfigChannel+0x500>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d10a      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x508>
 800217a:	4b04      	ldr	r3, [pc, #16]	; (800218c <HAL_ADC_ConfigChannel+0x504>)
 800217c:	e009      	b.n	8002192 <HAL_ADC_ConfigChannel+0x50a>
 800217e:	bf00      	nop
 8002180:	47ff0000 	.word	0x47ff0000
 8002184:	40022000 	.word	0x40022000
 8002188:	40022100 	.word	0x40022100
 800218c:	40022300 	.word	0x40022300
 8002190:	4b61      	ldr	r3, [pc, #388]	; (8002318 <HAL_ADC_ConfigChannel+0x690>)
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe feb2 	bl	8000efc <LL_ADC_GetCommonPathInternalCh>
 8002198:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a5f      	ldr	r2, [pc, #380]	; (800231c <HAL_ADC_ConfigChannel+0x694>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d004      	beq.n	80021ae <HAL_ADC_ConfigChannel+0x526>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a5d      	ldr	r2, [pc, #372]	; (8002320 <HAL_ADC_ConfigChannel+0x698>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d10e      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x544>
 80021ae:	485b      	ldr	r0, [pc, #364]	; (800231c <HAL_ADC_ConfigChannel+0x694>)
 80021b0:	f7ff f84c 	bl	800124c <LL_ADC_IsEnabled>
 80021b4:	4604      	mov	r4, r0
 80021b6:	485a      	ldr	r0, [pc, #360]	; (8002320 <HAL_ADC_ConfigChannel+0x698>)
 80021b8:	f7ff f848 	bl	800124c <LL_ADC_IsEnabled>
 80021bc:	4603      	mov	r3, r0
 80021be:	4323      	orrs	r3, r4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	bf0c      	ite	eq
 80021c4:	2301      	moveq	r3, #1
 80021c6:	2300      	movne	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	e008      	b.n	80021de <HAL_ADC_ConfigChannel+0x556>
 80021cc:	4855      	ldr	r0, [pc, #340]	; (8002324 <HAL_ADC_ConfigChannel+0x69c>)
 80021ce:	f7ff f83d 	bl	800124c <LL_ADC_IsEnabled>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	bf0c      	ite	eq
 80021d8:	2301      	moveq	r3, #1
 80021da:	2300      	movne	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d07d      	beq.n	80022de <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a50      	ldr	r2, [pc, #320]	; (8002328 <HAL_ADC_ConfigChannel+0x6a0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d130      	bne.n	800224e <HAL_ADC_ConfigChannel+0x5c6>
 80021ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d12b      	bne.n	800224e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a4a      	ldr	r2, [pc, #296]	; (8002324 <HAL_ADC_ConfigChannel+0x69c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	f040 8081 	bne.w	8002304 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a45      	ldr	r2, [pc, #276]	; (800231c <HAL_ADC_ConfigChannel+0x694>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d004      	beq.n	8002216 <HAL_ADC_ConfigChannel+0x58e>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a43      	ldr	r2, [pc, #268]	; (8002320 <HAL_ADC_ConfigChannel+0x698>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d101      	bne.n	800221a <HAL_ADC_ConfigChannel+0x592>
 8002216:	4a45      	ldr	r2, [pc, #276]	; (800232c <HAL_ADC_ConfigChannel+0x6a4>)
 8002218:	e000      	b.n	800221c <HAL_ADC_ConfigChannel+0x594>
 800221a:	4a3f      	ldr	r2, [pc, #252]	; (8002318 <HAL_ADC_ConfigChannel+0x690>)
 800221c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800221e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002222:	4619      	mov	r1, r3
 8002224:	4610      	mov	r0, r2
 8002226:	f7fe fe56 	bl	8000ed6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800222a:	4b41      	ldr	r3, [pc, #260]	; (8002330 <HAL_ADC_ConfigChannel+0x6a8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	099b      	lsrs	r3, r3, #6
 8002230:	4a40      	ldr	r2, [pc, #256]	; (8002334 <HAL_ADC_ConfigChannel+0x6ac>)
 8002232:	fba2 2303 	umull	r2, r3, r2, r3
 8002236:	099b      	lsrs	r3, r3, #6
 8002238:	3301      	adds	r3, #1
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800223e:	e002      	b.n	8002246 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	3b01      	subs	r3, #1
 8002244:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1f9      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800224c:	e05a      	b.n	8002304 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a39      	ldr	r2, [pc, #228]	; (8002338 <HAL_ADC_ConfigChannel+0x6b0>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d11e      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x60e>
 8002258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800225a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d119      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a2f      	ldr	r2, [pc, #188]	; (8002324 <HAL_ADC_ConfigChannel+0x69c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d14b      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a2a      	ldr	r2, [pc, #168]	; (800231c <HAL_ADC_ConfigChannel+0x694>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d004      	beq.n	8002280 <HAL_ADC_ConfigChannel+0x5f8>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a29      	ldr	r2, [pc, #164]	; (8002320 <HAL_ADC_ConfigChannel+0x698>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d101      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x5fc>
 8002280:	4a2a      	ldr	r2, [pc, #168]	; (800232c <HAL_ADC_ConfigChannel+0x6a4>)
 8002282:	e000      	b.n	8002286 <HAL_ADC_ConfigChannel+0x5fe>
 8002284:	4a24      	ldr	r2, [pc, #144]	; (8002318 <HAL_ADC_ConfigChannel+0x690>)
 8002286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002288:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800228c:	4619      	mov	r1, r3
 800228e:	4610      	mov	r0, r2
 8002290:	f7fe fe21 	bl	8000ed6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002294:	e036      	b.n	8002304 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a28      	ldr	r2, [pc, #160]	; (800233c <HAL_ADC_ConfigChannel+0x6b4>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d131      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x67c>
 80022a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d12c      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a1d      	ldr	r2, [pc, #116]	; (8002324 <HAL_ADC_ConfigChannel+0x69c>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d127      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a18      	ldr	r2, [pc, #96]	; (800231c <HAL_ADC_ConfigChannel+0x694>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d004      	beq.n	80022c8 <HAL_ADC_ConfigChannel+0x640>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a17      	ldr	r2, [pc, #92]	; (8002320 <HAL_ADC_ConfigChannel+0x698>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d101      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x644>
 80022c8:	4a18      	ldr	r2, [pc, #96]	; (800232c <HAL_ADC_ConfigChannel+0x6a4>)
 80022ca:	e000      	b.n	80022ce <HAL_ADC_ConfigChannel+0x646>
 80022cc:	4a12      	ldr	r2, [pc, #72]	; (8002318 <HAL_ADC_ConfigChannel+0x690>)
 80022ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022d4:	4619      	mov	r1, r3
 80022d6:	4610      	mov	r0, r2
 80022d8:	f7fe fdfd 	bl	8000ed6 <LL_ADC_SetCommonPathInternalCh>
 80022dc:	e012      	b.n	8002304 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e2:	f043 0220 	orr.w	r2, r3, #32
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80022f0:	e008      	b.n	8002304 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f6:	f043 0220 	orr.w	r2, r3, #32
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800230c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002310:	4618      	mov	r0, r3
 8002312:	3784      	adds	r7, #132	; 0x84
 8002314:	46bd      	mov	sp, r7
 8002316:	bd90      	pop	{r4, r7, pc}
 8002318:	58026300 	.word	0x58026300
 800231c:	40022000 	.word	0x40022000
 8002320:	40022100 	.word	0x40022100
 8002324:	58026000 	.word	0x58026000
 8002328:	cb840000 	.word	0xcb840000
 800232c:	40022300 	.word	0x40022300
 8002330:	24000000 	.word	0x24000000
 8002334:	053e2d63 	.word	0x053e2d63
 8002338:	c7520000 	.word	0xc7520000
 800233c:	cfb80000 	.word	0xcfb80000

08002340 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe ff7d 	bl	800124c <LL_ADC_IsEnabled>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d16e      	bne.n	8002436 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	4b38      	ldr	r3, [pc, #224]	; (8002440 <ADC_Enable+0x100>)
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00d      	beq.n	8002382 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236a:	f043 0210 	orr.w	r2, r3, #16
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002376:	f043 0201 	orr.w	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e05a      	b.n	8002438 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe ff38 	bl	80011fc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800238c:	f7fe fd54 	bl	8000e38 <HAL_GetTick>
 8002390:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a2b      	ldr	r2, [pc, #172]	; (8002444 <ADC_Enable+0x104>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d004      	beq.n	80023a6 <ADC_Enable+0x66>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a29      	ldr	r2, [pc, #164]	; (8002448 <ADC_Enable+0x108>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <ADC_Enable+0x6a>
 80023a6:	4b29      	ldr	r3, [pc, #164]	; (800244c <ADC_Enable+0x10c>)
 80023a8:	e000      	b.n	80023ac <ADC_Enable+0x6c>
 80023aa:	4b29      	ldr	r3, [pc, #164]	; (8002450 <ADC_Enable+0x110>)
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe febb 	bl	8001128 <LL_ADC_GetMultimode>
 80023b2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a23      	ldr	r2, [pc, #140]	; (8002448 <ADC_Enable+0x108>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d002      	beq.n	80023c4 <ADC_Enable+0x84>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	e000      	b.n	80023c6 <ADC_Enable+0x86>
 80023c4:	4b1f      	ldr	r3, [pc, #124]	; (8002444 <ADC_Enable+0x104>)
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d02c      	beq.n	8002428 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d130      	bne.n	8002436 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023d4:	e028      	b.n	8002428 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe ff36 	bl	800124c <LL_ADC_IsEnabled>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d104      	bne.n	80023f0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe ff06 	bl	80011fc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023f0:	f7fe fd22 	bl	8000e38 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d914      	bls.n	8002428 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b01      	cmp	r3, #1
 800240a:	d00d      	beq.n	8002428 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002410:	f043 0210 	orr.w	r2, r3, #16
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241c:	f043 0201 	orr.w	r2, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e007      	b.n	8002438 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b01      	cmp	r3, #1
 8002434:	d1cf      	bne.n	80023d6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	8000003f 	.word	0x8000003f
 8002444:	40022000 	.word	0x40022000
 8002448:	40022100 	.word	0x40022100
 800244c:	40022300 	.word	0x40022300
 8002450:	58026300 	.word	0x58026300

08002454 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f7fe ff06 	bl	8001272 <LL_ADC_IsDisableOngoing>
 8002466:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe feed 	bl	800124c <LL_ADC_IsEnabled>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d047      	beq.n	8002508 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d144      	bne.n	8002508 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 030d 	and.w	r3, r3, #13
 8002488:	2b01      	cmp	r3, #1
 800248a:	d10c      	bne.n	80024a6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe fec7 	bl	8001224 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2203      	movs	r2, #3
 800249c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800249e:	f7fe fccb 	bl	8000e38 <HAL_GetTick>
 80024a2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80024a4:	e029      	b.n	80024fa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024aa:	f043 0210 	orr.w	r2, r3, #16
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b6:	f043 0201 	orr.w	r2, r3, #1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e023      	b.n	800250a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024c2:	f7fe fcb9 	bl	8000e38 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d914      	bls.n	80024fa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00d      	beq.n	80024fa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e2:	f043 0210 	orr.w	r2, r3, #16
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ee:	f043 0201 	orr.w	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e007      	b.n	800250a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1dc      	bne.n	80024c2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b084      	sub	sp, #16
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002524:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002528:	2b00      	cmp	r3, #0
 800252a:	d14b      	bne.n	80025c4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002530:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d021      	beq.n	800258a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe fd38 	bl	8000fc0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d032      	beq.n	80025bc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d12b      	bne.n	80025bc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002568:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002574:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d11f      	bne.n	80025bc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002580:	f043 0201 	orr.w	r2, r3, #1
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	655a      	str	r2, [r3, #84]	; 0x54
 8002588:	e018      	b.n	80025bc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	2b00      	cmp	r3, #0
 8002596:	d111      	bne.n	80025bc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b4:	f043 0201 	orr.w	r2, r3, #1
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f7fd fe8b 	bl	80002d8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80025c2:	e00e      	b.n	80025e2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c8:	f003 0310 	and.w	r3, r3, #16
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f7ff fb4f 	bl	8001c74 <HAL_ADC_ErrorCallback>
}
 80025d6:	e004      	b.n	80025e2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	4798      	blx	r3
}
 80025e2:	bf00      	nop
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b084      	sub	sp, #16
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f7ff fb27 	bl	8001c4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025fe:	bf00      	nop
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b084      	sub	sp, #16
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002612:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002618:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002624:	f043 0204 	orr.w	r2, r3, #4
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f7ff fb21 	bl	8001c74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002632:	bf00      	nop
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a7a      	ldr	r2, [pc, #488]	; (8002834 <ADC_ConfigureBoostMode+0x1f8>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d004      	beq.n	8002658 <ADC_ConfigureBoostMode+0x1c>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a79      	ldr	r2, [pc, #484]	; (8002838 <ADC_ConfigureBoostMode+0x1fc>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d109      	bne.n	800266c <ADC_ConfigureBoostMode+0x30>
 8002658:	4b78      	ldr	r3, [pc, #480]	; (800283c <ADC_ConfigureBoostMode+0x200>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002660:	2b00      	cmp	r3, #0
 8002662:	bf14      	ite	ne
 8002664:	2301      	movne	r3, #1
 8002666:	2300      	moveq	r3, #0
 8002668:	b2db      	uxtb	r3, r3
 800266a:	e008      	b.n	800267e <ADC_ConfigureBoostMode+0x42>
 800266c:	4b74      	ldr	r3, [pc, #464]	; (8002840 <ADC_ConfigureBoostMode+0x204>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002674:	2b00      	cmp	r3, #0
 8002676:	bf14      	ite	ne
 8002678:	2301      	movne	r3, #1
 800267a:	2300      	moveq	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d01c      	beq.n	80026bc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002682:	f003 fe89 	bl	8006398 <HAL_RCC_GetHCLKFreq>
 8002686:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002690:	d010      	beq.n	80026b4 <ADC_ConfigureBoostMode+0x78>
 8002692:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002696:	d873      	bhi.n	8002780 <ADC_ConfigureBoostMode+0x144>
 8002698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800269c:	d002      	beq.n	80026a4 <ADC_ConfigureBoostMode+0x68>
 800269e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026a2:	d16d      	bne.n	8002780 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	0c1b      	lsrs	r3, r3, #16
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b0:	60fb      	str	r3, [r7, #12]
        break;
 80026b2:	e068      	b.n	8002786 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	089b      	lsrs	r3, r3, #2
 80026b8:	60fb      	str	r3, [r7, #12]
        break;
 80026ba:	e064      	b.n	8002786 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80026bc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80026c0:	f04f 0100 	mov.w	r1, #0
 80026c4:	f005 f8b8 	bl	8007838 <HAL_RCCEx_GetPeriphCLKFreq>
 80026c8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80026d2:	d051      	beq.n	8002778 <ADC_ConfigureBoostMode+0x13c>
 80026d4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80026d8:	d854      	bhi.n	8002784 <ADC_ConfigureBoostMode+0x148>
 80026da:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80026de:	d047      	beq.n	8002770 <ADC_ConfigureBoostMode+0x134>
 80026e0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80026e4:	d84e      	bhi.n	8002784 <ADC_ConfigureBoostMode+0x148>
 80026e6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80026ea:	d03d      	beq.n	8002768 <ADC_ConfigureBoostMode+0x12c>
 80026ec:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80026f0:	d848      	bhi.n	8002784 <ADC_ConfigureBoostMode+0x148>
 80026f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026f6:	d033      	beq.n	8002760 <ADC_ConfigureBoostMode+0x124>
 80026f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026fc:	d842      	bhi.n	8002784 <ADC_ConfigureBoostMode+0x148>
 80026fe:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002702:	d029      	beq.n	8002758 <ADC_ConfigureBoostMode+0x11c>
 8002704:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002708:	d83c      	bhi.n	8002784 <ADC_ConfigureBoostMode+0x148>
 800270a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800270e:	d01a      	beq.n	8002746 <ADC_ConfigureBoostMode+0x10a>
 8002710:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002714:	d836      	bhi.n	8002784 <ADC_ConfigureBoostMode+0x148>
 8002716:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800271a:	d014      	beq.n	8002746 <ADC_ConfigureBoostMode+0x10a>
 800271c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002720:	d830      	bhi.n	8002784 <ADC_ConfigureBoostMode+0x148>
 8002722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002726:	d00e      	beq.n	8002746 <ADC_ConfigureBoostMode+0x10a>
 8002728:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800272c:	d82a      	bhi.n	8002784 <ADC_ConfigureBoostMode+0x148>
 800272e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002732:	d008      	beq.n	8002746 <ADC_ConfigureBoostMode+0x10a>
 8002734:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002738:	d824      	bhi.n	8002784 <ADC_ConfigureBoostMode+0x148>
 800273a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800273e:	d002      	beq.n	8002746 <ADC_ConfigureBoostMode+0x10a>
 8002740:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002744:	d11e      	bne.n	8002784 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	0c9b      	lsrs	r3, r3, #18
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	fbb2 f3f3 	udiv	r3, r2, r3
 8002754:	60fb      	str	r3, [r7, #12]
        break;
 8002756:	e016      	b.n	8002786 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	091b      	lsrs	r3, r3, #4
 800275c:	60fb      	str	r3, [r7, #12]
        break;
 800275e:	e012      	b.n	8002786 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	60fb      	str	r3, [r7, #12]
        break;
 8002766:	e00e      	b.n	8002786 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	099b      	lsrs	r3, r3, #6
 800276c:	60fb      	str	r3, [r7, #12]
        break;
 800276e:	e00a      	b.n	8002786 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	09db      	lsrs	r3, r3, #7
 8002774:	60fb      	str	r3, [r7, #12]
        break;
 8002776:	e006      	b.n	8002786 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	0a1b      	lsrs	r3, r3, #8
 800277c:	60fb      	str	r3, [r7, #12]
        break;
 800277e:	e002      	b.n	8002786 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002780:	bf00      	nop
 8002782:	e000      	b.n	8002786 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002784:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002786:	f7fe fb87 	bl	8000e98 <HAL_GetREVID>
 800278a:	4603      	mov	r3, r0
 800278c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002790:	4293      	cmp	r3, r2
 8002792:	d815      	bhi.n	80027c0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4a2b      	ldr	r2, [pc, #172]	; (8002844 <ADC_ConfigureBoostMode+0x208>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d908      	bls.n	80027ae <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027aa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80027ac:	e03e      	b.n	800282c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027bc:	609a      	str	r2, [r3, #8]
}
 80027be:	e035      	b.n	800282c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	085b      	lsrs	r3, r3, #1
 80027c4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4a1f      	ldr	r2, [pc, #124]	; (8002848 <ADC_ConfigureBoostMode+0x20c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d808      	bhi.n	80027e0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80027dc:	609a      	str	r2, [r3, #8]
}
 80027de:	e025      	b.n	800282c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4a1a      	ldr	r2, [pc, #104]	; (800284c <ADC_ConfigureBoostMode+0x210>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d80a      	bhi.n	80027fe <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027fa:	609a      	str	r2, [r3, #8]
}
 80027fc:	e016      	b.n	800282c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4a13      	ldr	r2, [pc, #76]	; (8002850 <ADC_ConfigureBoostMode+0x214>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d80a      	bhi.n	800281c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002818:	609a      	str	r2, [r3, #8]
}
 800281a:	e007      	b.n	800282c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800282a:	609a      	str	r2, [r3, #8]
}
 800282c:	bf00      	nop
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40022000 	.word	0x40022000
 8002838:	40022100 	.word	0x40022100
 800283c:	40022300 	.word	0x40022300
 8002840:	58026300 	.word	0x58026300
 8002844:	01312d00 	.word	0x01312d00
 8002848:	005f5e10 	.word	0x005f5e10
 800284c:	00bebc20 	.word	0x00bebc20
 8002850:	017d7840 	.word	0x017d7840

08002854 <LL_ADC_IsEnabled>:
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <LL_ADC_IsEnabled+0x18>
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <LL_ADC_IsEnabled+0x1a>
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <LL_ADC_StartCalibration>:
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <LL_ADC_StartCalibration+0x38>)
 800288e:	4013      	ands	r3, r2
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800289c:	430a      	orrs	r2, r1
 800289e:	4313      	orrs	r3, r2
 80028a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	609a      	str	r2, [r3, #8]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	3ffeffc0 	.word	0x3ffeffc0

080028b8 <LL_ADC_IsCalibrationOnGoing>:
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028cc:	d101      	bne.n	80028d2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <LL_ADC_REG_IsConversionOngoing>:
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d101      	bne.n	80028f8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
	...

08002908 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002914:	2300      	movs	r3, #0
 8002916:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <HAL_ADCEx_Calibration_Start+0x1e>
 8002922:	2302      	movs	r3, #2
 8002924:	e04c      	b.n	80029c0 <HAL_ADCEx_Calibration_Start+0xb8>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f7ff fd90 	bl	8002454 <ADC_Disable>
 8002934:	4603      	mov	r3, r0
 8002936:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002938:	7dfb      	ldrb	r3, [r7, #23]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d135      	bne.n	80029aa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002942:	4b21      	ldr	r3, [pc, #132]	; (80029c8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002944:	4013      	ands	r3, r2
 8002946:	f043 0202 	orr.w	r2, r3, #2
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	68b9      	ldr	r1, [r7, #8]
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff ff90 	bl	800287c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800295c:	e014      	b.n	8002988 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	3301      	adds	r3, #1
 8002962:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	4a19      	ldr	r2, [pc, #100]	; (80029cc <HAL_ADCEx_Calibration_Start+0xc4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d30d      	bcc.n	8002988 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002970:	f023 0312 	bic.w	r3, r3, #18
 8002974:	f043 0210 	orr.w	r2, r3, #16
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e01b      	b.n	80029c0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff ff93 	bl	80028b8 <LL_ADC_IsCalibrationOnGoing>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1e2      	bne.n	800295e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299c:	f023 0303 	bic.w	r3, r3, #3
 80029a0:	f043 0201 	orr.w	r2, r3, #1
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	655a      	str	r2, [r3, #84]	; 0x54
 80029a8:	e005      	b.n	80029b6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ae:	f043 0210 	orr.w	r2, r3, #16
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80029be:	7dfb      	ldrb	r3, [r7, #23]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	ffffeefd 	.word	0xffffeefd
 80029cc:	25c3f800 	.word	0x25c3f800

080029d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002a34:	b590      	push	{r4, r7, lr}
 8002a36:	b09f      	sub	sp, #124	; 0x7c
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e0be      	b.n	8002bd0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a5c      	ldr	r2, [pc, #368]	; (8002bd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d102      	bne.n	8002a72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a6c:	4b5b      	ldr	r3, [pc, #364]	; (8002bdc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a6e:	60bb      	str	r3, [r7, #8]
 8002a70:	e001      	b.n	8002a76 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002a72:	2300      	movs	r3, #0
 8002a74:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10b      	bne.n	8002a94 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a80:	f043 0220 	orr.w	r2, r3, #32
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e09d      	b.n	8002bd0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff ff22 	bl	80028e0 <LL_ADC_REG_IsConversionOngoing>
 8002a9c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff ff1c 	bl	80028e0 <LL_ADC_REG_IsConversionOngoing>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d17f      	bne.n	8002bae <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002aae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d17c      	bne.n	8002bae <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a47      	ldr	r2, [pc, #284]	; (8002bd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d004      	beq.n	8002ac8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a46      	ldr	r2, [pc, #280]	; (8002bdc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d101      	bne.n	8002acc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002ac8:	4b45      	ldr	r3, [pc, #276]	; (8002be0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002aca:	e000      	b.n	8002ace <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002acc:	4b45      	ldr	r3, [pc, #276]	; (8002be4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002ace:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d039      	beq.n	8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a3a      	ldr	r2, [pc, #232]	; (8002bd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d004      	beq.n	8002afe <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a38      	ldr	r2, [pc, #224]	; (8002bdc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d10e      	bne.n	8002b1c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002afe:	4836      	ldr	r0, [pc, #216]	; (8002bd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002b00:	f7ff fea8 	bl	8002854 <LL_ADC_IsEnabled>
 8002b04:	4604      	mov	r4, r0
 8002b06:	4835      	ldr	r0, [pc, #212]	; (8002bdc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002b08:	f7ff fea4 	bl	8002854 <LL_ADC_IsEnabled>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	4323      	orrs	r3, r4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	bf0c      	ite	eq
 8002b14:	2301      	moveq	r3, #1
 8002b16:	2300      	movne	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	e008      	b.n	8002b2e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002b1c:	4832      	ldr	r0, [pc, #200]	; (8002be8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002b1e:	f7ff fe99 	bl	8002854 <LL_ADC_IsEnabled>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	bf0c      	ite	eq
 8002b28:	2301      	moveq	r3, #1
 8002b2a:	2300      	movne	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d047      	beq.n	8002bc2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	4b2d      	ldr	r3, [pc, #180]	; (8002bec <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	6811      	ldr	r1, [r2, #0]
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	6892      	ldr	r2, [r2, #8]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	431a      	orrs	r2, r3
 8002b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b48:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b4a:	e03a      	b.n	8002bc2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b56:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a1e      	ldr	r2, [pc, #120]	; (8002bd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d004      	beq.n	8002b6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a1d      	ldr	r2, [pc, #116]	; (8002bdc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d10e      	bne.n	8002b8a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002b6c:	481a      	ldr	r0, [pc, #104]	; (8002bd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002b6e:	f7ff fe71 	bl	8002854 <LL_ADC_IsEnabled>
 8002b72:	4604      	mov	r4, r0
 8002b74:	4819      	ldr	r0, [pc, #100]	; (8002bdc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002b76:	f7ff fe6d 	bl	8002854 <LL_ADC_IsEnabled>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	4323      	orrs	r3, r4
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	bf0c      	ite	eq
 8002b82:	2301      	moveq	r3, #1
 8002b84:	2300      	movne	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	e008      	b.n	8002b9c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002b8a:	4817      	ldr	r0, [pc, #92]	; (8002be8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002b8c:	f7ff fe62 	bl	8002854 <LL_ADC_IsEnabled>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	bf0c      	ite	eq
 8002b96:	2301      	moveq	r3, #1
 8002b98:	2300      	movne	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d010      	beq.n	8002bc2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	4b11      	ldr	r3, [pc, #68]	; (8002bec <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002baa:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bac:	e009      	b.n	8002bc2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb2:	f043 0220 	orr.w	r2, r3, #32
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002bc0:	e000      	b.n	8002bc4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bc2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002bcc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	377c      	adds	r7, #124	; 0x7c
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd90      	pop	{r4, r7, pc}
 8002bd8:	40022000 	.word	0x40022000
 8002bdc:	40022100 	.word	0x40022100
 8002be0:	40022300 	.word	0x40022300
 8002be4:	58026300 	.word	0x58026300
 8002be8:	58026000 	.word	0x58026000
 8002bec:	fffff0e0 	.word	0xfffff0e0

08002bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c00:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <__NVIC_SetPriorityGrouping+0x40>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c18:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <__NVIC_SetPriorityGrouping+0x44>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c1e:	4a04      	ldr	r2, [pc, #16]	; (8002c30 <__NVIC_SetPriorityGrouping+0x40>)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	60d3      	str	r3, [r2, #12]
}
 8002c24:	bf00      	nop
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000ed00 	.word	0xe000ed00
 8002c34:	05fa0000 	.word	0x05fa0000

08002c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c3c:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <__NVIC_GetPriorityGrouping+0x18>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	0a1b      	lsrs	r3, r3, #8
 8002c42:	f003 0307 	and.w	r3, r3, #7
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	db0b      	blt.n	8002c7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c66:	88fb      	ldrh	r3, [r7, #6]
 8002c68:	f003 021f 	and.w	r2, r3, #31
 8002c6c:	4907      	ldr	r1, [pc, #28]	; (8002c8c <__NVIC_EnableIRQ+0x38>)
 8002c6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	2001      	movs	r0, #1
 8002c76:	fa00 f202 	lsl.w	r2, r0, r2
 8002c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	e000e100 	.word	0xe000e100

08002c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	6039      	str	r1, [r7, #0]
 8002c9a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	db0a      	blt.n	8002cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	490c      	ldr	r1, [pc, #48]	; (8002cdc <__NVIC_SetPriority+0x4c>)
 8002caa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cae:	0112      	lsls	r2, r2, #4
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cb8:	e00a      	b.n	8002cd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	4908      	ldr	r1, [pc, #32]	; (8002ce0 <__NVIC_SetPriority+0x50>)
 8002cc0:	88fb      	ldrh	r3, [r7, #6]
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	3b04      	subs	r3, #4
 8002cc8:	0112      	lsls	r2, r2, #4
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	440b      	add	r3, r1
 8002cce:	761a      	strb	r2, [r3, #24]
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	e000e100 	.word	0xe000e100
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b089      	sub	sp, #36	; 0x24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f1c3 0307 	rsb	r3, r3, #7
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	bf28      	it	cs
 8002d02:	2304      	movcs	r3, #4
 8002d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	2b06      	cmp	r3, #6
 8002d0c:	d902      	bls.n	8002d14 <NVIC_EncodePriority+0x30>
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3b03      	subs	r3, #3
 8002d12:	e000      	b.n	8002d16 <NVIC_EncodePriority+0x32>
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43da      	mvns	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	401a      	ands	r2, r3
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	fa01 f303 	lsl.w	r3, r1, r3
 8002d36:	43d9      	mvns	r1, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d3c:	4313      	orrs	r3, r2
         );
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3724      	adds	r7, #36	; 0x24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
	...

08002d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d5c:	d301      	bcc.n	8002d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e00f      	b.n	8002d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d62:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <SysTick_Config+0x40>)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d6a:	210f      	movs	r1, #15
 8002d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d70:	f7ff ff8e 	bl	8002c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d74:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <SysTick_Config+0x40>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d7a:	4b04      	ldr	r3, [pc, #16]	; (8002d8c <SysTick_Config+0x40>)
 8002d7c:	2207      	movs	r2, #7
 8002d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	e000e010 	.word	0xe000e010

08002d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff ff29 	bl	8002bf0 <__NVIC_SetPriorityGrouping>
}
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b086      	sub	sp, #24
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	4603      	mov	r3, r0
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	607a      	str	r2, [r7, #4]
 8002db2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002db4:	f7ff ff40 	bl	8002c38 <__NVIC_GetPriorityGrouping>
 8002db8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68b9      	ldr	r1, [r7, #8]
 8002dbe:	6978      	ldr	r0, [r7, #20]
 8002dc0:	f7ff ff90 	bl	8002ce4 <NVIC_EncodePriority>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002dca:	4611      	mov	r1, r2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ff5f 	bl	8002c90 <__NVIC_SetPriority>
}
 8002dd2:	bf00      	nop
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b082      	sub	sp, #8
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	4603      	mov	r3, r0
 8002de2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002de4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff ff33 	bl	8002c54 <__NVIC_EnableIRQ>
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff ffa4 	bl	8002d4c <SysTick_Config>
 8002e04:	4603      	mov	r3, r0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8002e14:	f3bf 8f5f 	dmb	sy
}
 8002e18:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002e1a:	4b07      	ldr	r3, [pc, #28]	; (8002e38 <HAL_MPU_Disable+0x28>)
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	4a06      	ldr	r2, [pc, #24]	; (8002e38 <HAL_MPU_Disable+0x28>)
 8002e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e24:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002e26:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <HAL_MPU_Disable+0x2c>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	605a      	str	r2, [r3, #4]
}
 8002e2c:	bf00      	nop
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	e000ed00 	.word	0xe000ed00
 8002e3c:	e000ed90 	.word	0xe000ed90

08002e40 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002e48:	4a0b      	ldr	r2, [pc, #44]	; (8002e78 <HAL_MPU_Enable+0x38>)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002e52:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <HAL_MPU_Enable+0x3c>)
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	4a09      	ldr	r2, [pc, #36]	; (8002e7c <HAL_MPU_Enable+0x3c>)
 8002e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e5c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002e5e:	f3bf 8f4f 	dsb	sy
}
 8002e62:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e64:	f3bf 8f6f 	isb	sy
}
 8002e68:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	e000ed90 	.word	0xe000ed90
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	785a      	ldrb	r2, [r3, #1]
 8002e8c:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <HAL_MPU_ConfigRegion+0x7c>)
 8002e8e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002e90:	4b1a      	ldr	r3, [pc, #104]	; (8002efc <HAL_MPU_ConfigRegion+0x7c>)
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	4a19      	ldr	r2, [pc, #100]	; (8002efc <HAL_MPU_ConfigRegion+0x7c>)
 8002e96:	f023 0301 	bic.w	r3, r3, #1
 8002e9a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002e9c:	4a17      	ldr	r2, [pc, #92]	; (8002efc <HAL_MPU_ConfigRegion+0x7c>)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	7b1b      	ldrb	r3, [r3, #12]
 8002ea8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	7adb      	ldrb	r3, [r3, #11]
 8002eae:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002eb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	7a9b      	ldrb	r3, [r3, #10]
 8002eb6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002eb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	7b5b      	ldrb	r3, [r3, #13]
 8002ebe:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002ec0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	7b9b      	ldrb	r3, [r3, #14]
 8002ec6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002ec8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	7bdb      	ldrb	r3, [r3, #15]
 8002ece:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002ed0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	7a5b      	ldrb	r3, [r3, #9]
 8002ed6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002ed8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	7a1b      	ldrb	r3, [r3, #8]
 8002ede:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002ee0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	7812      	ldrb	r2, [r2, #0]
 8002ee6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ee8:	4a04      	ldr	r2, [pc, #16]	; (8002efc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002eea:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002eec:	6113      	str	r3, [r2, #16]
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	e000ed90 	.word	0xe000ed90

08002f00 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002f08:	f7fd ff96 	bl	8000e38 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e316      	b.n	8003546 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a66      	ldr	r2, [pc, #408]	; (80030b8 <HAL_DMA_Init+0x1b8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d04a      	beq.n	8002fb8 <HAL_DMA_Init+0xb8>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a65      	ldr	r2, [pc, #404]	; (80030bc <HAL_DMA_Init+0x1bc>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d045      	beq.n	8002fb8 <HAL_DMA_Init+0xb8>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a63      	ldr	r2, [pc, #396]	; (80030c0 <HAL_DMA_Init+0x1c0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d040      	beq.n	8002fb8 <HAL_DMA_Init+0xb8>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a62      	ldr	r2, [pc, #392]	; (80030c4 <HAL_DMA_Init+0x1c4>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d03b      	beq.n	8002fb8 <HAL_DMA_Init+0xb8>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a60      	ldr	r2, [pc, #384]	; (80030c8 <HAL_DMA_Init+0x1c8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d036      	beq.n	8002fb8 <HAL_DMA_Init+0xb8>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a5f      	ldr	r2, [pc, #380]	; (80030cc <HAL_DMA_Init+0x1cc>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d031      	beq.n	8002fb8 <HAL_DMA_Init+0xb8>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a5d      	ldr	r2, [pc, #372]	; (80030d0 <HAL_DMA_Init+0x1d0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d02c      	beq.n	8002fb8 <HAL_DMA_Init+0xb8>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a5c      	ldr	r2, [pc, #368]	; (80030d4 <HAL_DMA_Init+0x1d4>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d027      	beq.n	8002fb8 <HAL_DMA_Init+0xb8>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a5a      	ldr	r2, [pc, #360]	; (80030d8 <HAL_DMA_Init+0x1d8>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d022      	beq.n	8002fb8 <HAL_DMA_Init+0xb8>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a59      	ldr	r2, [pc, #356]	; (80030dc <HAL_DMA_Init+0x1dc>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d01d      	beq.n	8002fb8 <HAL_DMA_Init+0xb8>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a57      	ldr	r2, [pc, #348]	; (80030e0 <HAL_DMA_Init+0x1e0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d018      	beq.n	8002fb8 <HAL_DMA_Init+0xb8>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a56      	ldr	r2, [pc, #344]	; (80030e4 <HAL_DMA_Init+0x1e4>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d013      	beq.n	8002fb8 <HAL_DMA_Init+0xb8>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a54      	ldr	r2, [pc, #336]	; (80030e8 <HAL_DMA_Init+0x1e8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00e      	beq.n	8002fb8 <HAL_DMA_Init+0xb8>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a53      	ldr	r2, [pc, #332]	; (80030ec <HAL_DMA_Init+0x1ec>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d009      	beq.n	8002fb8 <HAL_DMA_Init+0xb8>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a51      	ldr	r2, [pc, #324]	; (80030f0 <HAL_DMA_Init+0x1f0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d004      	beq.n	8002fb8 <HAL_DMA_Init+0xb8>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a50      	ldr	r2, [pc, #320]	; (80030f4 <HAL_DMA_Init+0x1f4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d101      	bne.n	8002fbc <HAL_DMA_Init+0xbc>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <HAL_DMA_Init+0xbe>
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 813b 	beq.w	800323a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a37      	ldr	r2, [pc, #220]	; (80030b8 <HAL_DMA_Init+0x1b8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d04a      	beq.n	8003074 <HAL_DMA_Init+0x174>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a36      	ldr	r2, [pc, #216]	; (80030bc <HAL_DMA_Init+0x1bc>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d045      	beq.n	8003074 <HAL_DMA_Init+0x174>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a34      	ldr	r2, [pc, #208]	; (80030c0 <HAL_DMA_Init+0x1c0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d040      	beq.n	8003074 <HAL_DMA_Init+0x174>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a33      	ldr	r2, [pc, #204]	; (80030c4 <HAL_DMA_Init+0x1c4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d03b      	beq.n	8003074 <HAL_DMA_Init+0x174>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a31      	ldr	r2, [pc, #196]	; (80030c8 <HAL_DMA_Init+0x1c8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d036      	beq.n	8003074 <HAL_DMA_Init+0x174>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a30      	ldr	r2, [pc, #192]	; (80030cc <HAL_DMA_Init+0x1cc>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d031      	beq.n	8003074 <HAL_DMA_Init+0x174>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a2e      	ldr	r2, [pc, #184]	; (80030d0 <HAL_DMA_Init+0x1d0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d02c      	beq.n	8003074 <HAL_DMA_Init+0x174>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a2d      	ldr	r2, [pc, #180]	; (80030d4 <HAL_DMA_Init+0x1d4>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d027      	beq.n	8003074 <HAL_DMA_Init+0x174>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a2b      	ldr	r2, [pc, #172]	; (80030d8 <HAL_DMA_Init+0x1d8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d022      	beq.n	8003074 <HAL_DMA_Init+0x174>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a2a      	ldr	r2, [pc, #168]	; (80030dc <HAL_DMA_Init+0x1dc>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d01d      	beq.n	8003074 <HAL_DMA_Init+0x174>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a28      	ldr	r2, [pc, #160]	; (80030e0 <HAL_DMA_Init+0x1e0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d018      	beq.n	8003074 <HAL_DMA_Init+0x174>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a27      	ldr	r2, [pc, #156]	; (80030e4 <HAL_DMA_Init+0x1e4>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d013      	beq.n	8003074 <HAL_DMA_Init+0x174>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a25      	ldr	r2, [pc, #148]	; (80030e8 <HAL_DMA_Init+0x1e8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d00e      	beq.n	8003074 <HAL_DMA_Init+0x174>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a24      	ldr	r2, [pc, #144]	; (80030ec <HAL_DMA_Init+0x1ec>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d009      	beq.n	8003074 <HAL_DMA_Init+0x174>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a22      	ldr	r2, [pc, #136]	; (80030f0 <HAL_DMA_Init+0x1f0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d004      	beq.n	8003074 <HAL_DMA_Init+0x174>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a21      	ldr	r2, [pc, #132]	; (80030f4 <HAL_DMA_Init+0x1f4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d108      	bne.n	8003086 <HAL_DMA_Init+0x186>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0201 	bic.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	e007      	b.n	8003096 <HAL_DMA_Init+0x196>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0201 	bic.w	r2, r2, #1
 8003094:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003096:	e02f      	b.n	80030f8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003098:	f7fd fece 	bl	8000e38 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b05      	cmp	r3, #5
 80030a4:	d928      	bls.n	80030f8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2220      	movs	r2, #32
 80030aa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2203      	movs	r2, #3
 80030b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e246      	b.n	8003546 <HAL_DMA_Init+0x646>
 80030b8:	40020010 	.word	0x40020010
 80030bc:	40020028 	.word	0x40020028
 80030c0:	40020040 	.word	0x40020040
 80030c4:	40020058 	.word	0x40020058
 80030c8:	40020070 	.word	0x40020070
 80030cc:	40020088 	.word	0x40020088
 80030d0:	400200a0 	.word	0x400200a0
 80030d4:	400200b8 	.word	0x400200b8
 80030d8:	40020410 	.word	0x40020410
 80030dc:	40020428 	.word	0x40020428
 80030e0:	40020440 	.word	0x40020440
 80030e4:	40020458 	.word	0x40020458
 80030e8:	40020470 	.word	0x40020470
 80030ec:	40020488 	.word	0x40020488
 80030f0:	400204a0 	.word	0x400204a0
 80030f4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1c8      	bne.n	8003098 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4b83      	ldr	r3, [pc, #524]	; (8003320 <HAL_DMA_Init+0x420>)
 8003112:	4013      	ands	r3, r2
 8003114:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800311e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800312a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003136:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	4313      	orrs	r3, r2
 8003142:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	2b04      	cmp	r3, #4
 800314a:	d107      	bne.n	800315c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003154:	4313      	orrs	r3, r2
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	4313      	orrs	r3, r2
 800315a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800315c:	4b71      	ldr	r3, [pc, #452]	; (8003324 <HAL_DMA_Init+0x424>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4b71      	ldr	r3, [pc, #452]	; (8003328 <HAL_DMA_Init+0x428>)
 8003162:	4013      	ands	r3, r2
 8003164:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003168:	d328      	bcc.n	80031bc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b28      	cmp	r3, #40	; 0x28
 8003170:	d903      	bls.n	800317a <HAL_DMA_Init+0x27a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b2e      	cmp	r3, #46	; 0x2e
 8003178:	d917      	bls.n	80031aa <HAL_DMA_Init+0x2aa>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2b3e      	cmp	r3, #62	; 0x3e
 8003180:	d903      	bls.n	800318a <HAL_DMA_Init+0x28a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b42      	cmp	r3, #66	; 0x42
 8003188:	d90f      	bls.n	80031aa <HAL_DMA_Init+0x2aa>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b46      	cmp	r3, #70	; 0x46
 8003190:	d903      	bls.n	800319a <HAL_DMA_Init+0x29a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b48      	cmp	r3, #72	; 0x48
 8003198:	d907      	bls.n	80031aa <HAL_DMA_Init+0x2aa>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b4e      	cmp	r3, #78	; 0x4e
 80031a0:	d905      	bls.n	80031ae <HAL_DMA_Init+0x2ae>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b52      	cmp	r3, #82	; 0x52
 80031a8:	d801      	bhi.n	80031ae <HAL_DMA_Init+0x2ae>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <HAL_DMA_Init+0x2b0>
 80031ae:	2300      	movs	r3, #0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031ba:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f023 0307 	bic.w	r3, r3, #7
 80031d2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	4313      	orrs	r3, r2
 80031dc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d117      	bne.n	8003216 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00e      	beq.n	8003216 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f001 fdcf 	bl	8004d9c <DMA_CheckFifoParam>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2240      	movs	r2, #64	; 0x40
 8003208:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e197      	b.n	8003546 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f001 fd0a 	bl	8004c38 <DMA_CalcBaseAndBitshift>
 8003224:	4603      	mov	r3, r0
 8003226:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	223f      	movs	r2, #63	; 0x3f
 8003232:	409a      	lsls	r2, r3
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	e0cd      	b.n	80033d6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a3b      	ldr	r2, [pc, #236]	; (800332c <HAL_DMA_Init+0x42c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d022      	beq.n	800328a <HAL_DMA_Init+0x38a>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a39      	ldr	r2, [pc, #228]	; (8003330 <HAL_DMA_Init+0x430>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d01d      	beq.n	800328a <HAL_DMA_Init+0x38a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a38      	ldr	r2, [pc, #224]	; (8003334 <HAL_DMA_Init+0x434>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d018      	beq.n	800328a <HAL_DMA_Init+0x38a>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a36      	ldr	r2, [pc, #216]	; (8003338 <HAL_DMA_Init+0x438>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d013      	beq.n	800328a <HAL_DMA_Init+0x38a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a35      	ldr	r2, [pc, #212]	; (800333c <HAL_DMA_Init+0x43c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d00e      	beq.n	800328a <HAL_DMA_Init+0x38a>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a33      	ldr	r2, [pc, #204]	; (8003340 <HAL_DMA_Init+0x440>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d009      	beq.n	800328a <HAL_DMA_Init+0x38a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a32      	ldr	r2, [pc, #200]	; (8003344 <HAL_DMA_Init+0x444>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d004      	beq.n	800328a <HAL_DMA_Init+0x38a>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a30      	ldr	r2, [pc, #192]	; (8003348 <HAL_DMA_Init+0x448>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d101      	bne.n	800328e <HAL_DMA_Init+0x38e>
 800328a:	2301      	movs	r3, #1
 800328c:	e000      	b.n	8003290 <HAL_DMA_Init+0x390>
 800328e:	2300      	movs	r3, #0
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 8097 	beq.w	80033c4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a24      	ldr	r2, [pc, #144]	; (800332c <HAL_DMA_Init+0x42c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d021      	beq.n	80032e4 <HAL_DMA_Init+0x3e4>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a22      	ldr	r2, [pc, #136]	; (8003330 <HAL_DMA_Init+0x430>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d01c      	beq.n	80032e4 <HAL_DMA_Init+0x3e4>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a21      	ldr	r2, [pc, #132]	; (8003334 <HAL_DMA_Init+0x434>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d017      	beq.n	80032e4 <HAL_DMA_Init+0x3e4>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a1f      	ldr	r2, [pc, #124]	; (8003338 <HAL_DMA_Init+0x438>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d012      	beq.n	80032e4 <HAL_DMA_Init+0x3e4>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a1e      	ldr	r2, [pc, #120]	; (800333c <HAL_DMA_Init+0x43c>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d00d      	beq.n	80032e4 <HAL_DMA_Init+0x3e4>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a1c      	ldr	r2, [pc, #112]	; (8003340 <HAL_DMA_Init+0x440>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d008      	beq.n	80032e4 <HAL_DMA_Init+0x3e4>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a1b      	ldr	r2, [pc, #108]	; (8003344 <HAL_DMA_Init+0x444>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d003      	beq.n	80032e4 <HAL_DMA_Init+0x3e4>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a19      	ldr	r2, [pc, #100]	; (8003348 <HAL_DMA_Init+0x448>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2202      	movs	r2, #2
 80032ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4b12      	ldr	r3, [pc, #72]	; (800334c <HAL_DMA_Init+0x44c>)
 8003302:	4013      	ands	r3, r2
 8003304:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	2b40      	cmp	r3, #64	; 0x40
 800330c:	d020      	beq.n	8003350 <HAL_DMA_Init+0x450>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b80      	cmp	r3, #128	; 0x80
 8003314:	d102      	bne.n	800331c <HAL_DMA_Init+0x41c>
 8003316:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800331a:	e01a      	b.n	8003352 <HAL_DMA_Init+0x452>
 800331c:	2300      	movs	r3, #0
 800331e:	e018      	b.n	8003352 <HAL_DMA_Init+0x452>
 8003320:	fe10803f 	.word	0xfe10803f
 8003324:	5c001000 	.word	0x5c001000
 8003328:	ffff0000 	.word	0xffff0000
 800332c:	58025408 	.word	0x58025408
 8003330:	5802541c 	.word	0x5802541c
 8003334:	58025430 	.word	0x58025430
 8003338:	58025444 	.word	0x58025444
 800333c:	58025458 	.word	0x58025458
 8003340:	5802546c 	.word	0x5802546c
 8003344:	58025480 	.word	0x58025480
 8003348:	58025494 	.word	0x58025494
 800334c:	fffe000f 	.word	0xfffe000f
 8003350:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	68d2      	ldr	r2, [r2, #12]
 8003356:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003358:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003360:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003368:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003370:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003378:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003380:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	4313      	orrs	r3, r2
 8003386:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	4b6e      	ldr	r3, [pc, #440]	; (8003550 <HAL_DMA_Init+0x650>)
 8003398:	4413      	add	r3, r2
 800339a:	4a6e      	ldr	r2, [pc, #440]	; (8003554 <HAL_DMA_Init+0x654>)
 800339c:	fba2 2303 	umull	r2, r3, r2, r3
 80033a0:	091b      	lsrs	r3, r3, #4
 80033a2:	009a      	lsls	r2, r3, #2
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f001 fc45 	bl	8004c38 <DMA_CalcBaseAndBitshift>
 80033ae:	4603      	mov	r3, r0
 80033b0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	2201      	movs	r2, #1
 80033bc:	409a      	lsls	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	605a      	str	r2, [r3, #4]
 80033c2:	e008      	b.n	80033d6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2240      	movs	r2, #64	; 0x40
 80033c8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2203      	movs	r2, #3
 80033ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e0b7      	b.n	8003546 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a5f      	ldr	r2, [pc, #380]	; (8003558 <HAL_DMA_Init+0x658>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d072      	beq.n	80034c6 <HAL_DMA_Init+0x5c6>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a5d      	ldr	r2, [pc, #372]	; (800355c <HAL_DMA_Init+0x65c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d06d      	beq.n	80034c6 <HAL_DMA_Init+0x5c6>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a5c      	ldr	r2, [pc, #368]	; (8003560 <HAL_DMA_Init+0x660>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d068      	beq.n	80034c6 <HAL_DMA_Init+0x5c6>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a5a      	ldr	r2, [pc, #360]	; (8003564 <HAL_DMA_Init+0x664>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d063      	beq.n	80034c6 <HAL_DMA_Init+0x5c6>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a59      	ldr	r2, [pc, #356]	; (8003568 <HAL_DMA_Init+0x668>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d05e      	beq.n	80034c6 <HAL_DMA_Init+0x5c6>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a57      	ldr	r2, [pc, #348]	; (800356c <HAL_DMA_Init+0x66c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d059      	beq.n	80034c6 <HAL_DMA_Init+0x5c6>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a56      	ldr	r2, [pc, #344]	; (8003570 <HAL_DMA_Init+0x670>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d054      	beq.n	80034c6 <HAL_DMA_Init+0x5c6>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a54      	ldr	r2, [pc, #336]	; (8003574 <HAL_DMA_Init+0x674>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d04f      	beq.n	80034c6 <HAL_DMA_Init+0x5c6>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a53      	ldr	r2, [pc, #332]	; (8003578 <HAL_DMA_Init+0x678>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d04a      	beq.n	80034c6 <HAL_DMA_Init+0x5c6>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a51      	ldr	r2, [pc, #324]	; (800357c <HAL_DMA_Init+0x67c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d045      	beq.n	80034c6 <HAL_DMA_Init+0x5c6>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a50      	ldr	r2, [pc, #320]	; (8003580 <HAL_DMA_Init+0x680>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d040      	beq.n	80034c6 <HAL_DMA_Init+0x5c6>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a4e      	ldr	r2, [pc, #312]	; (8003584 <HAL_DMA_Init+0x684>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d03b      	beq.n	80034c6 <HAL_DMA_Init+0x5c6>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a4d      	ldr	r2, [pc, #308]	; (8003588 <HAL_DMA_Init+0x688>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d036      	beq.n	80034c6 <HAL_DMA_Init+0x5c6>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a4b      	ldr	r2, [pc, #300]	; (800358c <HAL_DMA_Init+0x68c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d031      	beq.n	80034c6 <HAL_DMA_Init+0x5c6>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a4a      	ldr	r2, [pc, #296]	; (8003590 <HAL_DMA_Init+0x690>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d02c      	beq.n	80034c6 <HAL_DMA_Init+0x5c6>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a48      	ldr	r2, [pc, #288]	; (8003594 <HAL_DMA_Init+0x694>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d027      	beq.n	80034c6 <HAL_DMA_Init+0x5c6>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a47      	ldr	r2, [pc, #284]	; (8003598 <HAL_DMA_Init+0x698>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d022      	beq.n	80034c6 <HAL_DMA_Init+0x5c6>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a45      	ldr	r2, [pc, #276]	; (800359c <HAL_DMA_Init+0x69c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d01d      	beq.n	80034c6 <HAL_DMA_Init+0x5c6>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a44      	ldr	r2, [pc, #272]	; (80035a0 <HAL_DMA_Init+0x6a0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d018      	beq.n	80034c6 <HAL_DMA_Init+0x5c6>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a42      	ldr	r2, [pc, #264]	; (80035a4 <HAL_DMA_Init+0x6a4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d013      	beq.n	80034c6 <HAL_DMA_Init+0x5c6>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a41      	ldr	r2, [pc, #260]	; (80035a8 <HAL_DMA_Init+0x6a8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d00e      	beq.n	80034c6 <HAL_DMA_Init+0x5c6>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a3f      	ldr	r2, [pc, #252]	; (80035ac <HAL_DMA_Init+0x6ac>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d009      	beq.n	80034c6 <HAL_DMA_Init+0x5c6>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a3e      	ldr	r2, [pc, #248]	; (80035b0 <HAL_DMA_Init+0x6b0>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d004      	beq.n	80034c6 <HAL_DMA_Init+0x5c6>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a3c      	ldr	r2, [pc, #240]	; (80035b4 <HAL_DMA_Init+0x6b4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d101      	bne.n	80034ca <HAL_DMA_Init+0x5ca>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <HAL_DMA_Init+0x5cc>
 80034ca:	2300      	movs	r3, #0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d032      	beq.n	8003536 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f001 fcdf 	bl	8004e94 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	2b80      	cmp	r3, #128	; 0x80
 80034dc:	d102      	bne.n	80034e4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80034f8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d010      	beq.n	8003524 <HAL_DMA_Init+0x624>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b08      	cmp	r3, #8
 8003508:	d80c      	bhi.n	8003524 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f001 fd5c 	bl	8004fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	e008      	b.n	8003536 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3718      	adds	r7, #24
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	a7fdabf8 	.word	0xa7fdabf8
 8003554:	cccccccd 	.word	0xcccccccd
 8003558:	40020010 	.word	0x40020010
 800355c:	40020028 	.word	0x40020028
 8003560:	40020040 	.word	0x40020040
 8003564:	40020058 	.word	0x40020058
 8003568:	40020070 	.word	0x40020070
 800356c:	40020088 	.word	0x40020088
 8003570:	400200a0 	.word	0x400200a0
 8003574:	400200b8 	.word	0x400200b8
 8003578:	40020410 	.word	0x40020410
 800357c:	40020428 	.word	0x40020428
 8003580:	40020440 	.word	0x40020440
 8003584:	40020458 	.word	0x40020458
 8003588:	40020470 	.word	0x40020470
 800358c:	40020488 	.word	0x40020488
 8003590:	400204a0 	.word	0x400204a0
 8003594:	400204b8 	.word	0x400204b8
 8003598:	58025408 	.word	0x58025408
 800359c:	5802541c 	.word	0x5802541c
 80035a0:	58025430 	.word	0x58025430
 80035a4:	58025444 	.word	0x58025444
 80035a8:	58025458 	.word	0x58025458
 80035ac:	5802546c 	.word	0x5802546c
 80035b0:	58025480 	.word	0x58025480
 80035b4:	58025494 	.word	0x58025494

080035b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e226      	b.n	8003a22 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d101      	bne.n	80035e2 <HAL_DMA_Start_IT+0x2a>
 80035de:	2302      	movs	r3, #2
 80035e0:	e21f      	b.n	8003a22 <HAL_DMA_Start_IT+0x46a>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	f040 820a 	bne.w	8003a0c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a68      	ldr	r2, [pc, #416]	; (80037ac <HAL_DMA_Start_IT+0x1f4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d04a      	beq.n	80036a6 <HAL_DMA_Start_IT+0xee>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a66      	ldr	r2, [pc, #408]	; (80037b0 <HAL_DMA_Start_IT+0x1f8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d045      	beq.n	80036a6 <HAL_DMA_Start_IT+0xee>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a65      	ldr	r2, [pc, #404]	; (80037b4 <HAL_DMA_Start_IT+0x1fc>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d040      	beq.n	80036a6 <HAL_DMA_Start_IT+0xee>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a63      	ldr	r2, [pc, #396]	; (80037b8 <HAL_DMA_Start_IT+0x200>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d03b      	beq.n	80036a6 <HAL_DMA_Start_IT+0xee>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a62      	ldr	r2, [pc, #392]	; (80037bc <HAL_DMA_Start_IT+0x204>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d036      	beq.n	80036a6 <HAL_DMA_Start_IT+0xee>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a60      	ldr	r2, [pc, #384]	; (80037c0 <HAL_DMA_Start_IT+0x208>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d031      	beq.n	80036a6 <HAL_DMA_Start_IT+0xee>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a5f      	ldr	r2, [pc, #380]	; (80037c4 <HAL_DMA_Start_IT+0x20c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d02c      	beq.n	80036a6 <HAL_DMA_Start_IT+0xee>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a5d      	ldr	r2, [pc, #372]	; (80037c8 <HAL_DMA_Start_IT+0x210>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d027      	beq.n	80036a6 <HAL_DMA_Start_IT+0xee>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a5c      	ldr	r2, [pc, #368]	; (80037cc <HAL_DMA_Start_IT+0x214>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d022      	beq.n	80036a6 <HAL_DMA_Start_IT+0xee>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a5a      	ldr	r2, [pc, #360]	; (80037d0 <HAL_DMA_Start_IT+0x218>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d01d      	beq.n	80036a6 <HAL_DMA_Start_IT+0xee>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a59      	ldr	r2, [pc, #356]	; (80037d4 <HAL_DMA_Start_IT+0x21c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d018      	beq.n	80036a6 <HAL_DMA_Start_IT+0xee>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a57      	ldr	r2, [pc, #348]	; (80037d8 <HAL_DMA_Start_IT+0x220>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d013      	beq.n	80036a6 <HAL_DMA_Start_IT+0xee>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a56      	ldr	r2, [pc, #344]	; (80037dc <HAL_DMA_Start_IT+0x224>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00e      	beq.n	80036a6 <HAL_DMA_Start_IT+0xee>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a54      	ldr	r2, [pc, #336]	; (80037e0 <HAL_DMA_Start_IT+0x228>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d009      	beq.n	80036a6 <HAL_DMA_Start_IT+0xee>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a53      	ldr	r2, [pc, #332]	; (80037e4 <HAL_DMA_Start_IT+0x22c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d004      	beq.n	80036a6 <HAL_DMA_Start_IT+0xee>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a51      	ldr	r2, [pc, #324]	; (80037e8 <HAL_DMA_Start_IT+0x230>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d108      	bne.n	80036b8 <HAL_DMA_Start_IT+0x100>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0201 	bic.w	r2, r2, #1
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	e007      	b.n	80036c8 <HAL_DMA_Start_IT+0x110>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0201 	bic.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	68b9      	ldr	r1, [r7, #8]
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f001 f906 	bl	80048e0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a34      	ldr	r2, [pc, #208]	; (80037ac <HAL_DMA_Start_IT+0x1f4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d04a      	beq.n	8003774 <HAL_DMA_Start_IT+0x1bc>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a33      	ldr	r2, [pc, #204]	; (80037b0 <HAL_DMA_Start_IT+0x1f8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d045      	beq.n	8003774 <HAL_DMA_Start_IT+0x1bc>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a31      	ldr	r2, [pc, #196]	; (80037b4 <HAL_DMA_Start_IT+0x1fc>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d040      	beq.n	8003774 <HAL_DMA_Start_IT+0x1bc>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a30      	ldr	r2, [pc, #192]	; (80037b8 <HAL_DMA_Start_IT+0x200>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d03b      	beq.n	8003774 <HAL_DMA_Start_IT+0x1bc>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a2e      	ldr	r2, [pc, #184]	; (80037bc <HAL_DMA_Start_IT+0x204>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d036      	beq.n	8003774 <HAL_DMA_Start_IT+0x1bc>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a2d      	ldr	r2, [pc, #180]	; (80037c0 <HAL_DMA_Start_IT+0x208>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d031      	beq.n	8003774 <HAL_DMA_Start_IT+0x1bc>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a2b      	ldr	r2, [pc, #172]	; (80037c4 <HAL_DMA_Start_IT+0x20c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d02c      	beq.n	8003774 <HAL_DMA_Start_IT+0x1bc>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a2a      	ldr	r2, [pc, #168]	; (80037c8 <HAL_DMA_Start_IT+0x210>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d027      	beq.n	8003774 <HAL_DMA_Start_IT+0x1bc>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a28      	ldr	r2, [pc, #160]	; (80037cc <HAL_DMA_Start_IT+0x214>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d022      	beq.n	8003774 <HAL_DMA_Start_IT+0x1bc>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a27      	ldr	r2, [pc, #156]	; (80037d0 <HAL_DMA_Start_IT+0x218>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d01d      	beq.n	8003774 <HAL_DMA_Start_IT+0x1bc>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a25      	ldr	r2, [pc, #148]	; (80037d4 <HAL_DMA_Start_IT+0x21c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d018      	beq.n	8003774 <HAL_DMA_Start_IT+0x1bc>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a24      	ldr	r2, [pc, #144]	; (80037d8 <HAL_DMA_Start_IT+0x220>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d013      	beq.n	8003774 <HAL_DMA_Start_IT+0x1bc>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a22      	ldr	r2, [pc, #136]	; (80037dc <HAL_DMA_Start_IT+0x224>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00e      	beq.n	8003774 <HAL_DMA_Start_IT+0x1bc>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a21      	ldr	r2, [pc, #132]	; (80037e0 <HAL_DMA_Start_IT+0x228>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d009      	beq.n	8003774 <HAL_DMA_Start_IT+0x1bc>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a1f      	ldr	r2, [pc, #124]	; (80037e4 <HAL_DMA_Start_IT+0x22c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d004      	beq.n	8003774 <HAL_DMA_Start_IT+0x1bc>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a1e      	ldr	r2, [pc, #120]	; (80037e8 <HAL_DMA_Start_IT+0x230>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d101      	bne.n	8003778 <HAL_DMA_Start_IT+0x1c0>
 8003774:	2301      	movs	r3, #1
 8003776:	e000      	b.n	800377a <HAL_DMA_Start_IT+0x1c2>
 8003778:	2300      	movs	r3, #0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d036      	beq.n	80037ec <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f023 021e 	bic.w	r2, r3, #30
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f042 0216 	orr.w	r2, r2, #22
 8003790:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	2b00      	cmp	r3, #0
 8003798:	d03e      	beq.n	8003818 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 0208 	orr.w	r2, r2, #8
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	e035      	b.n	8003818 <HAL_DMA_Start_IT+0x260>
 80037ac:	40020010 	.word	0x40020010
 80037b0:	40020028 	.word	0x40020028
 80037b4:	40020040 	.word	0x40020040
 80037b8:	40020058 	.word	0x40020058
 80037bc:	40020070 	.word	0x40020070
 80037c0:	40020088 	.word	0x40020088
 80037c4:	400200a0 	.word	0x400200a0
 80037c8:	400200b8 	.word	0x400200b8
 80037cc:	40020410 	.word	0x40020410
 80037d0:	40020428 	.word	0x40020428
 80037d4:	40020440 	.word	0x40020440
 80037d8:	40020458 	.word	0x40020458
 80037dc:	40020470 	.word	0x40020470
 80037e0:	40020488 	.word	0x40020488
 80037e4:	400204a0 	.word	0x400204a0
 80037e8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f023 020e 	bic.w	r2, r3, #14
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 020a 	orr.w	r2, r2, #10
 80037fe:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	2b00      	cmp	r3, #0
 8003806:	d007      	beq.n	8003818 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0204 	orr.w	r2, r2, #4
 8003816:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a83      	ldr	r2, [pc, #524]	; (8003a2c <HAL_DMA_Start_IT+0x474>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d072      	beq.n	8003908 <HAL_DMA_Start_IT+0x350>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a82      	ldr	r2, [pc, #520]	; (8003a30 <HAL_DMA_Start_IT+0x478>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d06d      	beq.n	8003908 <HAL_DMA_Start_IT+0x350>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a80      	ldr	r2, [pc, #512]	; (8003a34 <HAL_DMA_Start_IT+0x47c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d068      	beq.n	8003908 <HAL_DMA_Start_IT+0x350>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a7f      	ldr	r2, [pc, #508]	; (8003a38 <HAL_DMA_Start_IT+0x480>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d063      	beq.n	8003908 <HAL_DMA_Start_IT+0x350>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a7d      	ldr	r2, [pc, #500]	; (8003a3c <HAL_DMA_Start_IT+0x484>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d05e      	beq.n	8003908 <HAL_DMA_Start_IT+0x350>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a7c      	ldr	r2, [pc, #496]	; (8003a40 <HAL_DMA_Start_IT+0x488>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d059      	beq.n	8003908 <HAL_DMA_Start_IT+0x350>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a7a      	ldr	r2, [pc, #488]	; (8003a44 <HAL_DMA_Start_IT+0x48c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d054      	beq.n	8003908 <HAL_DMA_Start_IT+0x350>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a79      	ldr	r2, [pc, #484]	; (8003a48 <HAL_DMA_Start_IT+0x490>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d04f      	beq.n	8003908 <HAL_DMA_Start_IT+0x350>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a77      	ldr	r2, [pc, #476]	; (8003a4c <HAL_DMA_Start_IT+0x494>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d04a      	beq.n	8003908 <HAL_DMA_Start_IT+0x350>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a76      	ldr	r2, [pc, #472]	; (8003a50 <HAL_DMA_Start_IT+0x498>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d045      	beq.n	8003908 <HAL_DMA_Start_IT+0x350>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a74      	ldr	r2, [pc, #464]	; (8003a54 <HAL_DMA_Start_IT+0x49c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d040      	beq.n	8003908 <HAL_DMA_Start_IT+0x350>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a73      	ldr	r2, [pc, #460]	; (8003a58 <HAL_DMA_Start_IT+0x4a0>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d03b      	beq.n	8003908 <HAL_DMA_Start_IT+0x350>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a71      	ldr	r2, [pc, #452]	; (8003a5c <HAL_DMA_Start_IT+0x4a4>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d036      	beq.n	8003908 <HAL_DMA_Start_IT+0x350>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a70      	ldr	r2, [pc, #448]	; (8003a60 <HAL_DMA_Start_IT+0x4a8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d031      	beq.n	8003908 <HAL_DMA_Start_IT+0x350>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a6e      	ldr	r2, [pc, #440]	; (8003a64 <HAL_DMA_Start_IT+0x4ac>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d02c      	beq.n	8003908 <HAL_DMA_Start_IT+0x350>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a6d      	ldr	r2, [pc, #436]	; (8003a68 <HAL_DMA_Start_IT+0x4b0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d027      	beq.n	8003908 <HAL_DMA_Start_IT+0x350>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a6b      	ldr	r2, [pc, #428]	; (8003a6c <HAL_DMA_Start_IT+0x4b4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d022      	beq.n	8003908 <HAL_DMA_Start_IT+0x350>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a6a      	ldr	r2, [pc, #424]	; (8003a70 <HAL_DMA_Start_IT+0x4b8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d01d      	beq.n	8003908 <HAL_DMA_Start_IT+0x350>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a68      	ldr	r2, [pc, #416]	; (8003a74 <HAL_DMA_Start_IT+0x4bc>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d018      	beq.n	8003908 <HAL_DMA_Start_IT+0x350>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a67      	ldr	r2, [pc, #412]	; (8003a78 <HAL_DMA_Start_IT+0x4c0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d013      	beq.n	8003908 <HAL_DMA_Start_IT+0x350>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a65      	ldr	r2, [pc, #404]	; (8003a7c <HAL_DMA_Start_IT+0x4c4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00e      	beq.n	8003908 <HAL_DMA_Start_IT+0x350>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a64      	ldr	r2, [pc, #400]	; (8003a80 <HAL_DMA_Start_IT+0x4c8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d009      	beq.n	8003908 <HAL_DMA_Start_IT+0x350>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a62      	ldr	r2, [pc, #392]	; (8003a84 <HAL_DMA_Start_IT+0x4cc>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d004      	beq.n	8003908 <HAL_DMA_Start_IT+0x350>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a61      	ldr	r2, [pc, #388]	; (8003a88 <HAL_DMA_Start_IT+0x4d0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d101      	bne.n	800390c <HAL_DMA_Start_IT+0x354>
 8003908:	2301      	movs	r3, #1
 800390a:	e000      	b.n	800390e <HAL_DMA_Start_IT+0x356>
 800390c:	2300      	movs	r3, #0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d01a      	beq.n	8003948 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d007      	beq.n	8003930 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800392a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800392e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003934:	2b00      	cmp	r3, #0
 8003936:	d007      	beq.n	8003948 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003942:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003946:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a37      	ldr	r2, [pc, #220]	; (8003a2c <HAL_DMA_Start_IT+0x474>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d04a      	beq.n	80039e8 <HAL_DMA_Start_IT+0x430>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a36      	ldr	r2, [pc, #216]	; (8003a30 <HAL_DMA_Start_IT+0x478>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d045      	beq.n	80039e8 <HAL_DMA_Start_IT+0x430>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a34      	ldr	r2, [pc, #208]	; (8003a34 <HAL_DMA_Start_IT+0x47c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d040      	beq.n	80039e8 <HAL_DMA_Start_IT+0x430>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a33      	ldr	r2, [pc, #204]	; (8003a38 <HAL_DMA_Start_IT+0x480>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d03b      	beq.n	80039e8 <HAL_DMA_Start_IT+0x430>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a31      	ldr	r2, [pc, #196]	; (8003a3c <HAL_DMA_Start_IT+0x484>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d036      	beq.n	80039e8 <HAL_DMA_Start_IT+0x430>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a30      	ldr	r2, [pc, #192]	; (8003a40 <HAL_DMA_Start_IT+0x488>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d031      	beq.n	80039e8 <HAL_DMA_Start_IT+0x430>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a2e      	ldr	r2, [pc, #184]	; (8003a44 <HAL_DMA_Start_IT+0x48c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d02c      	beq.n	80039e8 <HAL_DMA_Start_IT+0x430>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a2d      	ldr	r2, [pc, #180]	; (8003a48 <HAL_DMA_Start_IT+0x490>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d027      	beq.n	80039e8 <HAL_DMA_Start_IT+0x430>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a2b      	ldr	r2, [pc, #172]	; (8003a4c <HAL_DMA_Start_IT+0x494>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d022      	beq.n	80039e8 <HAL_DMA_Start_IT+0x430>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a2a      	ldr	r2, [pc, #168]	; (8003a50 <HAL_DMA_Start_IT+0x498>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d01d      	beq.n	80039e8 <HAL_DMA_Start_IT+0x430>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a28      	ldr	r2, [pc, #160]	; (8003a54 <HAL_DMA_Start_IT+0x49c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d018      	beq.n	80039e8 <HAL_DMA_Start_IT+0x430>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a27      	ldr	r2, [pc, #156]	; (8003a58 <HAL_DMA_Start_IT+0x4a0>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d013      	beq.n	80039e8 <HAL_DMA_Start_IT+0x430>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a25      	ldr	r2, [pc, #148]	; (8003a5c <HAL_DMA_Start_IT+0x4a4>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00e      	beq.n	80039e8 <HAL_DMA_Start_IT+0x430>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a24      	ldr	r2, [pc, #144]	; (8003a60 <HAL_DMA_Start_IT+0x4a8>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d009      	beq.n	80039e8 <HAL_DMA_Start_IT+0x430>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a22      	ldr	r2, [pc, #136]	; (8003a64 <HAL_DMA_Start_IT+0x4ac>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d004      	beq.n	80039e8 <HAL_DMA_Start_IT+0x430>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a21      	ldr	r2, [pc, #132]	; (8003a68 <HAL_DMA_Start_IT+0x4b0>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d108      	bne.n	80039fa <HAL_DMA_Start_IT+0x442>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0201 	orr.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	e012      	b.n	8003a20 <HAL_DMA_Start_IT+0x468>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f042 0201 	orr.w	r2, r2, #1
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	e009      	b.n	8003a20 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a12:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40020010 	.word	0x40020010
 8003a30:	40020028 	.word	0x40020028
 8003a34:	40020040 	.word	0x40020040
 8003a38:	40020058 	.word	0x40020058
 8003a3c:	40020070 	.word	0x40020070
 8003a40:	40020088 	.word	0x40020088
 8003a44:	400200a0 	.word	0x400200a0
 8003a48:	400200b8 	.word	0x400200b8
 8003a4c:	40020410 	.word	0x40020410
 8003a50:	40020428 	.word	0x40020428
 8003a54:	40020440 	.word	0x40020440
 8003a58:	40020458 	.word	0x40020458
 8003a5c:	40020470 	.word	0x40020470
 8003a60:	40020488 	.word	0x40020488
 8003a64:	400204a0 	.word	0x400204a0
 8003a68:	400204b8 	.word	0x400204b8
 8003a6c:	58025408 	.word	0x58025408
 8003a70:	5802541c 	.word	0x5802541c
 8003a74:	58025430 	.word	0x58025430
 8003a78:	58025444 	.word	0x58025444
 8003a7c:	58025458 	.word	0x58025458
 8003a80:	5802546c 	.word	0x5802546c
 8003a84:	58025480 	.word	0x58025480
 8003a88:	58025494 	.word	0x58025494

08003a8c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08a      	sub	sp, #40	; 0x28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a98:	4b67      	ldr	r3, [pc, #412]	; (8003c38 <HAL_DMA_IRQHandler+0x1ac>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a67      	ldr	r2, [pc, #412]	; (8003c3c <HAL_DMA_IRQHandler+0x1b0>)
 8003a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa2:	0a9b      	lsrs	r3, r3, #10
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aaa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a5f      	ldr	r2, [pc, #380]	; (8003c40 <HAL_DMA_IRQHandler+0x1b4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d04a      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xd2>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a5d      	ldr	r2, [pc, #372]	; (8003c44 <HAL_DMA_IRQHandler+0x1b8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d045      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xd2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a5c      	ldr	r2, [pc, #368]	; (8003c48 <HAL_DMA_IRQHandler+0x1bc>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d040      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xd2>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a5a      	ldr	r2, [pc, #360]	; (8003c4c <HAL_DMA_IRQHandler+0x1c0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d03b      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xd2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a59      	ldr	r2, [pc, #356]	; (8003c50 <HAL_DMA_IRQHandler+0x1c4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d036      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xd2>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a57      	ldr	r2, [pc, #348]	; (8003c54 <HAL_DMA_IRQHandler+0x1c8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d031      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xd2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a56      	ldr	r2, [pc, #344]	; (8003c58 <HAL_DMA_IRQHandler+0x1cc>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d02c      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xd2>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a54      	ldr	r2, [pc, #336]	; (8003c5c <HAL_DMA_IRQHandler+0x1d0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d027      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xd2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a53      	ldr	r2, [pc, #332]	; (8003c60 <HAL_DMA_IRQHandler+0x1d4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d022      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xd2>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a51      	ldr	r2, [pc, #324]	; (8003c64 <HAL_DMA_IRQHandler+0x1d8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d01d      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xd2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a50      	ldr	r2, [pc, #320]	; (8003c68 <HAL_DMA_IRQHandler+0x1dc>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d018      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xd2>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a4e      	ldr	r2, [pc, #312]	; (8003c6c <HAL_DMA_IRQHandler+0x1e0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d013      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xd2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a4d      	ldr	r2, [pc, #308]	; (8003c70 <HAL_DMA_IRQHandler+0x1e4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d00e      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xd2>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a4b      	ldr	r2, [pc, #300]	; (8003c74 <HAL_DMA_IRQHandler+0x1e8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d009      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xd2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a4a      	ldr	r2, [pc, #296]	; (8003c78 <HAL_DMA_IRQHandler+0x1ec>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d004      	beq.n	8003b5e <HAL_DMA_IRQHandler+0xd2>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a48      	ldr	r2, [pc, #288]	; (8003c7c <HAL_DMA_IRQHandler+0x1f0>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d101      	bne.n	8003b62 <HAL_DMA_IRQHandler+0xd6>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e000      	b.n	8003b64 <HAL_DMA_IRQHandler+0xd8>
 8003b62:	2300      	movs	r3, #0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 842b 	beq.w	80043c0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6e:	f003 031f 	and.w	r3, r3, #31
 8003b72:	2208      	movs	r2, #8
 8003b74:	409a      	lsls	r2, r3
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 80a2 	beq.w	8003cc4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a2e      	ldr	r2, [pc, #184]	; (8003c40 <HAL_DMA_IRQHandler+0x1b4>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d04a      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x194>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a2d      	ldr	r2, [pc, #180]	; (8003c44 <HAL_DMA_IRQHandler+0x1b8>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d045      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x194>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a2b      	ldr	r2, [pc, #172]	; (8003c48 <HAL_DMA_IRQHandler+0x1bc>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d040      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x194>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a2a      	ldr	r2, [pc, #168]	; (8003c4c <HAL_DMA_IRQHandler+0x1c0>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d03b      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x194>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a28      	ldr	r2, [pc, #160]	; (8003c50 <HAL_DMA_IRQHandler+0x1c4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d036      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x194>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a27      	ldr	r2, [pc, #156]	; (8003c54 <HAL_DMA_IRQHandler+0x1c8>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d031      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x194>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a25      	ldr	r2, [pc, #148]	; (8003c58 <HAL_DMA_IRQHandler+0x1cc>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d02c      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x194>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a24      	ldr	r2, [pc, #144]	; (8003c5c <HAL_DMA_IRQHandler+0x1d0>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d027      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x194>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a22      	ldr	r2, [pc, #136]	; (8003c60 <HAL_DMA_IRQHandler+0x1d4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d022      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x194>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a21      	ldr	r2, [pc, #132]	; (8003c64 <HAL_DMA_IRQHandler+0x1d8>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d01d      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x194>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a1f      	ldr	r2, [pc, #124]	; (8003c68 <HAL_DMA_IRQHandler+0x1dc>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d018      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x194>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a1e      	ldr	r2, [pc, #120]	; (8003c6c <HAL_DMA_IRQHandler+0x1e0>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d013      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x194>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a1c      	ldr	r2, [pc, #112]	; (8003c70 <HAL_DMA_IRQHandler+0x1e4>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d00e      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x194>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a1b      	ldr	r2, [pc, #108]	; (8003c74 <HAL_DMA_IRQHandler+0x1e8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d009      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x194>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a19      	ldr	r2, [pc, #100]	; (8003c78 <HAL_DMA_IRQHandler+0x1ec>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d004      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x194>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a18      	ldr	r2, [pc, #96]	; (8003c7c <HAL_DMA_IRQHandler+0x1f0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d12f      	bne.n	8003c80 <HAL_DMA_IRQHandler+0x1f4>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	bf14      	ite	ne
 8003c2e:	2301      	movne	r3, #1
 8003c30:	2300      	moveq	r3, #0
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	e02e      	b.n	8003c94 <HAL_DMA_IRQHandler+0x208>
 8003c36:	bf00      	nop
 8003c38:	24000000 	.word	0x24000000
 8003c3c:	1b4e81b5 	.word	0x1b4e81b5
 8003c40:	40020010 	.word	0x40020010
 8003c44:	40020028 	.word	0x40020028
 8003c48:	40020040 	.word	0x40020040
 8003c4c:	40020058 	.word	0x40020058
 8003c50:	40020070 	.word	0x40020070
 8003c54:	40020088 	.word	0x40020088
 8003c58:	400200a0 	.word	0x400200a0
 8003c5c:	400200b8 	.word	0x400200b8
 8003c60:	40020410 	.word	0x40020410
 8003c64:	40020428 	.word	0x40020428
 8003c68:	40020440 	.word	0x40020440
 8003c6c:	40020458 	.word	0x40020458
 8003c70:	40020470 	.word	0x40020470
 8003c74:	40020488 	.word	0x40020488
 8003c78:	400204a0 	.word	0x400204a0
 8003c7c:	400204b8 	.word	0x400204b8
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	bf14      	ite	ne
 8003c8e:	2301      	movne	r3, #1
 8003c90:	2300      	moveq	r3, #0
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d015      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0204 	bic.w	r2, r2, #4
 8003ca6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cac:	f003 031f 	and.w	r3, r3, #31
 8003cb0:	2208      	movs	r2, #8
 8003cb2:	409a      	lsls	r2, r3
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbc:	f043 0201 	orr.w	r2, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc8:	f003 031f 	and.w	r3, r3, #31
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d06e      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a69      	ldr	r2, [pc, #420]	; (8003e84 <HAL_DMA_IRQHandler+0x3f8>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d04a      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x2ee>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a67      	ldr	r2, [pc, #412]	; (8003e88 <HAL_DMA_IRQHandler+0x3fc>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d045      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x2ee>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a66      	ldr	r2, [pc, #408]	; (8003e8c <HAL_DMA_IRQHandler+0x400>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d040      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x2ee>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a64      	ldr	r2, [pc, #400]	; (8003e90 <HAL_DMA_IRQHandler+0x404>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d03b      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x2ee>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a63      	ldr	r2, [pc, #396]	; (8003e94 <HAL_DMA_IRQHandler+0x408>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d036      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x2ee>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a61      	ldr	r2, [pc, #388]	; (8003e98 <HAL_DMA_IRQHandler+0x40c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d031      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x2ee>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a60      	ldr	r2, [pc, #384]	; (8003e9c <HAL_DMA_IRQHandler+0x410>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d02c      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x2ee>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a5e      	ldr	r2, [pc, #376]	; (8003ea0 <HAL_DMA_IRQHandler+0x414>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d027      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x2ee>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a5d      	ldr	r2, [pc, #372]	; (8003ea4 <HAL_DMA_IRQHandler+0x418>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d022      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x2ee>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a5b      	ldr	r2, [pc, #364]	; (8003ea8 <HAL_DMA_IRQHandler+0x41c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d01d      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x2ee>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a5a      	ldr	r2, [pc, #360]	; (8003eac <HAL_DMA_IRQHandler+0x420>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d018      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x2ee>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a58      	ldr	r2, [pc, #352]	; (8003eb0 <HAL_DMA_IRQHandler+0x424>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d013      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x2ee>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a57      	ldr	r2, [pc, #348]	; (8003eb4 <HAL_DMA_IRQHandler+0x428>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d00e      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x2ee>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a55      	ldr	r2, [pc, #340]	; (8003eb8 <HAL_DMA_IRQHandler+0x42c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d009      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x2ee>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a54      	ldr	r2, [pc, #336]	; (8003ebc <HAL_DMA_IRQHandler+0x430>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d004      	beq.n	8003d7a <HAL_DMA_IRQHandler+0x2ee>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a52      	ldr	r2, [pc, #328]	; (8003ec0 <HAL_DMA_IRQHandler+0x434>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d10a      	bne.n	8003d90 <HAL_DMA_IRQHandler+0x304>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	bf14      	ite	ne
 8003d88:	2301      	movne	r3, #1
 8003d8a:	2300      	moveq	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	e003      	b.n	8003d98 <HAL_DMA_IRQHandler+0x30c>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2300      	movs	r3, #0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00d      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da0:	f003 031f 	and.w	r3, r3, #31
 8003da4:	2201      	movs	r2, #1
 8003da6:	409a      	lsls	r2, r3
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db0:	f043 0202 	orr.w	r2, r3, #2
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbc:	f003 031f 	and.w	r3, r3, #31
 8003dc0:	2204      	movs	r2, #4
 8003dc2:	409a      	lsls	r2, r3
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 808f 	beq.w	8003eec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a2c      	ldr	r2, [pc, #176]	; (8003e84 <HAL_DMA_IRQHandler+0x3f8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d04a      	beq.n	8003e6e <HAL_DMA_IRQHandler+0x3e2>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a2a      	ldr	r2, [pc, #168]	; (8003e88 <HAL_DMA_IRQHandler+0x3fc>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d045      	beq.n	8003e6e <HAL_DMA_IRQHandler+0x3e2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a29      	ldr	r2, [pc, #164]	; (8003e8c <HAL_DMA_IRQHandler+0x400>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d040      	beq.n	8003e6e <HAL_DMA_IRQHandler+0x3e2>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a27      	ldr	r2, [pc, #156]	; (8003e90 <HAL_DMA_IRQHandler+0x404>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d03b      	beq.n	8003e6e <HAL_DMA_IRQHandler+0x3e2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a26      	ldr	r2, [pc, #152]	; (8003e94 <HAL_DMA_IRQHandler+0x408>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d036      	beq.n	8003e6e <HAL_DMA_IRQHandler+0x3e2>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a24      	ldr	r2, [pc, #144]	; (8003e98 <HAL_DMA_IRQHandler+0x40c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d031      	beq.n	8003e6e <HAL_DMA_IRQHandler+0x3e2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a23      	ldr	r2, [pc, #140]	; (8003e9c <HAL_DMA_IRQHandler+0x410>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d02c      	beq.n	8003e6e <HAL_DMA_IRQHandler+0x3e2>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a21      	ldr	r2, [pc, #132]	; (8003ea0 <HAL_DMA_IRQHandler+0x414>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d027      	beq.n	8003e6e <HAL_DMA_IRQHandler+0x3e2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a20      	ldr	r2, [pc, #128]	; (8003ea4 <HAL_DMA_IRQHandler+0x418>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d022      	beq.n	8003e6e <HAL_DMA_IRQHandler+0x3e2>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a1e      	ldr	r2, [pc, #120]	; (8003ea8 <HAL_DMA_IRQHandler+0x41c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d01d      	beq.n	8003e6e <HAL_DMA_IRQHandler+0x3e2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a1d      	ldr	r2, [pc, #116]	; (8003eac <HAL_DMA_IRQHandler+0x420>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d018      	beq.n	8003e6e <HAL_DMA_IRQHandler+0x3e2>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a1b      	ldr	r2, [pc, #108]	; (8003eb0 <HAL_DMA_IRQHandler+0x424>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d013      	beq.n	8003e6e <HAL_DMA_IRQHandler+0x3e2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a1a      	ldr	r2, [pc, #104]	; (8003eb4 <HAL_DMA_IRQHandler+0x428>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d00e      	beq.n	8003e6e <HAL_DMA_IRQHandler+0x3e2>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a18      	ldr	r2, [pc, #96]	; (8003eb8 <HAL_DMA_IRQHandler+0x42c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d009      	beq.n	8003e6e <HAL_DMA_IRQHandler+0x3e2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a17      	ldr	r2, [pc, #92]	; (8003ebc <HAL_DMA_IRQHandler+0x430>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d004      	beq.n	8003e6e <HAL_DMA_IRQHandler+0x3e2>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a15      	ldr	r2, [pc, #84]	; (8003ec0 <HAL_DMA_IRQHandler+0x434>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d12a      	bne.n	8003ec4 <HAL_DMA_IRQHandler+0x438>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	bf14      	ite	ne
 8003e7c:	2301      	movne	r3, #1
 8003e7e:	2300      	moveq	r3, #0
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	e023      	b.n	8003ecc <HAL_DMA_IRQHandler+0x440>
 8003e84:	40020010 	.word	0x40020010
 8003e88:	40020028 	.word	0x40020028
 8003e8c:	40020040 	.word	0x40020040
 8003e90:	40020058 	.word	0x40020058
 8003e94:	40020070 	.word	0x40020070
 8003e98:	40020088 	.word	0x40020088
 8003e9c:	400200a0 	.word	0x400200a0
 8003ea0:	400200b8 	.word	0x400200b8
 8003ea4:	40020410 	.word	0x40020410
 8003ea8:	40020428 	.word	0x40020428
 8003eac:	40020440 	.word	0x40020440
 8003eb0:	40020458 	.word	0x40020458
 8003eb4:	40020470 	.word	0x40020470
 8003eb8:	40020488 	.word	0x40020488
 8003ebc:	400204a0 	.word	0x400204a0
 8003ec0:	400204b8 	.word	0x400204b8
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00d      	beq.n	8003eec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	2204      	movs	r2, #4
 8003eda:	409a      	lsls	r2, r3
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee4:	f043 0204 	orr.w	r2, r3, #4
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef0:	f003 031f 	and.w	r3, r3, #31
 8003ef4:	2210      	movs	r2, #16
 8003ef6:	409a      	lsls	r2, r3
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	4013      	ands	r3, r2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 80a6 	beq.w	800404e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a85      	ldr	r2, [pc, #532]	; (800411c <HAL_DMA_IRQHandler+0x690>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d04a      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x516>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a83      	ldr	r2, [pc, #524]	; (8004120 <HAL_DMA_IRQHandler+0x694>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d045      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x516>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a82      	ldr	r2, [pc, #520]	; (8004124 <HAL_DMA_IRQHandler+0x698>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d040      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x516>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a80      	ldr	r2, [pc, #512]	; (8004128 <HAL_DMA_IRQHandler+0x69c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d03b      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x516>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a7f      	ldr	r2, [pc, #508]	; (800412c <HAL_DMA_IRQHandler+0x6a0>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d036      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x516>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a7d      	ldr	r2, [pc, #500]	; (8004130 <HAL_DMA_IRQHandler+0x6a4>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d031      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x516>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a7c      	ldr	r2, [pc, #496]	; (8004134 <HAL_DMA_IRQHandler+0x6a8>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d02c      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x516>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a7a      	ldr	r2, [pc, #488]	; (8004138 <HAL_DMA_IRQHandler+0x6ac>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d027      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x516>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a79      	ldr	r2, [pc, #484]	; (800413c <HAL_DMA_IRQHandler+0x6b0>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d022      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x516>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a77      	ldr	r2, [pc, #476]	; (8004140 <HAL_DMA_IRQHandler+0x6b4>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d01d      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x516>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a76      	ldr	r2, [pc, #472]	; (8004144 <HAL_DMA_IRQHandler+0x6b8>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d018      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x516>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a74      	ldr	r2, [pc, #464]	; (8004148 <HAL_DMA_IRQHandler+0x6bc>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d013      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x516>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a73      	ldr	r2, [pc, #460]	; (800414c <HAL_DMA_IRQHandler+0x6c0>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d00e      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x516>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a71      	ldr	r2, [pc, #452]	; (8004150 <HAL_DMA_IRQHandler+0x6c4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d009      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x516>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a70      	ldr	r2, [pc, #448]	; (8004154 <HAL_DMA_IRQHandler+0x6c8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d004      	beq.n	8003fa2 <HAL_DMA_IRQHandler+0x516>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a6e      	ldr	r2, [pc, #440]	; (8004158 <HAL_DMA_IRQHandler+0x6cc>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d10a      	bne.n	8003fb8 <HAL_DMA_IRQHandler+0x52c>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	bf14      	ite	ne
 8003fb0:	2301      	movne	r3, #1
 8003fb2:	2300      	moveq	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	e009      	b.n	8003fcc <HAL_DMA_IRQHandler+0x540>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0304 	and.w	r3, r3, #4
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	bf14      	ite	ne
 8003fc6:	2301      	movne	r3, #1
 8003fc8:	2300      	moveq	r3, #0
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d03e      	beq.n	800404e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd4:	f003 031f 	and.w	r3, r3, #31
 8003fd8:	2210      	movs	r2, #16
 8003fda:	409a      	lsls	r2, r3
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d018      	beq.n	8004020 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d108      	bne.n	800400e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004000:	2b00      	cmp	r3, #0
 8004002:	d024      	beq.n	800404e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	4798      	blx	r3
 800400c:	e01f      	b.n	800404e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004012:	2b00      	cmp	r3, #0
 8004014:	d01b      	beq.n	800404e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	4798      	blx	r3
 800401e:	e016      	b.n	800404e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402a:	2b00      	cmp	r3, #0
 800402c:	d107      	bne.n	800403e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0208 	bic.w	r2, r2, #8
 800403c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004052:	f003 031f 	and.w	r3, r3, #31
 8004056:	2220      	movs	r2, #32
 8004058:	409a      	lsls	r2, r3
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	4013      	ands	r3, r2
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 8110 	beq.w	8004284 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a2c      	ldr	r2, [pc, #176]	; (800411c <HAL_DMA_IRQHandler+0x690>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d04a      	beq.n	8004104 <HAL_DMA_IRQHandler+0x678>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a2b      	ldr	r2, [pc, #172]	; (8004120 <HAL_DMA_IRQHandler+0x694>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d045      	beq.n	8004104 <HAL_DMA_IRQHandler+0x678>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a29      	ldr	r2, [pc, #164]	; (8004124 <HAL_DMA_IRQHandler+0x698>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d040      	beq.n	8004104 <HAL_DMA_IRQHandler+0x678>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a28      	ldr	r2, [pc, #160]	; (8004128 <HAL_DMA_IRQHandler+0x69c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d03b      	beq.n	8004104 <HAL_DMA_IRQHandler+0x678>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a26      	ldr	r2, [pc, #152]	; (800412c <HAL_DMA_IRQHandler+0x6a0>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d036      	beq.n	8004104 <HAL_DMA_IRQHandler+0x678>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a25      	ldr	r2, [pc, #148]	; (8004130 <HAL_DMA_IRQHandler+0x6a4>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d031      	beq.n	8004104 <HAL_DMA_IRQHandler+0x678>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a23      	ldr	r2, [pc, #140]	; (8004134 <HAL_DMA_IRQHandler+0x6a8>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d02c      	beq.n	8004104 <HAL_DMA_IRQHandler+0x678>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a22      	ldr	r2, [pc, #136]	; (8004138 <HAL_DMA_IRQHandler+0x6ac>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d027      	beq.n	8004104 <HAL_DMA_IRQHandler+0x678>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a20      	ldr	r2, [pc, #128]	; (800413c <HAL_DMA_IRQHandler+0x6b0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d022      	beq.n	8004104 <HAL_DMA_IRQHandler+0x678>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a1f      	ldr	r2, [pc, #124]	; (8004140 <HAL_DMA_IRQHandler+0x6b4>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d01d      	beq.n	8004104 <HAL_DMA_IRQHandler+0x678>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a1d      	ldr	r2, [pc, #116]	; (8004144 <HAL_DMA_IRQHandler+0x6b8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d018      	beq.n	8004104 <HAL_DMA_IRQHandler+0x678>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a1c      	ldr	r2, [pc, #112]	; (8004148 <HAL_DMA_IRQHandler+0x6bc>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d013      	beq.n	8004104 <HAL_DMA_IRQHandler+0x678>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a1a      	ldr	r2, [pc, #104]	; (800414c <HAL_DMA_IRQHandler+0x6c0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d00e      	beq.n	8004104 <HAL_DMA_IRQHandler+0x678>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a19      	ldr	r2, [pc, #100]	; (8004150 <HAL_DMA_IRQHandler+0x6c4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d009      	beq.n	8004104 <HAL_DMA_IRQHandler+0x678>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a17      	ldr	r2, [pc, #92]	; (8004154 <HAL_DMA_IRQHandler+0x6c8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d004      	beq.n	8004104 <HAL_DMA_IRQHandler+0x678>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a16      	ldr	r2, [pc, #88]	; (8004158 <HAL_DMA_IRQHandler+0x6cc>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d12b      	bne.n	800415c <HAL_DMA_IRQHandler+0x6d0>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0310 	and.w	r3, r3, #16
 800410e:	2b00      	cmp	r3, #0
 8004110:	bf14      	ite	ne
 8004112:	2301      	movne	r3, #1
 8004114:	2300      	moveq	r3, #0
 8004116:	b2db      	uxtb	r3, r3
 8004118:	e02a      	b.n	8004170 <HAL_DMA_IRQHandler+0x6e4>
 800411a:	bf00      	nop
 800411c:	40020010 	.word	0x40020010
 8004120:	40020028 	.word	0x40020028
 8004124:	40020040 	.word	0x40020040
 8004128:	40020058 	.word	0x40020058
 800412c:	40020070 	.word	0x40020070
 8004130:	40020088 	.word	0x40020088
 8004134:	400200a0 	.word	0x400200a0
 8004138:	400200b8 	.word	0x400200b8
 800413c:	40020410 	.word	0x40020410
 8004140:	40020428 	.word	0x40020428
 8004144:	40020440 	.word	0x40020440
 8004148:	40020458 	.word	0x40020458
 800414c:	40020470 	.word	0x40020470
 8004150:	40020488 	.word	0x40020488
 8004154:	400204a0 	.word	0x400204a0
 8004158:	400204b8 	.word	0x400204b8
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	bf14      	ite	ne
 800416a:	2301      	movne	r3, #1
 800416c:	2300      	moveq	r3, #0
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 8087 	beq.w	8004284 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417a:	f003 031f 	and.w	r3, r3, #31
 800417e:	2220      	movs	r2, #32
 8004180:	409a      	lsls	r2, r3
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b04      	cmp	r3, #4
 8004190:	d139      	bne.n	8004206 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0216 	bic.w	r2, r2, #22
 80041a0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695a      	ldr	r2, [r3, #20]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041b0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d103      	bne.n	80041c2 <HAL_DMA_IRQHandler+0x736>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d007      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 0208 	bic.w	r2, r2, #8
 80041d0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d6:	f003 031f 	and.w	r3, r3, #31
 80041da:	223f      	movs	r2, #63	; 0x3f
 80041dc:	409a      	lsls	r2, r3
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 834a 	beq.w	8004890 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	4798      	blx	r3
          }
          return;
 8004204:	e344      	b.n	8004890 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d018      	beq.n	8004246 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d108      	bne.n	8004234 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004226:	2b00      	cmp	r3, #0
 8004228:	d02c      	beq.n	8004284 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	4798      	blx	r3
 8004232:	e027      	b.n	8004284 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004238:	2b00      	cmp	r3, #0
 800423a:	d023      	beq.n	8004284 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	4798      	blx	r3
 8004244:	e01e      	b.n	8004284 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10f      	bne.n	8004274 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0210 	bic.w	r2, r2, #16
 8004262:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 8306 	beq.w	800489a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 8088 	beq.w	80043ac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2204      	movs	r2, #4
 80042a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a7a      	ldr	r2, [pc, #488]	; (8004494 <HAL_DMA_IRQHandler+0xa08>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d04a      	beq.n	8004344 <HAL_DMA_IRQHandler+0x8b8>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a79      	ldr	r2, [pc, #484]	; (8004498 <HAL_DMA_IRQHandler+0xa0c>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d045      	beq.n	8004344 <HAL_DMA_IRQHandler+0x8b8>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a77      	ldr	r2, [pc, #476]	; (800449c <HAL_DMA_IRQHandler+0xa10>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d040      	beq.n	8004344 <HAL_DMA_IRQHandler+0x8b8>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a76      	ldr	r2, [pc, #472]	; (80044a0 <HAL_DMA_IRQHandler+0xa14>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d03b      	beq.n	8004344 <HAL_DMA_IRQHandler+0x8b8>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a74      	ldr	r2, [pc, #464]	; (80044a4 <HAL_DMA_IRQHandler+0xa18>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d036      	beq.n	8004344 <HAL_DMA_IRQHandler+0x8b8>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a73      	ldr	r2, [pc, #460]	; (80044a8 <HAL_DMA_IRQHandler+0xa1c>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d031      	beq.n	8004344 <HAL_DMA_IRQHandler+0x8b8>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a71      	ldr	r2, [pc, #452]	; (80044ac <HAL_DMA_IRQHandler+0xa20>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d02c      	beq.n	8004344 <HAL_DMA_IRQHandler+0x8b8>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a70      	ldr	r2, [pc, #448]	; (80044b0 <HAL_DMA_IRQHandler+0xa24>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d027      	beq.n	8004344 <HAL_DMA_IRQHandler+0x8b8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a6e      	ldr	r2, [pc, #440]	; (80044b4 <HAL_DMA_IRQHandler+0xa28>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d022      	beq.n	8004344 <HAL_DMA_IRQHandler+0x8b8>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a6d      	ldr	r2, [pc, #436]	; (80044b8 <HAL_DMA_IRQHandler+0xa2c>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d01d      	beq.n	8004344 <HAL_DMA_IRQHandler+0x8b8>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a6b      	ldr	r2, [pc, #428]	; (80044bc <HAL_DMA_IRQHandler+0xa30>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d018      	beq.n	8004344 <HAL_DMA_IRQHandler+0x8b8>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a6a      	ldr	r2, [pc, #424]	; (80044c0 <HAL_DMA_IRQHandler+0xa34>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d013      	beq.n	8004344 <HAL_DMA_IRQHandler+0x8b8>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a68      	ldr	r2, [pc, #416]	; (80044c4 <HAL_DMA_IRQHandler+0xa38>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d00e      	beq.n	8004344 <HAL_DMA_IRQHandler+0x8b8>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a67      	ldr	r2, [pc, #412]	; (80044c8 <HAL_DMA_IRQHandler+0xa3c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d009      	beq.n	8004344 <HAL_DMA_IRQHandler+0x8b8>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a65      	ldr	r2, [pc, #404]	; (80044cc <HAL_DMA_IRQHandler+0xa40>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d004      	beq.n	8004344 <HAL_DMA_IRQHandler+0x8b8>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a64      	ldr	r2, [pc, #400]	; (80044d0 <HAL_DMA_IRQHandler+0xa44>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d108      	bne.n	8004356 <HAL_DMA_IRQHandler+0x8ca>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0201 	bic.w	r2, r2, #1
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	e007      	b.n	8004366 <HAL_DMA_IRQHandler+0x8da>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0201 	bic.w	r2, r2, #1
 8004364:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	3301      	adds	r3, #1
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800436e:	429a      	cmp	r2, r3
 8004370:	d307      	bcc.n	8004382 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1f2      	bne.n	8004366 <HAL_DMA_IRQHandler+0x8da>
 8004380:	e000      	b.n	8004384 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004382:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d004      	beq.n	800439c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2203      	movs	r2, #3
 8004396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800439a:	e003      	b.n	80043a4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 8272 	beq.w	800489a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	4798      	blx	r3
 80043be:	e26c      	b.n	800489a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a43      	ldr	r2, [pc, #268]	; (80044d4 <HAL_DMA_IRQHandler+0xa48>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d022      	beq.n	8004410 <HAL_DMA_IRQHandler+0x984>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a42      	ldr	r2, [pc, #264]	; (80044d8 <HAL_DMA_IRQHandler+0xa4c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d01d      	beq.n	8004410 <HAL_DMA_IRQHandler+0x984>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a40      	ldr	r2, [pc, #256]	; (80044dc <HAL_DMA_IRQHandler+0xa50>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d018      	beq.n	8004410 <HAL_DMA_IRQHandler+0x984>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a3f      	ldr	r2, [pc, #252]	; (80044e0 <HAL_DMA_IRQHandler+0xa54>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d013      	beq.n	8004410 <HAL_DMA_IRQHandler+0x984>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a3d      	ldr	r2, [pc, #244]	; (80044e4 <HAL_DMA_IRQHandler+0xa58>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d00e      	beq.n	8004410 <HAL_DMA_IRQHandler+0x984>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a3c      	ldr	r2, [pc, #240]	; (80044e8 <HAL_DMA_IRQHandler+0xa5c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d009      	beq.n	8004410 <HAL_DMA_IRQHandler+0x984>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a3a      	ldr	r2, [pc, #232]	; (80044ec <HAL_DMA_IRQHandler+0xa60>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d004      	beq.n	8004410 <HAL_DMA_IRQHandler+0x984>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a39      	ldr	r2, [pc, #228]	; (80044f0 <HAL_DMA_IRQHandler+0xa64>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d101      	bne.n	8004414 <HAL_DMA_IRQHandler+0x988>
 8004410:	2301      	movs	r3, #1
 8004412:	e000      	b.n	8004416 <HAL_DMA_IRQHandler+0x98a>
 8004414:	2300      	movs	r3, #0
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 823f 	beq.w	800489a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004428:	f003 031f 	and.w	r3, r3, #31
 800442c:	2204      	movs	r2, #4
 800442e:	409a      	lsls	r2, r3
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	4013      	ands	r3, r2
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 80cd 	beq.w	80045d4 <HAL_DMA_IRQHandler+0xb48>
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 80c7 	beq.w	80045d4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444a:	f003 031f 	and.w	r3, r3, #31
 800444e:	2204      	movs	r2, #4
 8004450:	409a      	lsls	r2, r3
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d049      	beq.n	80044f4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d109      	bne.n	800447e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 8210 	beq.w	8004894 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800447c:	e20a      	b.n	8004894 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 8206 	beq.w	8004894 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004490:	e200      	b.n	8004894 <HAL_DMA_IRQHandler+0xe08>
 8004492:	bf00      	nop
 8004494:	40020010 	.word	0x40020010
 8004498:	40020028 	.word	0x40020028
 800449c:	40020040 	.word	0x40020040
 80044a0:	40020058 	.word	0x40020058
 80044a4:	40020070 	.word	0x40020070
 80044a8:	40020088 	.word	0x40020088
 80044ac:	400200a0 	.word	0x400200a0
 80044b0:	400200b8 	.word	0x400200b8
 80044b4:	40020410 	.word	0x40020410
 80044b8:	40020428 	.word	0x40020428
 80044bc:	40020440 	.word	0x40020440
 80044c0:	40020458 	.word	0x40020458
 80044c4:	40020470 	.word	0x40020470
 80044c8:	40020488 	.word	0x40020488
 80044cc:	400204a0 	.word	0x400204a0
 80044d0:	400204b8 	.word	0x400204b8
 80044d4:	58025408 	.word	0x58025408
 80044d8:	5802541c 	.word	0x5802541c
 80044dc:	58025430 	.word	0x58025430
 80044e0:	58025444 	.word	0x58025444
 80044e4:	58025458 	.word	0x58025458
 80044e8:	5802546c 	.word	0x5802546c
 80044ec:	58025480 	.word	0x58025480
 80044f0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f003 0320 	and.w	r3, r3, #32
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d160      	bne.n	80045c0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a7f      	ldr	r2, [pc, #508]	; (8004700 <HAL_DMA_IRQHandler+0xc74>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d04a      	beq.n	800459e <HAL_DMA_IRQHandler+0xb12>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a7d      	ldr	r2, [pc, #500]	; (8004704 <HAL_DMA_IRQHandler+0xc78>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d045      	beq.n	800459e <HAL_DMA_IRQHandler+0xb12>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a7c      	ldr	r2, [pc, #496]	; (8004708 <HAL_DMA_IRQHandler+0xc7c>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d040      	beq.n	800459e <HAL_DMA_IRQHandler+0xb12>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a7a      	ldr	r2, [pc, #488]	; (800470c <HAL_DMA_IRQHandler+0xc80>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d03b      	beq.n	800459e <HAL_DMA_IRQHandler+0xb12>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a79      	ldr	r2, [pc, #484]	; (8004710 <HAL_DMA_IRQHandler+0xc84>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d036      	beq.n	800459e <HAL_DMA_IRQHandler+0xb12>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a77      	ldr	r2, [pc, #476]	; (8004714 <HAL_DMA_IRQHandler+0xc88>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d031      	beq.n	800459e <HAL_DMA_IRQHandler+0xb12>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a76      	ldr	r2, [pc, #472]	; (8004718 <HAL_DMA_IRQHandler+0xc8c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d02c      	beq.n	800459e <HAL_DMA_IRQHandler+0xb12>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a74      	ldr	r2, [pc, #464]	; (800471c <HAL_DMA_IRQHandler+0xc90>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d027      	beq.n	800459e <HAL_DMA_IRQHandler+0xb12>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a73      	ldr	r2, [pc, #460]	; (8004720 <HAL_DMA_IRQHandler+0xc94>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d022      	beq.n	800459e <HAL_DMA_IRQHandler+0xb12>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a71      	ldr	r2, [pc, #452]	; (8004724 <HAL_DMA_IRQHandler+0xc98>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d01d      	beq.n	800459e <HAL_DMA_IRQHandler+0xb12>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a70      	ldr	r2, [pc, #448]	; (8004728 <HAL_DMA_IRQHandler+0xc9c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d018      	beq.n	800459e <HAL_DMA_IRQHandler+0xb12>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a6e      	ldr	r2, [pc, #440]	; (800472c <HAL_DMA_IRQHandler+0xca0>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d013      	beq.n	800459e <HAL_DMA_IRQHandler+0xb12>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a6d      	ldr	r2, [pc, #436]	; (8004730 <HAL_DMA_IRQHandler+0xca4>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d00e      	beq.n	800459e <HAL_DMA_IRQHandler+0xb12>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a6b      	ldr	r2, [pc, #428]	; (8004734 <HAL_DMA_IRQHandler+0xca8>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d009      	beq.n	800459e <HAL_DMA_IRQHandler+0xb12>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a6a      	ldr	r2, [pc, #424]	; (8004738 <HAL_DMA_IRQHandler+0xcac>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d004      	beq.n	800459e <HAL_DMA_IRQHandler+0xb12>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a68      	ldr	r2, [pc, #416]	; (800473c <HAL_DMA_IRQHandler+0xcb0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d108      	bne.n	80045b0 <HAL_DMA_IRQHandler+0xb24>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 0208 	bic.w	r2, r2, #8
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	e007      	b.n	80045c0 <HAL_DMA_IRQHandler+0xb34>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 0204 	bic.w	r2, r2, #4
 80045be:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 8165 	beq.w	8004894 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045d2:	e15f      	b.n	8004894 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d8:	f003 031f 	and.w	r3, r3, #31
 80045dc:	2202      	movs	r2, #2
 80045de:	409a      	lsls	r2, r3
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	4013      	ands	r3, r2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 80c5 	beq.w	8004774 <HAL_DMA_IRQHandler+0xce8>
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 80bf 	beq.w	8004774 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fa:	f003 031f 	and.w	r3, r3, #31
 80045fe:	2202      	movs	r2, #2
 8004600:	409a      	lsls	r2, r3
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d018      	beq.n	8004642 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d109      	bne.n	800462e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 813a 	beq.w	8004898 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800462c:	e134      	b.n	8004898 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 8130 	beq.w	8004898 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004640:	e12a      	b.n	8004898 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f003 0320 	and.w	r3, r3, #32
 8004648:	2b00      	cmp	r3, #0
 800464a:	f040 8089 	bne.w	8004760 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a2b      	ldr	r2, [pc, #172]	; (8004700 <HAL_DMA_IRQHandler+0xc74>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d04a      	beq.n	80046ee <HAL_DMA_IRQHandler+0xc62>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a29      	ldr	r2, [pc, #164]	; (8004704 <HAL_DMA_IRQHandler+0xc78>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d045      	beq.n	80046ee <HAL_DMA_IRQHandler+0xc62>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a28      	ldr	r2, [pc, #160]	; (8004708 <HAL_DMA_IRQHandler+0xc7c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d040      	beq.n	80046ee <HAL_DMA_IRQHandler+0xc62>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a26      	ldr	r2, [pc, #152]	; (800470c <HAL_DMA_IRQHandler+0xc80>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d03b      	beq.n	80046ee <HAL_DMA_IRQHandler+0xc62>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a25      	ldr	r2, [pc, #148]	; (8004710 <HAL_DMA_IRQHandler+0xc84>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d036      	beq.n	80046ee <HAL_DMA_IRQHandler+0xc62>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a23      	ldr	r2, [pc, #140]	; (8004714 <HAL_DMA_IRQHandler+0xc88>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d031      	beq.n	80046ee <HAL_DMA_IRQHandler+0xc62>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a22      	ldr	r2, [pc, #136]	; (8004718 <HAL_DMA_IRQHandler+0xc8c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d02c      	beq.n	80046ee <HAL_DMA_IRQHandler+0xc62>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a20      	ldr	r2, [pc, #128]	; (800471c <HAL_DMA_IRQHandler+0xc90>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d027      	beq.n	80046ee <HAL_DMA_IRQHandler+0xc62>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a1f      	ldr	r2, [pc, #124]	; (8004720 <HAL_DMA_IRQHandler+0xc94>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d022      	beq.n	80046ee <HAL_DMA_IRQHandler+0xc62>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a1d      	ldr	r2, [pc, #116]	; (8004724 <HAL_DMA_IRQHandler+0xc98>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d01d      	beq.n	80046ee <HAL_DMA_IRQHandler+0xc62>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a1c      	ldr	r2, [pc, #112]	; (8004728 <HAL_DMA_IRQHandler+0xc9c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d018      	beq.n	80046ee <HAL_DMA_IRQHandler+0xc62>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a1a      	ldr	r2, [pc, #104]	; (800472c <HAL_DMA_IRQHandler+0xca0>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d013      	beq.n	80046ee <HAL_DMA_IRQHandler+0xc62>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a19      	ldr	r2, [pc, #100]	; (8004730 <HAL_DMA_IRQHandler+0xca4>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d00e      	beq.n	80046ee <HAL_DMA_IRQHandler+0xc62>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a17      	ldr	r2, [pc, #92]	; (8004734 <HAL_DMA_IRQHandler+0xca8>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d009      	beq.n	80046ee <HAL_DMA_IRQHandler+0xc62>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a16      	ldr	r2, [pc, #88]	; (8004738 <HAL_DMA_IRQHandler+0xcac>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d004      	beq.n	80046ee <HAL_DMA_IRQHandler+0xc62>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a14      	ldr	r2, [pc, #80]	; (800473c <HAL_DMA_IRQHandler+0xcb0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d128      	bne.n	8004740 <HAL_DMA_IRQHandler+0xcb4>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0214 	bic.w	r2, r2, #20
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	e027      	b.n	8004750 <HAL_DMA_IRQHandler+0xcc4>
 8004700:	40020010 	.word	0x40020010
 8004704:	40020028 	.word	0x40020028
 8004708:	40020040 	.word	0x40020040
 800470c:	40020058 	.word	0x40020058
 8004710:	40020070 	.word	0x40020070
 8004714:	40020088 	.word	0x40020088
 8004718:	400200a0 	.word	0x400200a0
 800471c:	400200b8 	.word	0x400200b8
 8004720:	40020410 	.word	0x40020410
 8004724:	40020428 	.word	0x40020428
 8004728:	40020440 	.word	0x40020440
 800472c:	40020458 	.word	0x40020458
 8004730:	40020470 	.word	0x40020470
 8004734:	40020488 	.word	0x40020488
 8004738:	400204a0 	.word	0x400204a0
 800473c:	400204b8 	.word	0x400204b8
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 020a 	bic.w	r2, r2, #10
 800474e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 8097 	beq.w	8004898 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004772:	e091      	b.n	8004898 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004778:	f003 031f 	and.w	r3, r3, #31
 800477c:	2208      	movs	r2, #8
 800477e:	409a      	lsls	r2, r3
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	4013      	ands	r3, r2
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 8088 	beq.w	800489a <HAL_DMA_IRQHandler+0xe0e>
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 8082 	beq.w	800489a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a41      	ldr	r2, [pc, #260]	; (80048a0 <HAL_DMA_IRQHandler+0xe14>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d04a      	beq.n	8004836 <HAL_DMA_IRQHandler+0xdaa>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a3f      	ldr	r2, [pc, #252]	; (80048a4 <HAL_DMA_IRQHandler+0xe18>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d045      	beq.n	8004836 <HAL_DMA_IRQHandler+0xdaa>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a3e      	ldr	r2, [pc, #248]	; (80048a8 <HAL_DMA_IRQHandler+0xe1c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d040      	beq.n	8004836 <HAL_DMA_IRQHandler+0xdaa>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a3c      	ldr	r2, [pc, #240]	; (80048ac <HAL_DMA_IRQHandler+0xe20>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d03b      	beq.n	8004836 <HAL_DMA_IRQHandler+0xdaa>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a3b      	ldr	r2, [pc, #236]	; (80048b0 <HAL_DMA_IRQHandler+0xe24>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d036      	beq.n	8004836 <HAL_DMA_IRQHandler+0xdaa>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a39      	ldr	r2, [pc, #228]	; (80048b4 <HAL_DMA_IRQHandler+0xe28>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d031      	beq.n	8004836 <HAL_DMA_IRQHandler+0xdaa>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a38      	ldr	r2, [pc, #224]	; (80048b8 <HAL_DMA_IRQHandler+0xe2c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d02c      	beq.n	8004836 <HAL_DMA_IRQHandler+0xdaa>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a36      	ldr	r2, [pc, #216]	; (80048bc <HAL_DMA_IRQHandler+0xe30>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d027      	beq.n	8004836 <HAL_DMA_IRQHandler+0xdaa>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a35      	ldr	r2, [pc, #212]	; (80048c0 <HAL_DMA_IRQHandler+0xe34>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d022      	beq.n	8004836 <HAL_DMA_IRQHandler+0xdaa>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a33      	ldr	r2, [pc, #204]	; (80048c4 <HAL_DMA_IRQHandler+0xe38>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d01d      	beq.n	8004836 <HAL_DMA_IRQHandler+0xdaa>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a32      	ldr	r2, [pc, #200]	; (80048c8 <HAL_DMA_IRQHandler+0xe3c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d018      	beq.n	8004836 <HAL_DMA_IRQHandler+0xdaa>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a30      	ldr	r2, [pc, #192]	; (80048cc <HAL_DMA_IRQHandler+0xe40>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d013      	beq.n	8004836 <HAL_DMA_IRQHandler+0xdaa>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a2f      	ldr	r2, [pc, #188]	; (80048d0 <HAL_DMA_IRQHandler+0xe44>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d00e      	beq.n	8004836 <HAL_DMA_IRQHandler+0xdaa>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a2d      	ldr	r2, [pc, #180]	; (80048d4 <HAL_DMA_IRQHandler+0xe48>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d009      	beq.n	8004836 <HAL_DMA_IRQHandler+0xdaa>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a2c      	ldr	r2, [pc, #176]	; (80048d8 <HAL_DMA_IRQHandler+0xe4c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d004      	beq.n	8004836 <HAL_DMA_IRQHandler+0xdaa>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a2a      	ldr	r2, [pc, #168]	; (80048dc <HAL_DMA_IRQHandler+0xe50>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d108      	bne.n	8004848 <HAL_DMA_IRQHandler+0xdbc>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 021c 	bic.w	r2, r2, #28
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	e007      	b.n	8004858 <HAL_DMA_IRQHandler+0xdcc>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 020e 	bic.w	r2, r2, #14
 8004856:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800485c:	f003 031f 	and.w	r3, r3, #31
 8004860:	2201      	movs	r2, #1
 8004862:	409a      	lsls	r2, r3
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004882:	2b00      	cmp	r3, #0
 8004884:	d009      	beq.n	800489a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	4798      	blx	r3
 800488e:	e004      	b.n	800489a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004890:	bf00      	nop
 8004892:	e002      	b.n	800489a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004894:	bf00      	nop
 8004896:	e000      	b.n	800489a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004898:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800489a:	3728      	adds	r7, #40	; 0x28
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40020010 	.word	0x40020010
 80048a4:	40020028 	.word	0x40020028
 80048a8:	40020040 	.word	0x40020040
 80048ac:	40020058 	.word	0x40020058
 80048b0:	40020070 	.word	0x40020070
 80048b4:	40020088 	.word	0x40020088
 80048b8:	400200a0 	.word	0x400200a0
 80048bc:	400200b8 	.word	0x400200b8
 80048c0:	40020410 	.word	0x40020410
 80048c4:	40020428 	.word	0x40020428
 80048c8:	40020440 	.word	0x40020440
 80048cc:	40020458 	.word	0x40020458
 80048d0:	40020470 	.word	0x40020470
 80048d4:	40020488 	.word	0x40020488
 80048d8:	400204a0 	.word	0x400204a0
 80048dc:	400204b8 	.word	0x400204b8

080048e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a7f      	ldr	r2, [pc, #508]	; (8004afc <DMA_SetConfig+0x21c>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d072      	beq.n	80049ea <DMA_SetConfig+0x10a>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a7d      	ldr	r2, [pc, #500]	; (8004b00 <DMA_SetConfig+0x220>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d06d      	beq.n	80049ea <DMA_SetConfig+0x10a>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a7c      	ldr	r2, [pc, #496]	; (8004b04 <DMA_SetConfig+0x224>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d068      	beq.n	80049ea <DMA_SetConfig+0x10a>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a7a      	ldr	r2, [pc, #488]	; (8004b08 <DMA_SetConfig+0x228>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d063      	beq.n	80049ea <DMA_SetConfig+0x10a>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a79      	ldr	r2, [pc, #484]	; (8004b0c <DMA_SetConfig+0x22c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d05e      	beq.n	80049ea <DMA_SetConfig+0x10a>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a77      	ldr	r2, [pc, #476]	; (8004b10 <DMA_SetConfig+0x230>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d059      	beq.n	80049ea <DMA_SetConfig+0x10a>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a76      	ldr	r2, [pc, #472]	; (8004b14 <DMA_SetConfig+0x234>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d054      	beq.n	80049ea <DMA_SetConfig+0x10a>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a74      	ldr	r2, [pc, #464]	; (8004b18 <DMA_SetConfig+0x238>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d04f      	beq.n	80049ea <DMA_SetConfig+0x10a>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a73      	ldr	r2, [pc, #460]	; (8004b1c <DMA_SetConfig+0x23c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d04a      	beq.n	80049ea <DMA_SetConfig+0x10a>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a71      	ldr	r2, [pc, #452]	; (8004b20 <DMA_SetConfig+0x240>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d045      	beq.n	80049ea <DMA_SetConfig+0x10a>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a70      	ldr	r2, [pc, #448]	; (8004b24 <DMA_SetConfig+0x244>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d040      	beq.n	80049ea <DMA_SetConfig+0x10a>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a6e      	ldr	r2, [pc, #440]	; (8004b28 <DMA_SetConfig+0x248>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d03b      	beq.n	80049ea <DMA_SetConfig+0x10a>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a6d      	ldr	r2, [pc, #436]	; (8004b2c <DMA_SetConfig+0x24c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d036      	beq.n	80049ea <DMA_SetConfig+0x10a>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a6b      	ldr	r2, [pc, #428]	; (8004b30 <DMA_SetConfig+0x250>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d031      	beq.n	80049ea <DMA_SetConfig+0x10a>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a6a      	ldr	r2, [pc, #424]	; (8004b34 <DMA_SetConfig+0x254>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d02c      	beq.n	80049ea <DMA_SetConfig+0x10a>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a68      	ldr	r2, [pc, #416]	; (8004b38 <DMA_SetConfig+0x258>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d027      	beq.n	80049ea <DMA_SetConfig+0x10a>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a67      	ldr	r2, [pc, #412]	; (8004b3c <DMA_SetConfig+0x25c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d022      	beq.n	80049ea <DMA_SetConfig+0x10a>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a65      	ldr	r2, [pc, #404]	; (8004b40 <DMA_SetConfig+0x260>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d01d      	beq.n	80049ea <DMA_SetConfig+0x10a>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a64      	ldr	r2, [pc, #400]	; (8004b44 <DMA_SetConfig+0x264>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d018      	beq.n	80049ea <DMA_SetConfig+0x10a>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a62      	ldr	r2, [pc, #392]	; (8004b48 <DMA_SetConfig+0x268>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d013      	beq.n	80049ea <DMA_SetConfig+0x10a>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a61      	ldr	r2, [pc, #388]	; (8004b4c <DMA_SetConfig+0x26c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d00e      	beq.n	80049ea <DMA_SetConfig+0x10a>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a5f      	ldr	r2, [pc, #380]	; (8004b50 <DMA_SetConfig+0x270>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d009      	beq.n	80049ea <DMA_SetConfig+0x10a>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a5e      	ldr	r2, [pc, #376]	; (8004b54 <DMA_SetConfig+0x274>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d004      	beq.n	80049ea <DMA_SetConfig+0x10a>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a5c      	ldr	r2, [pc, #368]	; (8004b58 <DMA_SetConfig+0x278>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d101      	bne.n	80049ee <DMA_SetConfig+0x10e>
 80049ea:	2301      	movs	r3, #1
 80049ec:	e000      	b.n	80049f0 <DMA_SetConfig+0x110>
 80049ee:	2300      	movs	r3, #0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00d      	beq.n	8004a10 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80049fc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d004      	beq.n	8004a10 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004a0e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a39      	ldr	r2, [pc, #228]	; (8004afc <DMA_SetConfig+0x21c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d04a      	beq.n	8004ab0 <DMA_SetConfig+0x1d0>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a38      	ldr	r2, [pc, #224]	; (8004b00 <DMA_SetConfig+0x220>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d045      	beq.n	8004ab0 <DMA_SetConfig+0x1d0>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a36      	ldr	r2, [pc, #216]	; (8004b04 <DMA_SetConfig+0x224>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d040      	beq.n	8004ab0 <DMA_SetConfig+0x1d0>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a35      	ldr	r2, [pc, #212]	; (8004b08 <DMA_SetConfig+0x228>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d03b      	beq.n	8004ab0 <DMA_SetConfig+0x1d0>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a33      	ldr	r2, [pc, #204]	; (8004b0c <DMA_SetConfig+0x22c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d036      	beq.n	8004ab0 <DMA_SetConfig+0x1d0>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a32      	ldr	r2, [pc, #200]	; (8004b10 <DMA_SetConfig+0x230>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d031      	beq.n	8004ab0 <DMA_SetConfig+0x1d0>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a30      	ldr	r2, [pc, #192]	; (8004b14 <DMA_SetConfig+0x234>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d02c      	beq.n	8004ab0 <DMA_SetConfig+0x1d0>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a2f      	ldr	r2, [pc, #188]	; (8004b18 <DMA_SetConfig+0x238>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d027      	beq.n	8004ab0 <DMA_SetConfig+0x1d0>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a2d      	ldr	r2, [pc, #180]	; (8004b1c <DMA_SetConfig+0x23c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d022      	beq.n	8004ab0 <DMA_SetConfig+0x1d0>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a2c      	ldr	r2, [pc, #176]	; (8004b20 <DMA_SetConfig+0x240>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d01d      	beq.n	8004ab0 <DMA_SetConfig+0x1d0>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a2a      	ldr	r2, [pc, #168]	; (8004b24 <DMA_SetConfig+0x244>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d018      	beq.n	8004ab0 <DMA_SetConfig+0x1d0>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a29      	ldr	r2, [pc, #164]	; (8004b28 <DMA_SetConfig+0x248>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d013      	beq.n	8004ab0 <DMA_SetConfig+0x1d0>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a27      	ldr	r2, [pc, #156]	; (8004b2c <DMA_SetConfig+0x24c>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d00e      	beq.n	8004ab0 <DMA_SetConfig+0x1d0>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a26      	ldr	r2, [pc, #152]	; (8004b30 <DMA_SetConfig+0x250>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d009      	beq.n	8004ab0 <DMA_SetConfig+0x1d0>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a24      	ldr	r2, [pc, #144]	; (8004b34 <DMA_SetConfig+0x254>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d004      	beq.n	8004ab0 <DMA_SetConfig+0x1d0>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a23      	ldr	r2, [pc, #140]	; (8004b38 <DMA_SetConfig+0x258>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d101      	bne.n	8004ab4 <DMA_SetConfig+0x1d4>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e000      	b.n	8004ab6 <DMA_SetConfig+0x1d6>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d059      	beq.n	8004b6e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004abe:	f003 031f 	and.w	r3, r3, #31
 8004ac2:	223f      	movs	r2, #63	; 0x3f
 8004ac4:	409a      	lsls	r2, r3
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ad8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2b40      	cmp	r3, #64	; 0x40
 8004ae8:	d138      	bne.n	8004b5c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004afa:	e086      	b.n	8004c0a <DMA_SetConfig+0x32a>
 8004afc:	40020010 	.word	0x40020010
 8004b00:	40020028 	.word	0x40020028
 8004b04:	40020040 	.word	0x40020040
 8004b08:	40020058 	.word	0x40020058
 8004b0c:	40020070 	.word	0x40020070
 8004b10:	40020088 	.word	0x40020088
 8004b14:	400200a0 	.word	0x400200a0
 8004b18:	400200b8 	.word	0x400200b8
 8004b1c:	40020410 	.word	0x40020410
 8004b20:	40020428 	.word	0x40020428
 8004b24:	40020440 	.word	0x40020440
 8004b28:	40020458 	.word	0x40020458
 8004b2c:	40020470 	.word	0x40020470
 8004b30:	40020488 	.word	0x40020488
 8004b34:	400204a0 	.word	0x400204a0
 8004b38:	400204b8 	.word	0x400204b8
 8004b3c:	58025408 	.word	0x58025408
 8004b40:	5802541c 	.word	0x5802541c
 8004b44:	58025430 	.word	0x58025430
 8004b48:	58025444 	.word	0x58025444
 8004b4c:	58025458 	.word	0x58025458
 8004b50:	5802546c 	.word	0x5802546c
 8004b54:	58025480 	.word	0x58025480
 8004b58:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	60da      	str	r2, [r3, #12]
}
 8004b6c:	e04d      	b.n	8004c0a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a29      	ldr	r2, [pc, #164]	; (8004c18 <DMA_SetConfig+0x338>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d022      	beq.n	8004bbe <DMA_SetConfig+0x2de>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a27      	ldr	r2, [pc, #156]	; (8004c1c <DMA_SetConfig+0x33c>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d01d      	beq.n	8004bbe <DMA_SetConfig+0x2de>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a26      	ldr	r2, [pc, #152]	; (8004c20 <DMA_SetConfig+0x340>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d018      	beq.n	8004bbe <DMA_SetConfig+0x2de>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a24      	ldr	r2, [pc, #144]	; (8004c24 <DMA_SetConfig+0x344>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d013      	beq.n	8004bbe <DMA_SetConfig+0x2de>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a23      	ldr	r2, [pc, #140]	; (8004c28 <DMA_SetConfig+0x348>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00e      	beq.n	8004bbe <DMA_SetConfig+0x2de>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a21      	ldr	r2, [pc, #132]	; (8004c2c <DMA_SetConfig+0x34c>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d009      	beq.n	8004bbe <DMA_SetConfig+0x2de>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a20      	ldr	r2, [pc, #128]	; (8004c30 <DMA_SetConfig+0x350>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d004      	beq.n	8004bbe <DMA_SetConfig+0x2de>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a1e      	ldr	r2, [pc, #120]	; (8004c34 <DMA_SetConfig+0x354>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d101      	bne.n	8004bc2 <DMA_SetConfig+0x2e2>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e000      	b.n	8004bc4 <DMA_SetConfig+0x2e4>
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d020      	beq.n	8004c0a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bcc:	f003 031f 	and.w	r3, r3, #31
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	409a      	lsls	r2, r3
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	2b40      	cmp	r3, #64	; 0x40
 8004be6:	d108      	bne.n	8004bfa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	60da      	str	r2, [r3, #12]
}
 8004bf8:	e007      	b.n	8004c0a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	60da      	str	r2, [r3, #12]
}
 8004c0a:	bf00      	nop
 8004c0c:	371c      	adds	r7, #28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	58025408 	.word	0x58025408
 8004c1c:	5802541c 	.word	0x5802541c
 8004c20:	58025430 	.word	0x58025430
 8004c24:	58025444 	.word	0x58025444
 8004c28:	58025458 	.word	0x58025458
 8004c2c:	5802546c 	.word	0x5802546c
 8004c30:	58025480 	.word	0x58025480
 8004c34:	58025494 	.word	0x58025494

08004c38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a42      	ldr	r2, [pc, #264]	; (8004d50 <DMA_CalcBaseAndBitshift+0x118>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d04a      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a41      	ldr	r2, [pc, #260]	; (8004d54 <DMA_CalcBaseAndBitshift+0x11c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d045      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a3f      	ldr	r2, [pc, #252]	; (8004d58 <DMA_CalcBaseAndBitshift+0x120>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d040      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a3e      	ldr	r2, [pc, #248]	; (8004d5c <DMA_CalcBaseAndBitshift+0x124>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d03b      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a3c      	ldr	r2, [pc, #240]	; (8004d60 <DMA_CalcBaseAndBitshift+0x128>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d036      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a3b      	ldr	r2, [pc, #236]	; (8004d64 <DMA_CalcBaseAndBitshift+0x12c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d031      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a39      	ldr	r2, [pc, #228]	; (8004d68 <DMA_CalcBaseAndBitshift+0x130>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d02c      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a38      	ldr	r2, [pc, #224]	; (8004d6c <DMA_CalcBaseAndBitshift+0x134>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d027      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a36      	ldr	r2, [pc, #216]	; (8004d70 <DMA_CalcBaseAndBitshift+0x138>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d022      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a35      	ldr	r2, [pc, #212]	; (8004d74 <DMA_CalcBaseAndBitshift+0x13c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d01d      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a33      	ldr	r2, [pc, #204]	; (8004d78 <DMA_CalcBaseAndBitshift+0x140>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d018      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a32      	ldr	r2, [pc, #200]	; (8004d7c <DMA_CalcBaseAndBitshift+0x144>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d013      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a30      	ldr	r2, [pc, #192]	; (8004d80 <DMA_CalcBaseAndBitshift+0x148>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00e      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a2f      	ldr	r2, [pc, #188]	; (8004d84 <DMA_CalcBaseAndBitshift+0x14c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d009      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a2d      	ldr	r2, [pc, #180]	; (8004d88 <DMA_CalcBaseAndBitshift+0x150>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d004      	beq.n	8004ce0 <DMA_CalcBaseAndBitshift+0xa8>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a2c      	ldr	r2, [pc, #176]	; (8004d8c <DMA_CalcBaseAndBitshift+0x154>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d101      	bne.n	8004ce4 <DMA_CalcBaseAndBitshift+0xac>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e000      	b.n	8004ce6 <DMA_CalcBaseAndBitshift+0xae>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d024      	beq.n	8004d34 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	3b10      	subs	r3, #16
 8004cf2:	4a27      	ldr	r2, [pc, #156]	; (8004d90 <DMA_CalcBaseAndBitshift+0x158>)
 8004cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf8:	091b      	lsrs	r3, r3, #4
 8004cfa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	4a24      	ldr	r2, [pc, #144]	; (8004d94 <DMA_CalcBaseAndBitshift+0x15c>)
 8004d04:	5cd3      	ldrb	r3, [r2, r3]
 8004d06:	461a      	mov	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d908      	bls.n	8004d24 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	461a      	mov	r2, r3
 8004d18:	4b1f      	ldr	r3, [pc, #124]	; (8004d98 <DMA_CalcBaseAndBitshift+0x160>)
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	1d1a      	adds	r2, r3, #4
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	659a      	str	r2, [r3, #88]	; 0x58
 8004d22:	e00d      	b.n	8004d40 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	4b1b      	ldr	r3, [pc, #108]	; (8004d98 <DMA_CalcBaseAndBitshift+0x160>)
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6593      	str	r3, [r2, #88]	; 0x58
 8004d32:	e005      	b.n	8004d40 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	40020010 	.word	0x40020010
 8004d54:	40020028 	.word	0x40020028
 8004d58:	40020040 	.word	0x40020040
 8004d5c:	40020058 	.word	0x40020058
 8004d60:	40020070 	.word	0x40020070
 8004d64:	40020088 	.word	0x40020088
 8004d68:	400200a0 	.word	0x400200a0
 8004d6c:	400200b8 	.word	0x400200b8
 8004d70:	40020410 	.word	0x40020410
 8004d74:	40020428 	.word	0x40020428
 8004d78:	40020440 	.word	0x40020440
 8004d7c:	40020458 	.word	0x40020458
 8004d80:	40020470 	.word	0x40020470
 8004d84:	40020488 	.word	0x40020488
 8004d88:	400204a0 	.word	0x400204a0
 8004d8c:	400204b8 	.word	0x400204b8
 8004d90:	aaaaaaab 	.word	0xaaaaaaab
 8004d94:	080095c4 	.word	0x080095c4
 8004d98:	fffffc00 	.word	0xfffffc00

08004d9c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004da4:	2300      	movs	r3, #0
 8004da6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d120      	bne.n	8004df2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d858      	bhi.n	8004e6a <DMA_CheckFifoParam+0xce>
 8004db8:	a201      	add	r2, pc, #4	; (adr r2, 8004dc0 <DMA_CheckFifoParam+0x24>)
 8004dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbe:	bf00      	nop
 8004dc0:	08004dd1 	.word	0x08004dd1
 8004dc4:	08004de3 	.word	0x08004de3
 8004dc8:	08004dd1 	.word	0x08004dd1
 8004dcc:	08004e6b 	.word	0x08004e6b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d048      	beq.n	8004e6e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004de0:	e045      	b.n	8004e6e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004dea:	d142      	bne.n	8004e72 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004df0:	e03f      	b.n	8004e72 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dfa:	d123      	bne.n	8004e44 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d838      	bhi.n	8004e76 <DMA_CheckFifoParam+0xda>
 8004e04:	a201      	add	r2, pc, #4	; (adr r2, 8004e0c <DMA_CheckFifoParam+0x70>)
 8004e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0a:	bf00      	nop
 8004e0c:	08004e1d 	.word	0x08004e1d
 8004e10:	08004e23 	.word	0x08004e23
 8004e14:	08004e1d 	.word	0x08004e1d
 8004e18:	08004e35 	.word	0x08004e35
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	73fb      	strb	r3, [r7, #15]
        break;
 8004e20:	e030      	b.n	8004e84 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d025      	beq.n	8004e7a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e32:	e022      	b.n	8004e7a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e3c:	d11f      	bne.n	8004e7e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e42:	e01c      	b.n	8004e7e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d902      	bls.n	8004e52 <DMA_CheckFifoParam+0xb6>
 8004e4c:	2b03      	cmp	r3, #3
 8004e4e:	d003      	beq.n	8004e58 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004e50:	e018      	b.n	8004e84 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	73fb      	strb	r3, [r7, #15]
        break;
 8004e56:	e015      	b.n	8004e84 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00e      	beq.n	8004e82 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	73fb      	strb	r3, [r7, #15]
    break;
 8004e68:	e00b      	b.n	8004e82 <DMA_CheckFifoParam+0xe6>
        break;
 8004e6a:	bf00      	nop
 8004e6c:	e00a      	b.n	8004e84 <DMA_CheckFifoParam+0xe8>
        break;
 8004e6e:	bf00      	nop
 8004e70:	e008      	b.n	8004e84 <DMA_CheckFifoParam+0xe8>
        break;
 8004e72:	bf00      	nop
 8004e74:	e006      	b.n	8004e84 <DMA_CheckFifoParam+0xe8>
        break;
 8004e76:	bf00      	nop
 8004e78:	e004      	b.n	8004e84 <DMA_CheckFifoParam+0xe8>
        break;
 8004e7a:	bf00      	nop
 8004e7c:	e002      	b.n	8004e84 <DMA_CheckFifoParam+0xe8>
        break;
 8004e7e:	bf00      	nop
 8004e80:	e000      	b.n	8004e84 <DMA_CheckFifoParam+0xe8>
    break;
 8004e82:	bf00      	nop
    }
  }

  return status;
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop

08004e94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a38      	ldr	r2, [pc, #224]	; (8004f88 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d022      	beq.n	8004ef2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a36      	ldr	r2, [pc, #216]	; (8004f8c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d01d      	beq.n	8004ef2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a35      	ldr	r2, [pc, #212]	; (8004f90 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d018      	beq.n	8004ef2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a33      	ldr	r2, [pc, #204]	; (8004f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d013      	beq.n	8004ef2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a32      	ldr	r2, [pc, #200]	; (8004f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d00e      	beq.n	8004ef2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a30      	ldr	r2, [pc, #192]	; (8004f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d009      	beq.n	8004ef2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a2f      	ldr	r2, [pc, #188]	; (8004fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d004      	beq.n	8004ef2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a2d      	ldr	r2, [pc, #180]	; (8004fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d101      	bne.n	8004ef6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e000      	b.n	8004ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01a      	beq.n	8004f32 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	3b08      	subs	r3, #8
 8004f04:	4a28      	ldr	r2, [pc, #160]	; (8004fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f06:	fba2 2303 	umull	r2, r3, r2, r3
 8004f0a:	091b      	lsrs	r3, r3, #4
 8004f0c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4b26      	ldr	r3, [pc, #152]	; (8004fac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004f12:	4413      	add	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	461a      	mov	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a24      	ldr	r2, [pc, #144]	; (8004fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004f20:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f003 031f 	and.w	r3, r3, #31
 8004f28:	2201      	movs	r2, #1
 8004f2a:	409a      	lsls	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004f30:	e024      	b.n	8004f7c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	3b10      	subs	r3, #16
 8004f3a:	4a1e      	ldr	r2, [pc, #120]	; (8004fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f40:	091b      	lsrs	r3, r3, #4
 8004f42:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	4a1c      	ldr	r2, [pc, #112]	; (8004fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d806      	bhi.n	8004f5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	4a1b      	ldr	r2, [pc, #108]	; (8004fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d902      	bls.n	8004f5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	3308      	adds	r3, #8
 8004f58:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4b18      	ldr	r3, [pc, #96]	; (8004fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004f5e:	4413      	add	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	461a      	mov	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a16      	ldr	r2, [pc, #88]	; (8004fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004f6c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f003 031f 	and.w	r3, r3, #31
 8004f74:	2201      	movs	r2, #1
 8004f76:	409a      	lsls	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004f7c:	bf00      	nop
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr
 8004f88:	58025408 	.word	0x58025408
 8004f8c:	5802541c 	.word	0x5802541c
 8004f90:	58025430 	.word	0x58025430
 8004f94:	58025444 	.word	0x58025444
 8004f98:	58025458 	.word	0x58025458
 8004f9c:	5802546c 	.word	0x5802546c
 8004fa0:	58025480 	.word	0x58025480
 8004fa4:	58025494 	.word	0x58025494
 8004fa8:	cccccccd 	.word	0xcccccccd
 8004fac:	16009600 	.word	0x16009600
 8004fb0:	58025880 	.word	0x58025880
 8004fb4:	aaaaaaab 	.word	0xaaaaaaab
 8004fb8:	400204b8 	.word	0x400204b8
 8004fbc:	4002040f 	.word	0x4002040f
 8004fc0:	10008200 	.word	0x10008200
 8004fc4:	40020880 	.word	0x40020880

08004fc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d04a      	beq.n	8005074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	d847      	bhi.n	8005074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a25      	ldr	r2, [pc, #148]	; (8005080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d022      	beq.n	8005034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a24      	ldr	r2, [pc, #144]	; (8005084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d01d      	beq.n	8005034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a22      	ldr	r2, [pc, #136]	; (8005088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d018      	beq.n	8005034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a21      	ldr	r2, [pc, #132]	; (800508c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d013      	beq.n	8005034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a1f      	ldr	r2, [pc, #124]	; (8005090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d00e      	beq.n	8005034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a1e      	ldr	r2, [pc, #120]	; (8005094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d009      	beq.n	8005034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a1c      	ldr	r2, [pc, #112]	; (8005098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d004      	beq.n	8005034 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a1b      	ldr	r2, [pc, #108]	; (800509c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d101      	bne.n	8005038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005034:	2301      	movs	r3, #1
 8005036:	e000      	b.n	800503a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005038:	2300      	movs	r3, #0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	4b17      	ldr	r3, [pc, #92]	; (80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005042:	4413      	add	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	461a      	mov	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a15      	ldr	r2, [pc, #84]	; (80050a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005050:	671a      	str	r2, [r3, #112]	; 0x70
 8005052:	e009      	b.n	8005068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	4b14      	ldr	r3, [pc, #80]	; (80050a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005058:	4413      	add	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	461a      	mov	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a11      	ldr	r2, [pc, #68]	; (80050ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005066:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	3b01      	subs	r3, #1
 800506c:	2201      	movs	r2, #1
 800506e:	409a      	lsls	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005074:	bf00      	nop
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	58025408 	.word	0x58025408
 8005084:	5802541c 	.word	0x5802541c
 8005088:	58025430 	.word	0x58025430
 800508c:	58025444 	.word	0x58025444
 8005090:	58025458 	.word	0x58025458
 8005094:	5802546c 	.word	0x5802546c
 8005098:	58025480 	.word	0x58025480
 800509c:	58025494 	.word	0x58025494
 80050a0:	1600963f 	.word	0x1600963f
 80050a4:	58025940 	.word	0x58025940
 80050a8:	1000823f 	.word	0x1000823f
 80050ac:	40020940 	.word	0x40020940

080050b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b089      	sub	sp, #36	; 0x24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80050be:	4b89      	ldr	r3, [pc, #548]	; (80052e4 <HAL_GPIO_Init+0x234>)
 80050c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050c2:	e194      	b.n	80053ee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	2101      	movs	r1, #1
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	fa01 f303 	lsl.w	r3, r1, r3
 80050d0:	4013      	ands	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f000 8186 	beq.w	80053e8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f003 0303 	and.w	r3, r3, #3
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d005      	beq.n	80050f4 <HAL_GPIO_Init+0x44>
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f003 0303 	and.w	r3, r3, #3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d130      	bne.n	8005156 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	2203      	movs	r2, #3
 8005100:	fa02 f303 	lsl.w	r3, r2, r3
 8005104:	43db      	mvns	r3, r3
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	4013      	ands	r3, r2
 800510a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	68da      	ldr	r2, [r3, #12]
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	005b      	lsls	r3, r3, #1
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	4313      	orrs	r3, r2
 800511c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800512a:	2201      	movs	r2, #1
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	fa02 f303 	lsl.w	r3, r2, r3
 8005132:	43db      	mvns	r3, r3
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	4013      	ands	r3, r2
 8005138:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	091b      	lsrs	r3, r3, #4
 8005140:	f003 0201 	and.w	r2, r3, #1
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	fa02 f303 	lsl.w	r3, r2, r3
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	4313      	orrs	r3, r2
 800514e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f003 0303 	and.w	r3, r3, #3
 800515e:	2b03      	cmp	r3, #3
 8005160:	d017      	beq.n	8005192 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	005b      	lsls	r3, r3, #1
 800516c:	2203      	movs	r2, #3
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	43db      	mvns	r3, r3
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	4013      	ands	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	fa02 f303 	lsl.w	r3, r2, r3
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	4313      	orrs	r3, r2
 800518a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f003 0303 	and.w	r3, r3, #3
 800519a:	2b02      	cmp	r3, #2
 800519c:	d123      	bne.n	80051e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	08da      	lsrs	r2, r3, #3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	3208      	adds	r2, #8
 80051a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	f003 0307 	and.w	r3, r3, #7
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	220f      	movs	r2, #15
 80051b6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ba:	43db      	mvns	r3, r3
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	4013      	ands	r3, r2
 80051c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	691a      	ldr	r2, [r3, #16]
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	fa02 f303 	lsl.w	r3, r2, r3
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	08da      	lsrs	r2, r3, #3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3208      	adds	r2, #8
 80051e0:	69b9      	ldr	r1, [r7, #24]
 80051e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	2203      	movs	r2, #3
 80051f2:	fa02 f303 	lsl.w	r3, r2, r3
 80051f6:	43db      	mvns	r3, r3
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	4013      	ands	r3, r2
 80051fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f003 0203 	and.w	r2, r3, #3
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	fa02 f303 	lsl.w	r3, r2, r3
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	4313      	orrs	r3, r2
 8005212:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 80e0 	beq.w	80053e8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005228:	4b2f      	ldr	r3, [pc, #188]	; (80052e8 <HAL_GPIO_Init+0x238>)
 800522a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800522e:	4a2e      	ldr	r2, [pc, #184]	; (80052e8 <HAL_GPIO_Init+0x238>)
 8005230:	f043 0302 	orr.w	r3, r3, #2
 8005234:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005238:	4b2b      	ldr	r3, [pc, #172]	; (80052e8 <HAL_GPIO_Init+0x238>)
 800523a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005246:	4a29      	ldr	r2, [pc, #164]	; (80052ec <HAL_GPIO_Init+0x23c>)
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	089b      	lsrs	r3, r3, #2
 800524c:	3302      	adds	r3, #2
 800524e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	f003 0303 	and.w	r3, r3, #3
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	220f      	movs	r2, #15
 800525e:	fa02 f303 	lsl.w	r3, r2, r3
 8005262:	43db      	mvns	r3, r3
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	4013      	ands	r3, r2
 8005268:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a20      	ldr	r2, [pc, #128]	; (80052f0 <HAL_GPIO_Init+0x240>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d052      	beq.n	8005318 <HAL_GPIO_Init+0x268>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a1f      	ldr	r2, [pc, #124]	; (80052f4 <HAL_GPIO_Init+0x244>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d031      	beq.n	80052de <HAL_GPIO_Init+0x22e>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a1e      	ldr	r2, [pc, #120]	; (80052f8 <HAL_GPIO_Init+0x248>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d02b      	beq.n	80052da <HAL_GPIO_Init+0x22a>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a1d      	ldr	r2, [pc, #116]	; (80052fc <HAL_GPIO_Init+0x24c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d025      	beq.n	80052d6 <HAL_GPIO_Init+0x226>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a1c      	ldr	r2, [pc, #112]	; (8005300 <HAL_GPIO_Init+0x250>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d01f      	beq.n	80052d2 <HAL_GPIO_Init+0x222>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a1b      	ldr	r2, [pc, #108]	; (8005304 <HAL_GPIO_Init+0x254>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d019      	beq.n	80052ce <HAL_GPIO_Init+0x21e>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a1a      	ldr	r2, [pc, #104]	; (8005308 <HAL_GPIO_Init+0x258>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d013      	beq.n	80052ca <HAL_GPIO_Init+0x21a>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a19      	ldr	r2, [pc, #100]	; (800530c <HAL_GPIO_Init+0x25c>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d00d      	beq.n	80052c6 <HAL_GPIO_Init+0x216>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a18      	ldr	r2, [pc, #96]	; (8005310 <HAL_GPIO_Init+0x260>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d007      	beq.n	80052c2 <HAL_GPIO_Init+0x212>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a17      	ldr	r2, [pc, #92]	; (8005314 <HAL_GPIO_Init+0x264>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d101      	bne.n	80052be <HAL_GPIO_Init+0x20e>
 80052ba:	2309      	movs	r3, #9
 80052bc:	e02d      	b.n	800531a <HAL_GPIO_Init+0x26a>
 80052be:	230a      	movs	r3, #10
 80052c0:	e02b      	b.n	800531a <HAL_GPIO_Init+0x26a>
 80052c2:	2308      	movs	r3, #8
 80052c4:	e029      	b.n	800531a <HAL_GPIO_Init+0x26a>
 80052c6:	2307      	movs	r3, #7
 80052c8:	e027      	b.n	800531a <HAL_GPIO_Init+0x26a>
 80052ca:	2306      	movs	r3, #6
 80052cc:	e025      	b.n	800531a <HAL_GPIO_Init+0x26a>
 80052ce:	2305      	movs	r3, #5
 80052d0:	e023      	b.n	800531a <HAL_GPIO_Init+0x26a>
 80052d2:	2304      	movs	r3, #4
 80052d4:	e021      	b.n	800531a <HAL_GPIO_Init+0x26a>
 80052d6:	2303      	movs	r3, #3
 80052d8:	e01f      	b.n	800531a <HAL_GPIO_Init+0x26a>
 80052da:	2302      	movs	r3, #2
 80052dc:	e01d      	b.n	800531a <HAL_GPIO_Init+0x26a>
 80052de:	2301      	movs	r3, #1
 80052e0:	e01b      	b.n	800531a <HAL_GPIO_Init+0x26a>
 80052e2:	bf00      	nop
 80052e4:	58000080 	.word	0x58000080
 80052e8:	58024400 	.word	0x58024400
 80052ec:	58000400 	.word	0x58000400
 80052f0:	58020000 	.word	0x58020000
 80052f4:	58020400 	.word	0x58020400
 80052f8:	58020800 	.word	0x58020800
 80052fc:	58020c00 	.word	0x58020c00
 8005300:	58021000 	.word	0x58021000
 8005304:	58021400 	.word	0x58021400
 8005308:	58021800 	.word	0x58021800
 800530c:	58021c00 	.word	0x58021c00
 8005310:	58022000 	.word	0x58022000
 8005314:	58022400 	.word	0x58022400
 8005318:	2300      	movs	r3, #0
 800531a:	69fa      	ldr	r2, [r7, #28]
 800531c:	f002 0203 	and.w	r2, r2, #3
 8005320:	0092      	lsls	r2, r2, #2
 8005322:	4093      	lsls	r3, r2
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	4313      	orrs	r3, r2
 8005328:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800532a:	4938      	ldr	r1, [pc, #224]	; (800540c <HAL_GPIO_Init+0x35c>)
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	089b      	lsrs	r3, r3, #2
 8005330:	3302      	adds	r3, #2
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	43db      	mvns	r3, r3
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	4013      	ands	r3, r2
 8005348:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	4313      	orrs	r3, r2
 800535c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800535e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	43db      	mvns	r3, r3
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	4013      	ands	r3, r2
 8005376:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	4313      	orrs	r3, r2
 800538a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800538c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	43db      	mvns	r3, r3
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	4013      	ands	r3, r2
 80053a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	43db      	mvns	r3, r3
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	4013      	ands	r3, r2
 80053cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	4313      	orrs	r3, r2
 80053e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	3301      	adds	r3, #1
 80053ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	fa22 f303 	lsr.w	r3, r2, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f47f ae63 	bne.w	80050c4 <HAL_GPIO_Init+0x14>
  }
}
 80053fe:	bf00      	nop
 8005400:	bf00      	nop
 8005402:	3724      	adds	r7, #36	; 0x24
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	58000400 	.word	0x58000400

08005410 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005418:	4b19      	ldr	r3, [pc, #100]	; (8005480 <HAL_PWREx_ConfigSupply+0x70>)
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b04      	cmp	r3, #4
 8005422:	d00a      	beq.n	800543a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005424:	4b16      	ldr	r3, [pc, #88]	; (8005480 <HAL_PWREx_ConfigSupply+0x70>)
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	429a      	cmp	r2, r3
 8005430:	d001      	beq.n	8005436 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e01f      	b.n	8005476 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005436:	2300      	movs	r3, #0
 8005438:	e01d      	b.n	8005476 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800543a:	4b11      	ldr	r3, [pc, #68]	; (8005480 <HAL_PWREx_ConfigSupply+0x70>)
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f023 0207 	bic.w	r2, r3, #7
 8005442:	490f      	ldr	r1, [pc, #60]	; (8005480 <HAL_PWREx_ConfigSupply+0x70>)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4313      	orrs	r3, r2
 8005448:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800544a:	f7fb fcf5 	bl	8000e38 <HAL_GetTick>
 800544e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005450:	e009      	b.n	8005466 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005452:	f7fb fcf1 	bl	8000e38 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005460:	d901      	bls.n	8005466 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e007      	b.n	8005476 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005466:	4b06      	ldr	r3, [pc, #24]	; (8005480 <HAL_PWREx_ConfigSupply+0x70>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800546e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005472:	d1ee      	bne.n	8005452 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	58024800 	.word	0x58024800

08005484 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b08c      	sub	sp, #48	; 0x30
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d102      	bne.n	8005498 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	f000 bc48 	b.w	8005d28 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 8088 	beq.w	80055b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054a6:	4b99      	ldr	r3, [pc, #612]	; (800570c <HAL_RCC_OscConfig+0x288>)
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80054b0:	4b96      	ldr	r3, [pc, #600]	; (800570c <HAL_RCC_OscConfig+0x288>)
 80054b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80054b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b8:	2b10      	cmp	r3, #16
 80054ba:	d007      	beq.n	80054cc <HAL_RCC_OscConfig+0x48>
 80054bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054be:	2b18      	cmp	r3, #24
 80054c0:	d111      	bne.n	80054e6 <HAL_RCC_OscConfig+0x62>
 80054c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c4:	f003 0303 	and.w	r3, r3, #3
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d10c      	bne.n	80054e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054cc:	4b8f      	ldr	r3, [pc, #572]	; (800570c <HAL_RCC_OscConfig+0x288>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d06d      	beq.n	80055b4 <HAL_RCC_OscConfig+0x130>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d169      	bne.n	80055b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	f000 bc21 	b.w	8005d28 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ee:	d106      	bne.n	80054fe <HAL_RCC_OscConfig+0x7a>
 80054f0:	4b86      	ldr	r3, [pc, #536]	; (800570c <HAL_RCC_OscConfig+0x288>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a85      	ldr	r2, [pc, #532]	; (800570c <HAL_RCC_OscConfig+0x288>)
 80054f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054fa:	6013      	str	r3, [r2, #0]
 80054fc:	e02e      	b.n	800555c <HAL_RCC_OscConfig+0xd8>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10c      	bne.n	8005520 <HAL_RCC_OscConfig+0x9c>
 8005506:	4b81      	ldr	r3, [pc, #516]	; (800570c <HAL_RCC_OscConfig+0x288>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a80      	ldr	r2, [pc, #512]	; (800570c <HAL_RCC_OscConfig+0x288>)
 800550c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005510:	6013      	str	r3, [r2, #0]
 8005512:	4b7e      	ldr	r3, [pc, #504]	; (800570c <HAL_RCC_OscConfig+0x288>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a7d      	ldr	r2, [pc, #500]	; (800570c <HAL_RCC_OscConfig+0x288>)
 8005518:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800551c:	6013      	str	r3, [r2, #0]
 800551e:	e01d      	b.n	800555c <HAL_RCC_OscConfig+0xd8>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005528:	d10c      	bne.n	8005544 <HAL_RCC_OscConfig+0xc0>
 800552a:	4b78      	ldr	r3, [pc, #480]	; (800570c <HAL_RCC_OscConfig+0x288>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a77      	ldr	r2, [pc, #476]	; (800570c <HAL_RCC_OscConfig+0x288>)
 8005530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	4b75      	ldr	r3, [pc, #468]	; (800570c <HAL_RCC_OscConfig+0x288>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a74      	ldr	r2, [pc, #464]	; (800570c <HAL_RCC_OscConfig+0x288>)
 800553c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005540:	6013      	str	r3, [r2, #0]
 8005542:	e00b      	b.n	800555c <HAL_RCC_OscConfig+0xd8>
 8005544:	4b71      	ldr	r3, [pc, #452]	; (800570c <HAL_RCC_OscConfig+0x288>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a70      	ldr	r2, [pc, #448]	; (800570c <HAL_RCC_OscConfig+0x288>)
 800554a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	4b6e      	ldr	r3, [pc, #440]	; (800570c <HAL_RCC_OscConfig+0x288>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a6d      	ldr	r2, [pc, #436]	; (800570c <HAL_RCC_OscConfig+0x288>)
 8005556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800555a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d013      	beq.n	800558c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005564:	f7fb fc68 	bl	8000e38 <HAL_GetTick>
 8005568:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800556a:	e008      	b.n	800557e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800556c:	f7fb fc64 	bl	8000e38 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b64      	cmp	r3, #100	; 0x64
 8005578:	d901      	bls.n	800557e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e3d4      	b.n	8005d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800557e:	4b63      	ldr	r3, [pc, #396]	; (800570c <HAL_RCC_OscConfig+0x288>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0f0      	beq.n	800556c <HAL_RCC_OscConfig+0xe8>
 800558a:	e014      	b.n	80055b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800558c:	f7fb fc54 	bl	8000e38 <HAL_GetTick>
 8005590:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005592:	e008      	b.n	80055a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005594:	f7fb fc50 	bl	8000e38 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b64      	cmp	r3, #100	; 0x64
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e3c0      	b.n	8005d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80055a6:	4b59      	ldr	r3, [pc, #356]	; (800570c <HAL_RCC_OscConfig+0x288>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1f0      	bne.n	8005594 <HAL_RCC_OscConfig+0x110>
 80055b2:	e000      	b.n	80055b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 80ca 	beq.w	8005758 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055c4:	4b51      	ldr	r3, [pc, #324]	; (800570c <HAL_RCC_OscConfig+0x288>)
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80055ce:	4b4f      	ldr	r3, [pc, #316]	; (800570c <HAL_RCC_OscConfig+0x288>)
 80055d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d007      	beq.n	80055ea <HAL_RCC_OscConfig+0x166>
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	2b18      	cmp	r3, #24
 80055de:	d156      	bne.n	800568e <HAL_RCC_OscConfig+0x20a>
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d151      	bne.n	800568e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055ea:	4b48      	ldr	r3, [pc, #288]	; (800570c <HAL_RCC_OscConfig+0x288>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0304 	and.w	r3, r3, #4
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d005      	beq.n	8005602 <HAL_RCC_OscConfig+0x17e>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e392      	b.n	8005d28 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005602:	4b42      	ldr	r3, [pc, #264]	; (800570c <HAL_RCC_OscConfig+0x288>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f023 0219 	bic.w	r2, r3, #25
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	493f      	ldr	r1, [pc, #252]	; (800570c <HAL_RCC_OscConfig+0x288>)
 8005610:	4313      	orrs	r3, r2
 8005612:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005614:	f7fb fc10 	bl	8000e38 <HAL_GetTick>
 8005618:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800561a:	e008      	b.n	800562e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800561c:	f7fb fc0c 	bl	8000e38 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e37c      	b.n	8005d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800562e:	4b37      	ldr	r3, [pc, #220]	; (800570c <HAL_RCC_OscConfig+0x288>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0304 	and.w	r3, r3, #4
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0f0      	beq.n	800561c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800563a:	f7fb fc2d 	bl	8000e98 <HAL_GetREVID>
 800563e:	4603      	mov	r3, r0
 8005640:	f241 0203 	movw	r2, #4099	; 0x1003
 8005644:	4293      	cmp	r3, r2
 8005646:	d817      	bhi.n	8005678 <HAL_RCC_OscConfig+0x1f4>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	2b40      	cmp	r3, #64	; 0x40
 800564e:	d108      	bne.n	8005662 <HAL_RCC_OscConfig+0x1de>
 8005650:	4b2e      	ldr	r3, [pc, #184]	; (800570c <HAL_RCC_OscConfig+0x288>)
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005658:	4a2c      	ldr	r2, [pc, #176]	; (800570c <HAL_RCC_OscConfig+0x288>)
 800565a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800565e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005660:	e07a      	b.n	8005758 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005662:	4b2a      	ldr	r3, [pc, #168]	; (800570c <HAL_RCC_OscConfig+0x288>)
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	031b      	lsls	r3, r3, #12
 8005670:	4926      	ldr	r1, [pc, #152]	; (800570c <HAL_RCC_OscConfig+0x288>)
 8005672:	4313      	orrs	r3, r2
 8005674:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005676:	e06f      	b.n	8005758 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005678:	4b24      	ldr	r3, [pc, #144]	; (800570c <HAL_RCC_OscConfig+0x288>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	061b      	lsls	r3, r3, #24
 8005686:	4921      	ldr	r1, [pc, #132]	; (800570c <HAL_RCC_OscConfig+0x288>)
 8005688:	4313      	orrs	r3, r2
 800568a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800568c:	e064      	b.n	8005758 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d047      	beq.n	8005726 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005696:	4b1d      	ldr	r3, [pc, #116]	; (800570c <HAL_RCC_OscConfig+0x288>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f023 0219 	bic.w	r2, r3, #25
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	491a      	ldr	r1, [pc, #104]	; (800570c <HAL_RCC_OscConfig+0x288>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a8:	f7fb fbc6 	bl	8000e38 <HAL_GetTick>
 80056ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056ae:	e008      	b.n	80056c2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056b0:	f7fb fbc2 	bl	8000e38 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e332      	b.n	8005d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056c2:	4b12      	ldr	r3, [pc, #72]	; (800570c <HAL_RCC_OscConfig+0x288>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0304 	and.w	r3, r3, #4
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0f0      	beq.n	80056b0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ce:	f7fb fbe3 	bl	8000e98 <HAL_GetREVID>
 80056d2:	4603      	mov	r3, r0
 80056d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80056d8:	4293      	cmp	r3, r2
 80056da:	d819      	bhi.n	8005710 <HAL_RCC_OscConfig+0x28c>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	2b40      	cmp	r3, #64	; 0x40
 80056e2:	d108      	bne.n	80056f6 <HAL_RCC_OscConfig+0x272>
 80056e4:	4b09      	ldr	r3, [pc, #36]	; (800570c <HAL_RCC_OscConfig+0x288>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80056ec:	4a07      	ldr	r2, [pc, #28]	; (800570c <HAL_RCC_OscConfig+0x288>)
 80056ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056f2:	6053      	str	r3, [r2, #4]
 80056f4:	e030      	b.n	8005758 <HAL_RCC_OscConfig+0x2d4>
 80056f6:	4b05      	ldr	r3, [pc, #20]	; (800570c <HAL_RCC_OscConfig+0x288>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	031b      	lsls	r3, r3, #12
 8005704:	4901      	ldr	r1, [pc, #4]	; (800570c <HAL_RCC_OscConfig+0x288>)
 8005706:	4313      	orrs	r3, r2
 8005708:	604b      	str	r3, [r1, #4]
 800570a:	e025      	b.n	8005758 <HAL_RCC_OscConfig+0x2d4>
 800570c:	58024400 	.word	0x58024400
 8005710:	4b9a      	ldr	r3, [pc, #616]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	061b      	lsls	r3, r3, #24
 800571e:	4997      	ldr	r1, [pc, #604]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 8005720:	4313      	orrs	r3, r2
 8005722:	604b      	str	r3, [r1, #4]
 8005724:	e018      	b.n	8005758 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005726:	4b95      	ldr	r3, [pc, #596]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a94      	ldr	r2, [pc, #592]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 800572c:	f023 0301 	bic.w	r3, r3, #1
 8005730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005732:	f7fb fb81 	bl	8000e38 <HAL_GetTick>
 8005736:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005738:	e008      	b.n	800574c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800573a:	f7fb fb7d 	bl	8000e38 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d901      	bls.n	800574c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e2ed      	b.n	8005d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800574c:	4b8b      	ldr	r3, [pc, #556]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1f0      	bne.n	800573a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0310 	and.w	r3, r3, #16
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 80a9 	beq.w	80058b8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005766:	4b85      	ldr	r3, [pc, #532]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800576e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005770:	4b82      	ldr	r3, [pc, #520]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 8005772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005774:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	2b08      	cmp	r3, #8
 800577a:	d007      	beq.n	800578c <HAL_RCC_OscConfig+0x308>
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	2b18      	cmp	r3, #24
 8005780:	d13a      	bne.n	80057f8 <HAL_RCC_OscConfig+0x374>
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f003 0303 	and.w	r3, r3, #3
 8005788:	2b01      	cmp	r3, #1
 800578a:	d135      	bne.n	80057f8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800578c:	4b7b      	ldr	r3, [pc, #492]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005794:	2b00      	cmp	r3, #0
 8005796:	d005      	beq.n	80057a4 <HAL_RCC_OscConfig+0x320>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	69db      	ldr	r3, [r3, #28]
 800579c:	2b80      	cmp	r3, #128	; 0x80
 800579e:	d001      	beq.n	80057a4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e2c1      	b.n	8005d28 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80057a4:	f7fb fb78 	bl	8000e98 <HAL_GetREVID>
 80057a8:	4603      	mov	r3, r0
 80057aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d817      	bhi.n	80057e2 <HAL_RCC_OscConfig+0x35e>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	d108      	bne.n	80057cc <HAL_RCC_OscConfig+0x348>
 80057ba:	4b70      	ldr	r3, [pc, #448]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80057c2:	4a6e      	ldr	r2, [pc, #440]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 80057c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057c8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80057ca:	e075      	b.n	80058b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80057cc:	4b6b      	ldr	r3, [pc, #428]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a1b      	ldr	r3, [r3, #32]
 80057d8:	069b      	lsls	r3, r3, #26
 80057da:	4968      	ldr	r1, [pc, #416]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80057e0:	e06a      	b.n	80058b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80057e2:	4b66      	ldr	r3, [pc, #408]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	061b      	lsls	r3, r3, #24
 80057f0:	4962      	ldr	r1, [pc, #392]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80057f6:	e05f      	b.n	80058b8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	69db      	ldr	r3, [r3, #28]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d042      	beq.n	8005886 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005800:	4b5e      	ldr	r3, [pc, #376]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a5d      	ldr	r2, [pc, #372]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 8005806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800580a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800580c:	f7fb fb14 	bl	8000e38 <HAL_GetTick>
 8005810:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005812:	e008      	b.n	8005826 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005814:	f7fb fb10 	bl	8000e38 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e280      	b.n	8005d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005826:	4b55      	ldr	r3, [pc, #340]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0f0      	beq.n	8005814 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005832:	f7fb fb31 	bl	8000e98 <HAL_GetREVID>
 8005836:	4603      	mov	r3, r0
 8005838:	f241 0203 	movw	r2, #4099	; 0x1003
 800583c:	4293      	cmp	r3, r2
 800583e:	d817      	bhi.n	8005870 <HAL_RCC_OscConfig+0x3ec>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	2b20      	cmp	r3, #32
 8005846:	d108      	bne.n	800585a <HAL_RCC_OscConfig+0x3d6>
 8005848:	4b4c      	ldr	r3, [pc, #304]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005850:	4a4a      	ldr	r2, [pc, #296]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 8005852:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005856:	6053      	str	r3, [r2, #4]
 8005858:	e02e      	b.n	80058b8 <HAL_RCC_OscConfig+0x434>
 800585a:	4b48      	ldr	r3, [pc, #288]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	069b      	lsls	r3, r3, #26
 8005868:	4944      	ldr	r1, [pc, #272]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 800586a:	4313      	orrs	r3, r2
 800586c:	604b      	str	r3, [r1, #4]
 800586e:	e023      	b.n	80058b8 <HAL_RCC_OscConfig+0x434>
 8005870:	4b42      	ldr	r3, [pc, #264]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	061b      	lsls	r3, r3, #24
 800587e:	493f      	ldr	r1, [pc, #252]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 8005880:	4313      	orrs	r3, r2
 8005882:	60cb      	str	r3, [r1, #12]
 8005884:	e018      	b.n	80058b8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005886:	4b3d      	ldr	r3, [pc, #244]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a3c      	ldr	r2, [pc, #240]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 800588c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005892:	f7fb fad1 	bl	8000e38 <HAL_GetTick>
 8005896:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005898:	e008      	b.n	80058ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800589a:	f7fb facd 	bl	8000e38 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e23d      	b.n	8005d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80058ac:	4b33      	ldr	r3, [pc, #204]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1f0      	bne.n	800589a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0308 	and.w	r3, r3, #8
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d036      	beq.n	8005932 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d019      	beq.n	8005900 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058cc:	4b2b      	ldr	r3, [pc, #172]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 80058ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058d0:	4a2a      	ldr	r2, [pc, #168]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 80058d2:	f043 0301 	orr.w	r3, r3, #1
 80058d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058d8:	f7fb faae 	bl	8000e38 <HAL_GetTick>
 80058dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80058de:	e008      	b.n	80058f2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058e0:	f7fb faaa 	bl	8000e38 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e21a      	b.n	8005d28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80058f2:	4b22      	ldr	r3, [pc, #136]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 80058f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d0f0      	beq.n	80058e0 <HAL_RCC_OscConfig+0x45c>
 80058fe:	e018      	b.n	8005932 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005900:	4b1e      	ldr	r3, [pc, #120]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 8005902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005904:	4a1d      	ldr	r2, [pc, #116]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 8005906:	f023 0301 	bic.w	r3, r3, #1
 800590a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800590c:	f7fb fa94 	bl	8000e38 <HAL_GetTick>
 8005910:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005912:	e008      	b.n	8005926 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005914:	f7fb fa90 	bl	8000e38 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	2b02      	cmp	r3, #2
 8005920:	d901      	bls.n	8005926 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e200      	b.n	8005d28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005926:	4b15      	ldr	r3, [pc, #84]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 8005928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1f0      	bne.n	8005914 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0320 	and.w	r3, r3, #32
 800593a:	2b00      	cmp	r3, #0
 800593c:	d039      	beq.n	80059b2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d01c      	beq.n	8005980 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005946:	4b0d      	ldr	r3, [pc, #52]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a0c      	ldr	r2, [pc, #48]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 800594c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005950:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005952:	f7fb fa71 	bl	8000e38 <HAL_GetTick>
 8005956:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005958:	e008      	b.n	800596c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800595a:	f7fb fa6d 	bl	8000e38 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	2b02      	cmp	r3, #2
 8005966:	d901      	bls.n	800596c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e1dd      	b.n	8005d28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800596c:	4b03      	ldr	r3, [pc, #12]	; (800597c <HAL_RCC_OscConfig+0x4f8>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d0f0      	beq.n	800595a <HAL_RCC_OscConfig+0x4d6>
 8005978:	e01b      	b.n	80059b2 <HAL_RCC_OscConfig+0x52e>
 800597a:	bf00      	nop
 800597c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005980:	4b9b      	ldr	r3, [pc, #620]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a9a      	ldr	r2, [pc, #616]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005986:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800598a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800598c:	f7fb fa54 	bl	8000e38 <HAL_GetTick>
 8005990:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005992:	e008      	b.n	80059a6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005994:	f7fb fa50 	bl	8000e38 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e1c0      	b.n	8005d28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80059a6:	4b92      	ldr	r3, [pc, #584]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1f0      	bne.n	8005994 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0304 	and.w	r3, r3, #4
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 8081 	beq.w	8005ac2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80059c0:	4b8c      	ldr	r3, [pc, #560]	; (8005bf4 <HAL_RCC_OscConfig+0x770>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a8b      	ldr	r2, [pc, #556]	; (8005bf4 <HAL_RCC_OscConfig+0x770>)
 80059c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059cc:	f7fb fa34 	bl	8000e38 <HAL_GetTick>
 80059d0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059d2:	e008      	b.n	80059e6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059d4:	f7fb fa30 	bl	8000e38 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b64      	cmp	r3, #100	; 0x64
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e1a0      	b.n	8005d28 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059e6:	4b83      	ldr	r3, [pc, #524]	; (8005bf4 <HAL_RCC_OscConfig+0x770>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d0f0      	beq.n	80059d4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d106      	bne.n	8005a08 <HAL_RCC_OscConfig+0x584>
 80059fa:	4b7d      	ldr	r3, [pc, #500]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 80059fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059fe:	4a7c      	ldr	r2, [pc, #496]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005a00:	f043 0301 	orr.w	r3, r3, #1
 8005a04:	6713      	str	r3, [r2, #112]	; 0x70
 8005a06:	e02d      	b.n	8005a64 <HAL_RCC_OscConfig+0x5e0>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10c      	bne.n	8005a2a <HAL_RCC_OscConfig+0x5a6>
 8005a10:	4b77      	ldr	r3, [pc, #476]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a14:	4a76      	ldr	r2, [pc, #472]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005a16:	f023 0301 	bic.w	r3, r3, #1
 8005a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a1c:	4b74      	ldr	r3, [pc, #464]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a20:	4a73      	ldr	r2, [pc, #460]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005a22:	f023 0304 	bic.w	r3, r3, #4
 8005a26:	6713      	str	r3, [r2, #112]	; 0x70
 8005a28:	e01c      	b.n	8005a64 <HAL_RCC_OscConfig+0x5e0>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	2b05      	cmp	r3, #5
 8005a30:	d10c      	bne.n	8005a4c <HAL_RCC_OscConfig+0x5c8>
 8005a32:	4b6f      	ldr	r3, [pc, #444]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a36:	4a6e      	ldr	r2, [pc, #440]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005a38:	f043 0304 	orr.w	r3, r3, #4
 8005a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a3e:	4b6c      	ldr	r3, [pc, #432]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a42:	4a6b      	ldr	r2, [pc, #428]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005a44:	f043 0301 	orr.w	r3, r3, #1
 8005a48:	6713      	str	r3, [r2, #112]	; 0x70
 8005a4a:	e00b      	b.n	8005a64 <HAL_RCC_OscConfig+0x5e0>
 8005a4c:	4b68      	ldr	r3, [pc, #416]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a50:	4a67      	ldr	r2, [pc, #412]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005a52:	f023 0301 	bic.w	r3, r3, #1
 8005a56:	6713      	str	r3, [r2, #112]	; 0x70
 8005a58:	4b65      	ldr	r3, [pc, #404]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5c:	4a64      	ldr	r2, [pc, #400]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005a5e:	f023 0304 	bic.w	r3, r3, #4
 8005a62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d015      	beq.n	8005a98 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a6c:	f7fb f9e4 	bl	8000e38 <HAL_GetTick>
 8005a70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a72:	e00a      	b.n	8005a8a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a74:	f7fb f9e0 	bl	8000e38 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e14e      	b.n	8005d28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a8a:	4b59      	ldr	r3, [pc, #356]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0ee      	beq.n	8005a74 <HAL_RCC_OscConfig+0x5f0>
 8005a96:	e014      	b.n	8005ac2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a98:	f7fb f9ce 	bl	8000e38 <HAL_GetTick>
 8005a9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a9e:	e00a      	b.n	8005ab6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aa0:	f7fb f9ca 	bl	8000e38 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d901      	bls.n	8005ab6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e138      	b.n	8005d28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ab6:	4b4e      	ldr	r3, [pc, #312]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1ee      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 812d 	beq.w	8005d26 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005acc:	4b48      	ldr	r3, [pc, #288]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ad4:	2b18      	cmp	r3, #24
 8005ad6:	f000 80bd 	beq.w	8005c54 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	f040 809e 	bne.w	8005c20 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ae4:	4b42      	ldr	r3, [pc, #264]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a41      	ldr	r2, [pc, #260]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af0:	f7fb f9a2 	bl	8000e38 <HAL_GetTick>
 8005af4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005af6:	e008      	b.n	8005b0a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005af8:	f7fb f99e 	bl	8000e38 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e10e      	b.n	8005d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b0a:	4b39      	ldr	r3, [pc, #228]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1f0      	bne.n	8005af8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b16:	4b36      	ldr	r3, [pc, #216]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b1a:	4b37      	ldr	r3, [pc, #220]	; (8005bf8 <HAL_RCC_OscConfig+0x774>)
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005b26:	0112      	lsls	r2, r2, #4
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	4931      	ldr	r1, [pc, #196]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	628b      	str	r3, [r1, #40]	; 0x28
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b34:	3b01      	subs	r3, #1
 8005b36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	025b      	lsls	r3, r3, #9
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	431a      	orrs	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	041b      	lsls	r3, r3, #16
 8005b4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b52:	431a      	orrs	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	061b      	lsls	r3, r3, #24
 8005b5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b60:	4923      	ldr	r1, [pc, #140]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005b66:	4b22      	ldr	r3, [pc, #136]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6a:	4a21      	ldr	r2, [pc, #132]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005b6c:	f023 0301 	bic.w	r3, r3, #1
 8005b70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005b72:	4b1f      	ldr	r3, [pc, #124]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b76:	4b21      	ldr	r3, [pc, #132]	; (8005bfc <HAL_RCC_OscConfig+0x778>)
 8005b78:	4013      	ands	r3, r2
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005b7e:	00d2      	lsls	r2, r2, #3
 8005b80:	491b      	ldr	r1, [pc, #108]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005b86:	4b1a      	ldr	r3, [pc, #104]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8a:	f023 020c 	bic.w	r2, r3, #12
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	4917      	ldr	r1, [pc, #92]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005b98:	4b15      	ldr	r3, [pc, #84]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9c:	f023 0202 	bic.w	r2, r3, #2
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba4:	4912      	ldr	r1, [pc, #72]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005baa:	4b11      	ldr	r3, [pc, #68]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bae:	4a10      	ldr	r2, [pc, #64]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bb6:	4b0e      	ldr	r3, [pc, #56]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bba:	4a0d      	ldr	r2, [pc, #52]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005bc2:	4b0b      	ldr	r3, [pc, #44]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc6:	4a0a      	ldr	r2, [pc, #40]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bcc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005bce:	4b08      	ldr	r3, [pc, #32]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd2:	4a07      	ldr	r2, [pc, #28]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005bd4:	f043 0301 	orr.w	r3, r3, #1
 8005bd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bda:	4b05      	ldr	r3, [pc, #20]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a04      	ldr	r2, [pc, #16]	; (8005bf0 <HAL_RCC_OscConfig+0x76c>)
 8005be0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be6:	f7fb f927 	bl	8000e38 <HAL_GetTick>
 8005bea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005bec:	e011      	b.n	8005c12 <HAL_RCC_OscConfig+0x78e>
 8005bee:	bf00      	nop
 8005bf0:	58024400 	.word	0x58024400
 8005bf4:	58024800 	.word	0x58024800
 8005bf8:	fffffc0c 	.word	0xfffffc0c
 8005bfc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c00:	f7fb f91a 	bl	8000e38 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e08a      	b.n	8005d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c12:	4b47      	ldr	r3, [pc, #284]	; (8005d30 <HAL_RCC_OscConfig+0x8ac>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d0f0      	beq.n	8005c00 <HAL_RCC_OscConfig+0x77c>
 8005c1e:	e082      	b.n	8005d26 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c20:	4b43      	ldr	r3, [pc, #268]	; (8005d30 <HAL_RCC_OscConfig+0x8ac>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a42      	ldr	r2, [pc, #264]	; (8005d30 <HAL_RCC_OscConfig+0x8ac>)
 8005c26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c2c:	f7fb f904 	bl	8000e38 <HAL_GetTick>
 8005c30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c32:	e008      	b.n	8005c46 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c34:	f7fb f900 	bl	8000e38 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e070      	b.n	8005d28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c46:	4b3a      	ldr	r3, [pc, #232]	; (8005d30 <HAL_RCC_OscConfig+0x8ac>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1f0      	bne.n	8005c34 <HAL_RCC_OscConfig+0x7b0>
 8005c52:	e068      	b.n	8005d26 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005c54:	4b36      	ldr	r3, [pc, #216]	; (8005d30 <HAL_RCC_OscConfig+0x8ac>)
 8005c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c58:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005c5a:	4b35      	ldr	r3, [pc, #212]	; (8005d30 <HAL_RCC_OscConfig+0x8ac>)
 8005c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d031      	beq.n	8005ccc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	f003 0203 	and.w	r2, r3, #3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d12a      	bne.n	8005ccc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	091b      	lsrs	r3, r3, #4
 8005c7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d122      	bne.n	8005ccc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c90:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d11a      	bne.n	8005ccc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	0a5b      	lsrs	r3, r3, #9
 8005c9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d111      	bne.n	8005ccc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	0c1b      	lsrs	r3, r3, #16
 8005cac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d108      	bne.n	8005ccc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	0e1b      	lsrs	r3, r3, #24
 8005cbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d001      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e02b      	b.n	8005d28 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005cd0:	4b17      	ldr	r3, [pc, #92]	; (8005d30 <HAL_RCC_OscConfig+0x8ac>)
 8005cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd4:	08db      	lsrs	r3, r3, #3
 8005cd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cda:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d01f      	beq.n	8005d26 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005ce6:	4b12      	ldr	r3, [pc, #72]	; (8005d30 <HAL_RCC_OscConfig+0x8ac>)
 8005ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cea:	4a11      	ldr	r2, [pc, #68]	; (8005d30 <HAL_RCC_OscConfig+0x8ac>)
 8005cec:	f023 0301 	bic.w	r3, r3, #1
 8005cf0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005cf2:	f7fb f8a1 	bl	8000e38 <HAL_GetTick>
 8005cf6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005cf8:	bf00      	nop
 8005cfa:	f7fb f89d 	bl	8000e38 <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d0f9      	beq.n	8005cfa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005d06:	4b0a      	ldr	r3, [pc, #40]	; (8005d30 <HAL_RCC_OscConfig+0x8ac>)
 8005d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d0a:	4b0a      	ldr	r3, [pc, #40]	; (8005d34 <HAL_RCC_OscConfig+0x8b0>)
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005d12:	00d2      	lsls	r2, r2, #3
 8005d14:	4906      	ldr	r1, [pc, #24]	; (8005d30 <HAL_RCC_OscConfig+0x8ac>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005d1a:	4b05      	ldr	r3, [pc, #20]	; (8005d30 <HAL_RCC_OscConfig+0x8ac>)
 8005d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1e:	4a04      	ldr	r2, [pc, #16]	; (8005d30 <HAL_RCC_OscConfig+0x8ac>)
 8005d20:	f043 0301 	orr.w	r3, r3, #1
 8005d24:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3730      	adds	r7, #48	; 0x30
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	58024400 	.word	0x58024400
 8005d34:	ffff0007 	.word	0xffff0007

08005d38 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d101      	bne.n	8005d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e19c      	b.n	8006086 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d4c:	4b8a      	ldr	r3, [pc, #552]	; (8005f78 <HAL_RCC_ClockConfig+0x240>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 030f 	and.w	r3, r3, #15
 8005d54:	683a      	ldr	r2, [r7, #0]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d910      	bls.n	8005d7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d5a:	4b87      	ldr	r3, [pc, #540]	; (8005f78 <HAL_RCC_ClockConfig+0x240>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f023 020f 	bic.w	r2, r3, #15
 8005d62:	4985      	ldr	r1, [pc, #532]	; (8005f78 <HAL_RCC_ClockConfig+0x240>)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d6a:	4b83      	ldr	r3, [pc, #524]	; (8005f78 <HAL_RCC_ClockConfig+0x240>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 030f 	and.w	r3, r3, #15
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d001      	beq.n	8005d7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e184      	b.n	8006086 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0304 	and.w	r3, r3, #4
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d010      	beq.n	8005daa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	691a      	ldr	r2, [r3, #16]
 8005d8c:	4b7b      	ldr	r3, [pc, #492]	; (8005f7c <HAL_RCC_ClockConfig+0x244>)
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d908      	bls.n	8005daa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d98:	4b78      	ldr	r3, [pc, #480]	; (8005f7c <HAL_RCC_ClockConfig+0x244>)
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	4975      	ldr	r1, [pc, #468]	; (8005f7c <HAL_RCC_ClockConfig+0x244>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0308 	and.w	r3, r3, #8
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d010      	beq.n	8005dd8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	695a      	ldr	r2, [r3, #20]
 8005dba:	4b70      	ldr	r3, [pc, #448]	; (8005f7c <HAL_RCC_ClockConfig+0x244>)
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d908      	bls.n	8005dd8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005dc6:	4b6d      	ldr	r3, [pc, #436]	; (8005f7c <HAL_RCC_ClockConfig+0x244>)
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	496a      	ldr	r1, [pc, #424]	; (8005f7c <HAL_RCC_ClockConfig+0x244>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0310 	and.w	r3, r3, #16
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d010      	beq.n	8005e06 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	699a      	ldr	r2, [r3, #24]
 8005de8:	4b64      	ldr	r3, [pc, #400]	; (8005f7c <HAL_RCC_ClockConfig+0x244>)
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d908      	bls.n	8005e06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005df4:	4b61      	ldr	r3, [pc, #388]	; (8005f7c <HAL_RCC_ClockConfig+0x244>)
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	495e      	ldr	r1, [pc, #376]	; (8005f7c <HAL_RCC_ClockConfig+0x244>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0320 	and.w	r3, r3, #32
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d010      	beq.n	8005e34 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	69da      	ldr	r2, [r3, #28]
 8005e16:	4b59      	ldr	r3, [pc, #356]	; (8005f7c <HAL_RCC_ClockConfig+0x244>)
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d908      	bls.n	8005e34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005e22:	4b56      	ldr	r3, [pc, #344]	; (8005f7c <HAL_RCC_ClockConfig+0x244>)
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	4953      	ldr	r1, [pc, #332]	; (8005f7c <HAL_RCC_ClockConfig+0x244>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d010      	beq.n	8005e62 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68da      	ldr	r2, [r3, #12]
 8005e44:	4b4d      	ldr	r3, [pc, #308]	; (8005f7c <HAL_RCC_ClockConfig+0x244>)
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	f003 030f 	and.w	r3, r3, #15
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d908      	bls.n	8005e62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e50:	4b4a      	ldr	r3, [pc, #296]	; (8005f7c <HAL_RCC_ClockConfig+0x244>)
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	f023 020f 	bic.w	r2, r3, #15
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	4947      	ldr	r1, [pc, #284]	; (8005f7c <HAL_RCC_ClockConfig+0x244>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d055      	beq.n	8005f1a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005e6e:	4b43      	ldr	r3, [pc, #268]	; (8005f7c <HAL_RCC_ClockConfig+0x244>)
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	4940      	ldr	r1, [pc, #256]	; (8005f7c <HAL_RCC_ClockConfig+0x244>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d107      	bne.n	8005e98 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e88:	4b3c      	ldr	r3, [pc, #240]	; (8005f7c <HAL_RCC_ClockConfig+0x244>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d121      	bne.n	8005ed8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e0f6      	b.n	8006086 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2b03      	cmp	r3, #3
 8005e9e:	d107      	bne.n	8005eb0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ea0:	4b36      	ldr	r3, [pc, #216]	; (8005f7c <HAL_RCC_ClockConfig+0x244>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d115      	bne.n	8005ed8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e0ea      	b.n	8006086 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d107      	bne.n	8005ec8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005eb8:	4b30      	ldr	r3, [pc, #192]	; (8005f7c <HAL_RCC_ClockConfig+0x244>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d109      	bne.n	8005ed8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e0de      	b.n	8006086 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ec8:	4b2c      	ldr	r3, [pc, #176]	; (8005f7c <HAL_RCC_ClockConfig+0x244>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d101      	bne.n	8005ed8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e0d6      	b.n	8006086 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ed8:	4b28      	ldr	r3, [pc, #160]	; (8005f7c <HAL_RCC_ClockConfig+0x244>)
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	f023 0207 	bic.w	r2, r3, #7
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	4925      	ldr	r1, [pc, #148]	; (8005f7c <HAL_RCC_ClockConfig+0x244>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eea:	f7fa ffa5 	bl	8000e38 <HAL_GetTick>
 8005eee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ef0:	e00a      	b.n	8005f08 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ef2:	f7fa ffa1 	bl	8000e38 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d901      	bls.n	8005f08 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e0be      	b.n	8006086 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f08:	4b1c      	ldr	r3, [pc, #112]	; (8005f7c <HAL_RCC_ClockConfig+0x244>)
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	00db      	lsls	r3, r3, #3
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d1eb      	bne.n	8005ef2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d010      	beq.n	8005f48 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	4b14      	ldr	r3, [pc, #80]	; (8005f7c <HAL_RCC_ClockConfig+0x244>)
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	f003 030f 	and.w	r3, r3, #15
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d208      	bcs.n	8005f48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f36:	4b11      	ldr	r3, [pc, #68]	; (8005f7c <HAL_RCC_ClockConfig+0x244>)
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	f023 020f 	bic.w	r2, r3, #15
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	490e      	ldr	r1, [pc, #56]	; (8005f7c <HAL_RCC_ClockConfig+0x244>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f48:	4b0b      	ldr	r3, [pc, #44]	; (8005f78 <HAL_RCC_ClockConfig+0x240>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 030f 	and.w	r3, r3, #15
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d214      	bcs.n	8005f80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f56:	4b08      	ldr	r3, [pc, #32]	; (8005f78 <HAL_RCC_ClockConfig+0x240>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f023 020f 	bic.w	r2, r3, #15
 8005f5e:	4906      	ldr	r1, [pc, #24]	; (8005f78 <HAL_RCC_ClockConfig+0x240>)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f66:	4b04      	ldr	r3, [pc, #16]	; (8005f78 <HAL_RCC_ClockConfig+0x240>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 030f 	and.w	r3, r3, #15
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d005      	beq.n	8005f80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e086      	b.n	8006086 <HAL_RCC_ClockConfig+0x34e>
 8005f78:	52002000 	.word	0x52002000
 8005f7c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0304 	and.w	r3, r3, #4
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d010      	beq.n	8005fae <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	691a      	ldr	r2, [r3, #16]
 8005f90:	4b3f      	ldr	r3, [pc, #252]	; (8006090 <HAL_RCC_ClockConfig+0x358>)
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d208      	bcs.n	8005fae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005f9c:	4b3c      	ldr	r3, [pc, #240]	; (8006090 <HAL_RCC_ClockConfig+0x358>)
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	4939      	ldr	r1, [pc, #228]	; (8006090 <HAL_RCC_ClockConfig+0x358>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0308 	and.w	r3, r3, #8
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d010      	beq.n	8005fdc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	695a      	ldr	r2, [r3, #20]
 8005fbe:	4b34      	ldr	r3, [pc, #208]	; (8006090 <HAL_RCC_ClockConfig+0x358>)
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d208      	bcs.n	8005fdc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005fca:	4b31      	ldr	r3, [pc, #196]	; (8006090 <HAL_RCC_ClockConfig+0x358>)
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	492e      	ldr	r1, [pc, #184]	; (8006090 <HAL_RCC_ClockConfig+0x358>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0310 	and.w	r3, r3, #16
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d010      	beq.n	800600a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	699a      	ldr	r2, [r3, #24]
 8005fec:	4b28      	ldr	r3, [pc, #160]	; (8006090 <HAL_RCC_ClockConfig+0x358>)
 8005fee:	69db      	ldr	r3, [r3, #28]
 8005ff0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d208      	bcs.n	800600a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ff8:	4b25      	ldr	r3, [pc, #148]	; (8006090 <HAL_RCC_ClockConfig+0x358>)
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	4922      	ldr	r1, [pc, #136]	; (8006090 <HAL_RCC_ClockConfig+0x358>)
 8006006:	4313      	orrs	r3, r2
 8006008:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0320 	and.w	r3, r3, #32
 8006012:	2b00      	cmp	r3, #0
 8006014:	d010      	beq.n	8006038 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	69da      	ldr	r2, [r3, #28]
 800601a:	4b1d      	ldr	r3, [pc, #116]	; (8006090 <HAL_RCC_ClockConfig+0x358>)
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006022:	429a      	cmp	r2, r3
 8006024:	d208      	bcs.n	8006038 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006026:	4b1a      	ldr	r3, [pc, #104]	; (8006090 <HAL_RCC_ClockConfig+0x358>)
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	4917      	ldr	r1, [pc, #92]	; (8006090 <HAL_RCC_ClockConfig+0x358>)
 8006034:	4313      	orrs	r3, r2
 8006036:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006038:	f000 f834 	bl	80060a4 <HAL_RCC_GetSysClockFreq>
 800603c:	4602      	mov	r2, r0
 800603e:	4b14      	ldr	r3, [pc, #80]	; (8006090 <HAL_RCC_ClockConfig+0x358>)
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	0a1b      	lsrs	r3, r3, #8
 8006044:	f003 030f 	and.w	r3, r3, #15
 8006048:	4912      	ldr	r1, [pc, #72]	; (8006094 <HAL_RCC_ClockConfig+0x35c>)
 800604a:	5ccb      	ldrb	r3, [r1, r3]
 800604c:	f003 031f 	and.w	r3, r3, #31
 8006050:	fa22 f303 	lsr.w	r3, r2, r3
 8006054:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006056:	4b0e      	ldr	r3, [pc, #56]	; (8006090 <HAL_RCC_ClockConfig+0x358>)
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	f003 030f 	and.w	r3, r3, #15
 800605e:	4a0d      	ldr	r2, [pc, #52]	; (8006094 <HAL_RCC_ClockConfig+0x35c>)
 8006060:	5cd3      	ldrb	r3, [r2, r3]
 8006062:	f003 031f 	and.w	r3, r3, #31
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	fa22 f303 	lsr.w	r3, r2, r3
 800606c:	4a0a      	ldr	r2, [pc, #40]	; (8006098 <HAL_RCC_ClockConfig+0x360>)
 800606e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006070:	4a0a      	ldr	r2, [pc, #40]	; (800609c <HAL_RCC_ClockConfig+0x364>)
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006076:	4b0a      	ldr	r3, [pc, #40]	; (80060a0 <HAL_RCC_ClockConfig+0x368>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4618      	mov	r0, r3
 800607c:	f7fa fe92 	bl	8000da4 <HAL_InitTick>
 8006080:	4603      	mov	r3, r0
 8006082:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006084:	7bfb      	ldrb	r3, [r7, #15]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	58024400 	.word	0x58024400
 8006094:	080095b4 	.word	0x080095b4
 8006098:	24000004 	.word	0x24000004
 800609c:	24000000 	.word	0x24000000
 80060a0:	24000008 	.word	0x24000008

080060a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b089      	sub	sp, #36	; 0x24
 80060a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060aa:	4bb3      	ldr	r3, [pc, #716]	; (8006378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060b2:	2b18      	cmp	r3, #24
 80060b4:	f200 8155 	bhi.w	8006362 <HAL_RCC_GetSysClockFreq+0x2be>
 80060b8:	a201      	add	r2, pc, #4	; (adr r2, 80060c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80060ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060be:	bf00      	nop
 80060c0:	08006125 	.word	0x08006125
 80060c4:	08006363 	.word	0x08006363
 80060c8:	08006363 	.word	0x08006363
 80060cc:	08006363 	.word	0x08006363
 80060d0:	08006363 	.word	0x08006363
 80060d4:	08006363 	.word	0x08006363
 80060d8:	08006363 	.word	0x08006363
 80060dc:	08006363 	.word	0x08006363
 80060e0:	0800614b 	.word	0x0800614b
 80060e4:	08006363 	.word	0x08006363
 80060e8:	08006363 	.word	0x08006363
 80060ec:	08006363 	.word	0x08006363
 80060f0:	08006363 	.word	0x08006363
 80060f4:	08006363 	.word	0x08006363
 80060f8:	08006363 	.word	0x08006363
 80060fc:	08006363 	.word	0x08006363
 8006100:	08006151 	.word	0x08006151
 8006104:	08006363 	.word	0x08006363
 8006108:	08006363 	.word	0x08006363
 800610c:	08006363 	.word	0x08006363
 8006110:	08006363 	.word	0x08006363
 8006114:	08006363 	.word	0x08006363
 8006118:	08006363 	.word	0x08006363
 800611c:	08006363 	.word	0x08006363
 8006120:	08006157 	.word	0x08006157
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006124:	4b94      	ldr	r3, [pc, #592]	; (8006378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0320 	and.w	r3, r3, #32
 800612c:	2b00      	cmp	r3, #0
 800612e:	d009      	beq.n	8006144 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006130:	4b91      	ldr	r3, [pc, #580]	; (8006378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	08db      	lsrs	r3, r3, #3
 8006136:	f003 0303 	and.w	r3, r3, #3
 800613a:	4a90      	ldr	r2, [pc, #576]	; (800637c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800613c:	fa22 f303 	lsr.w	r3, r2, r3
 8006140:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006142:	e111      	b.n	8006368 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006144:	4b8d      	ldr	r3, [pc, #564]	; (800637c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006146:	61bb      	str	r3, [r7, #24]
      break;
 8006148:	e10e      	b.n	8006368 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800614a:	4b8d      	ldr	r3, [pc, #564]	; (8006380 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800614c:	61bb      	str	r3, [r7, #24]
      break;
 800614e:	e10b      	b.n	8006368 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006150:	4b8c      	ldr	r3, [pc, #560]	; (8006384 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006152:	61bb      	str	r3, [r7, #24]
      break;
 8006154:	e108      	b.n	8006368 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006156:	4b88      	ldr	r3, [pc, #544]	; (8006378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615a:	f003 0303 	and.w	r3, r3, #3
 800615e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006160:	4b85      	ldr	r3, [pc, #532]	; (8006378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006164:	091b      	lsrs	r3, r3, #4
 8006166:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800616a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800616c:	4b82      	ldr	r3, [pc, #520]	; (8006378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800616e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006176:	4b80      	ldr	r3, [pc, #512]	; (8006378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800617a:	08db      	lsrs	r3, r3, #3
 800617c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	fb02 f303 	mul.w	r3, r2, r3
 8006186:	ee07 3a90 	vmov	s15, r3
 800618a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800618e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 80e1 	beq.w	800635c <HAL_RCC_GetSysClockFreq+0x2b8>
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	2b02      	cmp	r3, #2
 800619e:	f000 8083 	beq.w	80062a8 <HAL_RCC_GetSysClockFreq+0x204>
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	f200 80a1 	bhi.w	80062ec <HAL_RCC_GetSysClockFreq+0x248>
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d003      	beq.n	80061b8 <HAL_RCC_GetSysClockFreq+0x114>
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d056      	beq.n	8006264 <HAL_RCC_GetSysClockFreq+0x1c0>
 80061b6:	e099      	b.n	80062ec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061b8:	4b6f      	ldr	r3, [pc, #444]	; (8006378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0320 	and.w	r3, r3, #32
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d02d      	beq.n	8006220 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061c4:	4b6c      	ldr	r3, [pc, #432]	; (8006378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	08db      	lsrs	r3, r3, #3
 80061ca:	f003 0303 	and.w	r3, r3, #3
 80061ce:	4a6b      	ldr	r2, [pc, #428]	; (800637c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80061d0:	fa22 f303 	lsr.w	r3, r2, r3
 80061d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	ee07 3a90 	vmov	s15, r3
 80061dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	ee07 3a90 	vmov	s15, r3
 80061e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ee:	4b62      	ldr	r3, [pc, #392]	; (8006378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061f6:	ee07 3a90 	vmov	s15, r3
 80061fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006202:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006388 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800620a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800620e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800621a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800621e:	e087      	b.n	8006330 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	ee07 3a90 	vmov	s15, r3
 8006226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800622a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800638c <HAL_RCC_GetSysClockFreq+0x2e8>
 800622e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006232:	4b51      	ldr	r3, [pc, #324]	; (8006378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800623a:	ee07 3a90 	vmov	s15, r3
 800623e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006242:	ed97 6a02 	vldr	s12, [r7, #8]
 8006246:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006388 <HAL_RCC_GetSysClockFreq+0x2e4>
 800624a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800624e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800625a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800625e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006262:	e065      	b.n	8006330 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	ee07 3a90 	vmov	s15, r3
 800626a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800626e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006390 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006276:	4b40      	ldr	r3, [pc, #256]	; (8006378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800627e:	ee07 3a90 	vmov	s15, r3
 8006282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006286:	ed97 6a02 	vldr	s12, [r7, #8]
 800628a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006388 <HAL_RCC_GetSysClockFreq+0x2e4>
 800628e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800629a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800629e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80062a6:	e043      	b.n	8006330 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	ee07 3a90 	vmov	s15, r3
 80062ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006394 <HAL_RCC_GetSysClockFreq+0x2f0>
 80062b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ba:	4b2f      	ldr	r3, [pc, #188]	; (8006378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062c2:	ee07 3a90 	vmov	s15, r3
 80062c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80062ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006388 <HAL_RCC_GetSysClockFreq+0x2e4>
 80062d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80062ea:	e021      	b.n	8006330 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	ee07 3a90 	vmov	s15, r3
 80062f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006390 <HAL_RCC_GetSysClockFreq+0x2ec>
 80062fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062fe:	4b1e      	ldr	r3, [pc, #120]	; (8006378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006306:	ee07 3a90 	vmov	s15, r3
 800630a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800630e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006312:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006388 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800631a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800631e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800632a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800632e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006330:	4b11      	ldr	r3, [pc, #68]	; (8006378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006334:	0a5b      	lsrs	r3, r3, #9
 8006336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800633a:	3301      	adds	r3, #1
 800633c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	ee07 3a90 	vmov	s15, r3
 8006344:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006348:	edd7 6a07 	vldr	s13, [r7, #28]
 800634c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006354:	ee17 3a90 	vmov	r3, s15
 8006358:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800635a:	e005      	b.n	8006368 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800635c:	2300      	movs	r3, #0
 800635e:	61bb      	str	r3, [r7, #24]
      break;
 8006360:	e002      	b.n	8006368 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006362:	4b07      	ldr	r3, [pc, #28]	; (8006380 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006364:	61bb      	str	r3, [r7, #24]
      break;
 8006366:	bf00      	nop
  }

  return sysclockfreq;
 8006368:	69bb      	ldr	r3, [r7, #24]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3724      	adds	r7, #36	; 0x24
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	58024400 	.word	0x58024400
 800637c:	03d09000 	.word	0x03d09000
 8006380:	003d0900 	.word	0x003d0900
 8006384:	017d7840 	.word	0x017d7840
 8006388:	46000000 	.word	0x46000000
 800638c:	4c742400 	.word	0x4c742400
 8006390:	4a742400 	.word	0x4a742400
 8006394:	4bbebc20 	.word	0x4bbebc20

08006398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800639e:	f7ff fe81 	bl	80060a4 <HAL_RCC_GetSysClockFreq>
 80063a2:	4602      	mov	r2, r0
 80063a4:	4b10      	ldr	r3, [pc, #64]	; (80063e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	0a1b      	lsrs	r3, r3, #8
 80063aa:	f003 030f 	and.w	r3, r3, #15
 80063ae:	490f      	ldr	r1, [pc, #60]	; (80063ec <HAL_RCC_GetHCLKFreq+0x54>)
 80063b0:	5ccb      	ldrb	r3, [r1, r3]
 80063b2:	f003 031f 	and.w	r3, r3, #31
 80063b6:	fa22 f303 	lsr.w	r3, r2, r3
 80063ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80063bc:	4b0a      	ldr	r3, [pc, #40]	; (80063e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	f003 030f 	and.w	r3, r3, #15
 80063c4:	4a09      	ldr	r2, [pc, #36]	; (80063ec <HAL_RCC_GetHCLKFreq+0x54>)
 80063c6:	5cd3      	ldrb	r3, [r2, r3]
 80063c8:	f003 031f 	and.w	r3, r3, #31
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	fa22 f303 	lsr.w	r3, r2, r3
 80063d2:	4a07      	ldr	r2, [pc, #28]	; (80063f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80063d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80063d6:	4a07      	ldr	r2, [pc, #28]	; (80063f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80063dc:	4b04      	ldr	r3, [pc, #16]	; (80063f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80063de:	681b      	ldr	r3, [r3, #0]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	58024400 	.word	0x58024400
 80063ec:	080095b4 	.word	0x080095b4
 80063f0:	24000004 	.word	0x24000004
 80063f4:	24000000 	.word	0x24000000

080063f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80063fc:	f7ff ffcc 	bl	8006398 <HAL_RCC_GetHCLKFreq>
 8006400:	4602      	mov	r2, r0
 8006402:	4b06      	ldr	r3, [pc, #24]	; (800641c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	091b      	lsrs	r3, r3, #4
 8006408:	f003 0307 	and.w	r3, r3, #7
 800640c:	4904      	ldr	r1, [pc, #16]	; (8006420 <HAL_RCC_GetPCLK1Freq+0x28>)
 800640e:	5ccb      	ldrb	r3, [r1, r3]
 8006410:	f003 031f 	and.w	r3, r3, #31
 8006414:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006418:	4618      	mov	r0, r3
 800641a:	bd80      	pop	{r7, pc}
 800641c:	58024400 	.word	0x58024400
 8006420:	080095b4 	.word	0x080095b4

08006424 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006428:	b0ca      	sub	sp, #296	; 0x128
 800642a:	af00      	add	r7, sp, #0
 800642c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006430:	2300      	movs	r3, #0
 8006432:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006436:	2300      	movs	r3, #0
 8006438:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800643c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006444:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006448:	2500      	movs	r5, #0
 800644a:	ea54 0305 	orrs.w	r3, r4, r5
 800644e:	d049      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006454:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006456:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800645a:	d02f      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800645c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006460:	d828      	bhi.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006462:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006466:	d01a      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006468:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800646c:	d822      	bhi.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006472:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006476:	d007      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006478:	e01c      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800647a:	4bb8      	ldr	r3, [pc, #736]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800647c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647e:	4ab7      	ldr	r2, [pc, #732]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006484:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006486:	e01a      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800648c:	3308      	adds	r3, #8
 800648e:	2102      	movs	r1, #2
 8006490:	4618      	mov	r0, r3
 8006492:	f002 fb61 	bl	8008b58 <RCCEx_PLL2_Config>
 8006496:	4603      	mov	r3, r0
 8006498:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800649c:	e00f      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800649e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064a2:	3328      	adds	r3, #40	; 0x28
 80064a4:	2102      	movs	r1, #2
 80064a6:	4618      	mov	r0, r3
 80064a8:	f002 fc08 	bl	8008cbc <RCCEx_PLL3_Config>
 80064ac:	4603      	mov	r3, r0
 80064ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80064b2:	e004      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80064ba:	e000      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80064bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10a      	bne.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80064c6:	4ba5      	ldr	r3, [pc, #660]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80064ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064d4:	4aa1      	ldr	r2, [pc, #644]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064d6:	430b      	orrs	r3, r1
 80064d8:	6513      	str	r3, [r2, #80]	; 0x50
 80064da:	e003      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80064e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ec:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80064f0:	f04f 0900 	mov.w	r9, #0
 80064f4:	ea58 0309 	orrs.w	r3, r8, r9
 80064f8:	d047      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80064fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006500:	2b04      	cmp	r3, #4
 8006502:	d82a      	bhi.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006504:	a201      	add	r2, pc, #4	; (adr r2, 800650c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650a:	bf00      	nop
 800650c:	08006521 	.word	0x08006521
 8006510:	0800652f 	.word	0x0800652f
 8006514:	08006545 	.word	0x08006545
 8006518:	08006563 	.word	0x08006563
 800651c:	08006563 	.word	0x08006563
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006520:	4b8e      	ldr	r3, [pc, #568]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	4a8d      	ldr	r2, [pc, #564]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800652a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800652c:	e01a      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800652e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006532:	3308      	adds	r3, #8
 8006534:	2100      	movs	r1, #0
 8006536:	4618      	mov	r0, r3
 8006538:	f002 fb0e 	bl	8008b58 <RCCEx_PLL2_Config>
 800653c:	4603      	mov	r3, r0
 800653e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006542:	e00f      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006548:	3328      	adds	r3, #40	; 0x28
 800654a:	2100      	movs	r1, #0
 800654c:	4618      	mov	r0, r3
 800654e:	f002 fbb5 	bl	8008cbc <RCCEx_PLL3_Config>
 8006552:	4603      	mov	r3, r0
 8006554:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006558:	e004      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006560:	e000      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006562:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006564:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10a      	bne.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800656c:	4b7b      	ldr	r3, [pc, #492]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800656e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006570:	f023 0107 	bic.w	r1, r3, #7
 8006574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800657a:	4a78      	ldr	r2, [pc, #480]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800657c:	430b      	orrs	r3, r1
 800657e:	6513      	str	r3, [r2, #80]	; 0x50
 8006580:	e003      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006582:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006586:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800658a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006592:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006596:	f04f 0b00 	mov.w	fp, #0
 800659a:	ea5a 030b 	orrs.w	r3, sl, fp
 800659e:	d04c      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80065a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065aa:	d030      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80065ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065b0:	d829      	bhi.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80065b2:	2bc0      	cmp	r3, #192	; 0xc0
 80065b4:	d02d      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80065b6:	2bc0      	cmp	r3, #192	; 0xc0
 80065b8:	d825      	bhi.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80065ba:	2b80      	cmp	r3, #128	; 0x80
 80065bc:	d018      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80065be:	2b80      	cmp	r3, #128	; 0x80
 80065c0:	d821      	bhi.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80065c6:	2b40      	cmp	r3, #64	; 0x40
 80065c8:	d007      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80065ca:	e01c      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065cc:	4b63      	ldr	r3, [pc, #396]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d0:	4a62      	ldr	r2, [pc, #392]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80065d8:	e01c      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065de:	3308      	adds	r3, #8
 80065e0:	2100      	movs	r1, #0
 80065e2:	4618      	mov	r0, r3
 80065e4:	f002 fab8 	bl	8008b58 <RCCEx_PLL2_Config>
 80065e8:	4603      	mov	r3, r0
 80065ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80065ee:	e011      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065f4:	3328      	adds	r3, #40	; 0x28
 80065f6:	2100      	movs	r1, #0
 80065f8:	4618      	mov	r0, r3
 80065fa:	f002 fb5f 	bl	8008cbc <RCCEx_PLL3_Config>
 80065fe:	4603      	mov	r3, r0
 8006600:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006604:	e006      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800660c:	e002      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800660e:	bf00      	nop
 8006610:	e000      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006612:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006614:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10a      	bne.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800661c:	4b4f      	ldr	r3, [pc, #316]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800661e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006620:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800662a:	4a4c      	ldr	r2, [pc, #304]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800662c:	430b      	orrs	r3, r1
 800662e:	6513      	str	r3, [r2, #80]	; 0x50
 8006630:	e003      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006632:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006636:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800663a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800663e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006642:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006646:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800664a:	2300      	movs	r3, #0
 800664c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006650:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006654:	460b      	mov	r3, r1
 8006656:	4313      	orrs	r3, r2
 8006658:	d053      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800665a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800665e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006662:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006666:	d035      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006668:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800666c:	d82e      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800666e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006672:	d031      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006674:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006678:	d828      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800667a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800667e:	d01a      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006680:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006684:	d822      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006686:	2b00      	cmp	r3, #0
 8006688:	d003      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800668a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800668e:	d007      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006690:	e01c      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006692:	4b32      	ldr	r3, [pc, #200]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006696:	4a31      	ldr	r2, [pc, #196]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800669c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800669e:	e01c      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066a4:	3308      	adds	r3, #8
 80066a6:	2100      	movs	r1, #0
 80066a8:	4618      	mov	r0, r3
 80066aa:	f002 fa55 	bl	8008b58 <RCCEx_PLL2_Config>
 80066ae:	4603      	mov	r3, r0
 80066b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80066b4:	e011      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ba:	3328      	adds	r3, #40	; 0x28
 80066bc:	2100      	movs	r1, #0
 80066be:	4618      	mov	r0, r3
 80066c0:	f002 fafc 	bl	8008cbc <RCCEx_PLL3_Config>
 80066c4:	4603      	mov	r3, r0
 80066c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066ca:	e006      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80066d2:	e002      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80066d4:	bf00      	nop
 80066d6:	e000      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80066d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10b      	bne.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80066e2:	4b1e      	ldr	r3, [pc, #120]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80066ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80066f2:	4a1a      	ldr	r2, [pc, #104]	; (800675c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066f4:	430b      	orrs	r3, r1
 80066f6:	6593      	str	r3, [r2, #88]	; 0x58
 80066f8:	e003      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800670e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006712:	2300      	movs	r3, #0
 8006714:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006718:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800671c:	460b      	mov	r3, r1
 800671e:	4313      	orrs	r3, r2
 8006720:	d056      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006726:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800672a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800672e:	d038      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006730:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006734:	d831      	bhi.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006736:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800673a:	d034      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800673c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006740:	d82b      	bhi.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006742:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006746:	d01d      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006748:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800674c:	d825      	bhi.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800674e:	2b00      	cmp	r3, #0
 8006750:	d006      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006752:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006756:	d00a      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006758:	e01f      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800675a:	bf00      	nop
 800675c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006760:	4ba2      	ldr	r3, [pc, #648]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006764:	4aa1      	ldr	r2, [pc, #644]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006766:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800676a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800676c:	e01c      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800676e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006772:	3308      	adds	r3, #8
 8006774:	2100      	movs	r1, #0
 8006776:	4618      	mov	r0, r3
 8006778:	f002 f9ee 	bl	8008b58 <RCCEx_PLL2_Config>
 800677c:	4603      	mov	r3, r0
 800677e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006782:	e011      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006788:	3328      	adds	r3, #40	; 0x28
 800678a:	2100      	movs	r1, #0
 800678c:	4618      	mov	r0, r3
 800678e:	f002 fa95 	bl	8008cbc <RCCEx_PLL3_Config>
 8006792:	4603      	mov	r3, r0
 8006794:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006798:	e006      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80067a0:	e002      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80067a2:	bf00      	nop
 80067a4:	e000      	b.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80067a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10b      	bne.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80067b0:	4b8e      	ldr	r3, [pc, #568]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80067b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067b4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80067b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067c0:	4a8a      	ldr	r2, [pc, #552]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80067c2:	430b      	orrs	r3, r1
 80067c4:	6593      	str	r3, [r2, #88]	; 0x58
 80067c6:	e003      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80067d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80067dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80067e0:	2300      	movs	r3, #0
 80067e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067e6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80067ea:	460b      	mov	r3, r1
 80067ec:	4313      	orrs	r3, r2
 80067ee:	d03a      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80067f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067f6:	2b30      	cmp	r3, #48	; 0x30
 80067f8:	d01f      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80067fa:	2b30      	cmp	r3, #48	; 0x30
 80067fc:	d819      	bhi.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80067fe:	2b20      	cmp	r3, #32
 8006800:	d00c      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006802:	2b20      	cmp	r3, #32
 8006804:	d815      	bhi.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006806:	2b00      	cmp	r3, #0
 8006808:	d019      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800680a:	2b10      	cmp	r3, #16
 800680c:	d111      	bne.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800680e:	4b77      	ldr	r3, [pc, #476]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006812:	4a76      	ldr	r2, [pc, #472]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006818:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800681a:	e011      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800681c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006820:	3308      	adds	r3, #8
 8006822:	2102      	movs	r1, #2
 8006824:	4618      	mov	r0, r3
 8006826:	f002 f997 	bl	8008b58 <RCCEx_PLL2_Config>
 800682a:	4603      	mov	r3, r0
 800682c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006830:	e006      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006838:	e002      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800683a:	bf00      	nop
 800683c:	e000      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800683e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006840:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10a      	bne.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006848:	4b68      	ldr	r3, [pc, #416]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800684a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800684c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006856:	4a65      	ldr	r2, [pc, #404]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006858:	430b      	orrs	r3, r1
 800685a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800685c:	e003      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800685e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006862:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800686a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006872:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006876:	2300      	movs	r3, #0
 8006878:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800687c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006880:	460b      	mov	r3, r1
 8006882:	4313      	orrs	r3, r2
 8006884:	d051      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800688a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800688c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006890:	d035      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006892:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006896:	d82e      	bhi.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006898:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800689c:	d031      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800689e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068a2:	d828      	bhi.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80068a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068a8:	d01a      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80068aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ae:	d822      	bhi.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d003      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80068b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b8:	d007      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80068ba:	e01c      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068bc:	4b4b      	ldr	r3, [pc, #300]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80068be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c0:	4a4a      	ldr	r2, [pc, #296]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80068c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80068c8:	e01c      	b.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ce:	3308      	adds	r3, #8
 80068d0:	2100      	movs	r1, #0
 80068d2:	4618      	mov	r0, r3
 80068d4:	f002 f940 	bl	8008b58 <RCCEx_PLL2_Config>
 80068d8:	4603      	mov	r3, r0
 80068da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80068de:	e011      	b.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068e4:	3328      	adds	r3, #40	; 0x28
 80068e6:	2100      	movs	r1, #0
 80068e8:	4618      	mov	r0, r3
 80068ea:	f002 f9e7 	bl	8008cbc <RCCEx_PLL3_Config>
 80068ee:	4603      	mov	r3, r0
 80068f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80068f4:	e006      	b.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80068fc:	e002      	b.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80068fe:	bf00      	nop
 8006900:	e000      	b.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006902:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006904:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10a      	bne.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800690c:	4b37      	ldr	r3, [pc, #220]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800690e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006910:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800691a:	4a34      	ldr	r2, [pc, #208]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800691c:	430b      	orrs	r3, r1
 800691e:	6513      	str	r3, [r2, #80]	; 0x50
 8006920:	e003      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006922:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006926:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800692a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800692e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006932:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006936:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800693a:	2300      	movs	r3, #0
 800693c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006940:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006944:	460b      	mov	r3, r1
 8006946:	4313      	orrs	r3, r2
 8006948:	d056      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800694a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800694e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006954:	d033      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006956:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800695a:	d82c      	bhi.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800695c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006960:	d02f      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006962:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006966:	d826      	bhi.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006968:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800696c:	d02b      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800696e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006972:	d820      	bhi.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006974:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006978:	d012      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800697a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800697e:	d81a      	bhi.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006980:	2b00      	cmp	r3, #0
 8006982:	d022      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006988:	d115      	bne.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800698a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800698e:	3308      	adds	r3, #8
 8006990:	2101      	movs	r1, #1
 8006992:	4618      	mov	r0, r3
 8006994:	f002 f8e0 	bl	8008b58 <RCCEx_PLL2_Config>
 8006998:	4603      	mov	r3, r0
 800699a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800699e:	e015      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069a4:	3328      	adds	r3, #40	; 0x28
 80069a6:	2101      	movs	r1, #1
 80069a8:	4618      	mov	r0, r3
 80069aa:	f002 f987 	bl	8008cbc <RCCEx_PLL3_Config>
 80069ae:	4603      	mov	r3, r0
 80069b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80069b4:	e00a      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80069bc:	e006      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80069be:	bf00      	nop
 80069c0:	e004      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80069c2:	bf00      	nop
 80069c4:	e002      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80069c6:	bf00      	nop
 80069c8:	e000      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80069ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10d      	bne.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80069d4:	4b05      	ldr	r3, [pc, #20]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80069dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069e2:	4a02      	ldr	r2, [pc, #8]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069e4:	430b      	orrs	r3, r1
 80069e6:	6513      	str	r3, [r2, #80]	; 0x50
 80069e8:	e006      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80069ea:	bf00      	nop
 80069ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80069f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a00:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006a04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a08:	2300      	movs	r3, #0
 8006a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a0e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006a12:	460b      	mov	r3, r1
 8006a14:	4313      	orrs	r3, r2
 8006a16:	d055      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a24:	d033      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006a26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a2a:	d82c      	bhi.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a30:	d02f      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a36:	d826      	bhi.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006a38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a3c:	d02b      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006a3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a42:	d820      	bhi.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006a44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a48:	d012      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006a4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a4e:	d81a      	bhi.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d022      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006a54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a58:	d115      	bne.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a5e:	3308      	adds	r3, #8
 8006a60:	2101      	movs	r1, #1
 8006a62:	4618      	mov	r0, r3
 8006a64:	f002 f878 	bl	8008b58 <RCCEx_PLL2_Config>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006a6e:	e015      	b.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a74:	3328      	adds	r3, #40	; 0x28
 8006a76:	2101      	movs	r1, #1
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f002 f91f 	bl	8008cbc <RCCEx_PLL3_Config>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006a84:	e00a      	b.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a8c:	e006      	b.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006a8e:	bf00      	nop
 8006a90:	e004      	b.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006a92:	bf00      	nop
 8006a94:	e002      	b.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006a96:	bf00      	nop
 8006a98:	e000      	b.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006a9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10b      	bne.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006aa4:	4ba3      	ldr	r3, [pc, #652]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aa8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ab0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ab4:	4a9f      	ldr	r2, [pc, #636]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ab6:	430b      	orrs	r3, r1
 8006ab8:	6593      	str	r3, [r2, #88]	; 0x58
 8006aba:	e003      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006abc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ac0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006acc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006ad0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ada:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006ade:	460b      	mov	r3, r1
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	d037      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aee:	d00e      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006af0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006af4:	d816      	bhi.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d018      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006afa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006afe:	d111      	bne.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b00:	4b8c      	ldr	r3, [pc, #560]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b04:	4a8b      	ldr	r2, [pc, #556]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006b0c:	e00f      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b12:	3308      	adds	r3, #8
 8006b14:	2101      	movs	r1, #1
 8006b16:	4618      	mov	r0, r3
 8006b18:	f002 f81e 	bl	8008b58 <RCCEx_PLL2_Config>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006b22:	e004      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b2a:	e000      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006b2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10a      	bne.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006b36:	4b7f      	ldr	r3, [pc, #508]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b3a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b44:	4a7b      	ldr	r2, [pc, #492]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b46:	430b      	orrs	r3, r1
 8006b48:	6513      	str	r3, [r2, #80]	; 0x50
 8006b4a:	e003      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006b60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b64:	2300      	movs	r3, #0
 8006b66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006b6a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006b6e:	460b      	mov	r3, r1
 8006b70:	4313      	orrs	r3, r2
 8006b72:	d039      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b7a:	2b03      	cmp	r3, #3
 8006b7c:	d81c      	bhi.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006b7e:	a201      	add	r2, pc, #4	; (adr r2, 8006b84 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b84:	08006bc1 	.word	0x08006bc1
 8006b88:	08006b95 	.word	0x08006b95
 8006b8c:	08006ba3 	.word	0x08006ba3
 8006b90:	08006bc1 	.word	0x08006bc1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b94:	4b67      	ldr	r3, [pc, #412]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b98:	4a66      	ldr	r2, [pc, #408]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006ba0:	e00f      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ba6:	3308      	adds	r3, #8
 8006ba8:	2102      	movs	r1, #2
 8006baa:	4618      	mov	r0, r3
 8006bac:	f001 ffd4 	bl	8008b58 <RCCEx_PLL2_Config>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006bb6:	e004      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006bbe:	e000      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006bc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10a      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006bca:	4b5a      	ldr	r3, [pc, #360]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bce:	f023 0103 	bic.w	r1, r3, #3
 8006bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bd8:	4a56      	ldr	r2, [pc, #344]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bda:	430b      	orrs	r3, r1
 8006bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006bde:	e003      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006be4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006bf4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006bfe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006c02:	460b      	mov	r3, r1
 8006c04:	4313      	orrs	r3, r2
 8006c06:	f000 809f 	beq.w	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c0a:	4b4b      	ldr	r3, [pc, #300]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a4a      	ldr	r2, [pc, #296]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c16:	f7fa f90f 	bl	8000e38 <HAL_GetTick>
 8006c1a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c1e:	e00b      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c20:	f7fa f90a 	bl	8000e38 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	2b64      	cmp	r3, #100	; 0x64
 8006c2e:	d903      	bls.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c36:	e005      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c38:	4b3f      	ldr	r3, [pc, #252]	; (8006d38 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d0ed      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006c44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d179      	bne.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006c4c:	4b39      	ldr	r3, [pc, #228]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006c58:	4053      	eors	r3, r2
 8006c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d015      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c62:	4b34      	ldr	r3, [pc, #208]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c6a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c6e:	4b31      	ldr	r3, [pc, #196]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c72:	4a30      	ldr	r2, [pc, #192]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c78:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c7a:	4b2e      	ldr	r3, [pc, #184]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7e:	4a2d      	ldr	r2, [pc, #180]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c84:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006c86:	4a2b      	ldr	r2, [pc, #172]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006c8c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c9a:	d118      	bne.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c9c:	f7fa f8cc 	bl	8000e38 <HAL_GetTick>
 8006ca0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ca4:	e00d      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ca6:	f7fa f8c7 	bl	8000e38 <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006cb0:	1ad2      	subs	r2, r2, r3
 8006cb2:	f241 3388 	movw	r3, #5000	; 0x1388
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d903      	bls.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8006cc0:	e005      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006cc2:	4b1c      	ldr	r3, [pc, #112]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc6:	f003 0302 	and.w	r3, r3, #2
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d0eb      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006cce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d129      	bne.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ce2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ce6:	d10e      	bne.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006ce8:	4b12      	ldr	r3, [pc, #72]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cf4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006cf8:	091a      	lsrs	r2, r3, #4
 8006cfa:	4b10      	ldr	r3, [pc, #64]	; (8006d3c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	4a0d      	ldr	r2, [pc, #52]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d00:	430b      	orrs	r3, r1
 8006d02:	6113      	str	r3, [r2, #16]
 8006d04:	e005      	b.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006d06:	4b0b      	ldr	r3, [pc, #44]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	4a0a      	ldr	r2, [pc, #40]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d0c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006d10:	6113      	str	r3, [r2, #16]
 8006d12:	4b08      	ldr	r3, [pc, #32]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d14:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d22:	4a04      	ldr	r2, [pc, #16]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d24:	430b      	orrs	r3, r1
 8006d26:	6713      	str	r3, [r2, #112]	; 0x70
 8006d28:	e00e      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8006d32:	e009      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006d34:	58024400 	.word	0x58024400
 8006d38:	58024800 	.word	0x58024800
 8006d3c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d50:	f002 0301 	and.w	r3, r2, #1
 8006d54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d58:	2300      	movs	r3, #0
 8006d5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d5e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006d62:	460b      	mov	r3, r1
 8006d64:	4313      	orrs	r3, r2
 8006d66:	f000 8089 	beq.w	8006e7c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d70:	2b28      	cmp	r3, #40	; 0x28
 8006d72:	d86b      	bhi.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006d74:	a201      	add	r2, pc, #4	; (adr r2, 8006d7c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7a:	bf00      	nop
 8006d7c:	08006e55 	.word	0x08006e55
 8006d80:	08006e4d 	.word	0x08006e4d
 8006d84:	08006e4d 	.word	0x08006e4d
 8006d88:	08006e4d 	.word	0x08006e4d
 8006d8c:	08006e4d 	.word	0x08006e4d
 8006d90:	08006e4d 	.word	0x08006e4d
 8006d94:	08006e4d 	.word	0x08006e4d
 8006d98:	08006e4d 	.word	0x08006e4d
 8006d9c:	08006e21 	.word	0x08006e21
 8006da0:	08006e4d 	.word	0x08006e4d
 8006da4:	08006e4d 	.word	0x08006e4d
 8006da8:	08006e4d 	.word	0x08006e4d
 8006dac:	08006e4d 	.word	0x08006e4d
 8006db0:	08006e4d 	.word	0x08006e4d
 8006db4:	08006e4d 	.word	0x08006e4d
 8006db8:	08006e4d 	.word	0x08006e4d
 8006dbc:	08006e37 	.word	0x08006e37
 8006dc0:	08006e4d 	.word	0x08006e4d
 8006dc4:	08006e4d 	.word	0x08006e4d
 8006dc8:	08006e4d 	.word	0x08006e4d
 8006dcc:	08006e4d 	.word	0x08006e4d
 8006dd0:	08006e4d 	.word	0x08006e4d
 8006dd4:	08006e4d 	.word	0x08006e4d
 8006dd8:	08006e4d 	.word	0x08006e4d
 8006ddc:	08006e55 	.word	0x08006e55
 8006de0:	08006e4d 	.word	0x08006e4d
 8006de4:	08006e4d 	.word	0x08006e4d
 8006de8:	08006e4d 	.word	0x08006e4d
 8006dec:	08006e4d 	.word	0x08006e4d
 8006df0:	08006e4d 	.word	0x08006e4d
 8006df4:	08006e4d 	.word	0x08006e4d
 8006df8:	08006e4d 	.word	0x08006e4d
 8006dfc:	08006e55 	.word	0x08006e55
 8006e00:	08006e4d 	.word	0x08006e4d
 8006e04:	08006e4d 	.word	0x08006e4d
 8006e08:	08006e4d 	.word	0x08006e4d
 8006e0c:	08006e4d 	.word	0x08006e4d
 8006e10:	08006e4d 	.word	0x08006e4d
 8006e14:	08006e4d 	.word	0x08006e4d
 8006e18:	08006e4d 	.word	0x08006e4d
 8006e1c:	08006e55 	.word	0x08006e55
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e24:	3308      	adds	r3, #8
 8006e26:	2101      	movs	r1, #1
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f001 fe95 	bl	8008b58 <RCCEx_PLL2_Config>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006e34:	e00f      	b.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e3a:	3328      	adds	r3, #40	; 0x28
 8006e3c:	2101      	movs	r1, #1
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f001 ff3c 	bl	8008cbc <RCCEx_PLL3_Config>
 8006e44:	4603      	mov	r3, r0
 8006e46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006e4a:	e004      	b.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e52:	e000      	b.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10a      	bne.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006e5e:	4bbf      	ldr	r3, [pc, #764]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e62:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e6c:	4abb      	ldr	r2, [pc, #748]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e6e:	430b      	orrs	r3, r1
 8006e70:	6553      	str	r3, [r2, #84]	; 0x54
 8006e72:	e003      	b.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e84:	f002 0302 	and.w	r3, r2, #2
 8006e88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006e92:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006e96:	460b      	mov	r3, r1
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	d041      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ea0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ea2:	2b05      	cmp	r3, #5
 8006ea4:	d824      	bhi.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006ea6:	a201      	add	r2, pc, #4	; (adr r2, 8006eac <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eac:	08006ef9 	.word	0x08006ef9
 8006eb0:	08006ec5 	.word	0x08006ec5
 8006eb4:	08006edb 	.word	0x08006edb
 8006eb8:	08006ef9 	.word	0x08006ef9
 8006ebc:	08006ef9 	.word	0x08006ef9
 8006ec0:	08006ef9 	.word	0x08006ef9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ec8:	3308      	adds	r3, #8
 8006eca:	2101      	movs	r1, #1
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f001 fe43 	bl	8008b58 <RCCEx_PLL2_Config>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006ed8:	e00f      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ede:	3328      	adds	r3, #40	; 0x28
 8006ee0:	2101      	movs	r1, #1
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f001 feea 	bl	8008cbc <RCCEx_PLL3_Config>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006eee:	e004      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ef6:	e000      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006ef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006efa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10a      	bne.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006f02:	4b96      	ldr	r3, [pc, #600]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f06:	f023 0107 	bic.w	r1, r3, #7
 8006f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f10:	4a92      	ldr	r2, [pc, #584]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f12:	430b      	orrs	r3, r1
 8006f14:	6553      	str	r3, [r2, #84]	; 0x54
 8006f16:	e003      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f28:	f002 0304 	and.w	r3, r2, #4
 8006f2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f30:	2300      	movs	r3, #0
 8006f32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f36:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	d044      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f48:	2b05      	cmp	r3, #5
 8006f4a:	d825      	bhi.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006f4c:	a201      	add	r2, pc, #4	; (adr r2, 8006f54 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f52:	bf00      	nop
 8006f54:	08006fa1 	.word	0x08006fa1
 8006f58:	08006f6d 	.word	0x08006f6d
 8006f5c:	08006f83 	.word	0x08006f83
 8006f60:	08006fa1 	.word	0x08006fa1
 8006f64:	08006fa1 	.word	0x08006fa1
 8006f68:	08006fa1 	.word	0x08006fa1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f70:	3308      	adds	r3, #8
 8006f72:	2101      	movs	r1, #1
 8006f74:	4618      	mov	r0, r3
 8006f76:	f001 fdef 	bl	8008b58 <RCCEx_PLL2_Config>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006f80:	e00f      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f86:	3328      	adds	r3, #40	; 0x28
 8006f88:	2101      	movs	r1, #1
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f001 fe96 	bl	8008cbc <RCCEx_PLL3_Config>
 8006f90:	4603      	mov	r3, r0
 8006f92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006f96:	e004      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f9e:	e000      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006fa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10b      	bne.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006faa:	4b6c      	ldr	r3, [pc, #432]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fae:	f023 0107 	bic.w	r1, r3, #7
 8006fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fba:	4a68      	ldr	r2, [pc, #416]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006fbc:	430b      	orrs	r3, r1
 8006fbe:	6593      	str	r3, [r2, #88]	; 0x58
 8006fc0:	e003      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd2:	f002 0320 	and.w	r3, r2, #32
 8006fd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006fda:	2300      	movs	r3, #0
 8006fdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006fe0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	d055      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ff2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ff6:	d033      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ffc:	d82c      	bhi.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007002:	d02f      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007008:	d826      	bhi.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800700a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800700e:	d02b      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007010:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007014:	d820      	bhi.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007016:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800701a:	d012      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800701c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007020:	d81a      	bhi.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007022:	2b00      	cmp	r3, #0
 8007024:	d022      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007026:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800702a:	d115      	bne.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800702c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007030:	3308      	adds	r3, #8
 8007032:	2100      	movs	r1, #0
 8007034:	4618      	mov	r0, r3
 8007036:	f001 fd8f 	bl	8008b58 <RCCEx_PLL2_Config>
 800703a:	4603      	mov	r3, r0
 800703c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007040:	e015      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007046:	3328      	adds	r3, #40	; 0x28
 8007048:	2102      	movs	r1, #2
 800704a:	4618      	mov	r0, r3
 800704c:	f001 fe36 	bl	8008cbc <RCCEx_PLL3_Config>
 8007050:	4603      	mov	r3, r0
 8007052:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007056:	e00a      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800705e:	e006      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007060:	bf00      	nop
 8007062:	e004      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007064:	bf00      	nop
 8007066:	e002      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007068:	bf00      	nop
 800706a:	e000      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800706c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800706e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10b      	bne.n	800708e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007076:	4b39      	ldr	r3, [pc, #228]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800707a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800707e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007086:	4a35      	ldr	r2, [pc, #212]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007088:	430b      	orrs	r3, r1
 800708a:	6553      	str	r3, [r2, #84]	; 0x54
 800708c:	e003      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800708e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007092:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800709a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80070a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80070a6:	2300      	movs	r3, #0
 80070a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80070ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80070b0:	460b      	mov	r3, r1
 80070b2:	4313      	orrs	r3, r2
 80070b4:	d058      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80070b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070be:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80070c2:	d033      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80070c4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80070c8:	d82c      	bhi.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80070ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ce:	d02f      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80070d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070d4:	d826      	bhi.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80070d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070da:	d02b      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80070dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070e0:	d820      	bhi.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80070e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070e6:	d012      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80070e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070ec:	d81a      	bhi.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d022      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80070f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070f6:	d115      	bne.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070fc:	3308      	adds	r3, #8
 80070fe:	2100      	movs	r1, #0
 8007100:	4618      	mov	r0, r3
 8007102:	f001 fd29 	bl	8008b58 <RCCEx_PLL2_Config>
 8007106:	4603      	mov	r3, r0
 8007108:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800710c:	e015      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800710e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007112:	3328      	adds	r3, #40	; 0x28
 8007114:	2102      	movs	r1, #2
 8007116:	4618      	mov	r0, r3
 8007118:	f001 fdd0 	bl	8008cbc <RCCEx_PLL3_Config>
 800711c:	4603      	mov	r3, r0
 800711e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007122:	e00a      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800712a:	e006      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800712c:	bf00      	nop
 800712e:	e004      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007130:	bf00      	nop
 8007132:	e002      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007134:	bf00      	nop
 8007136:	e000      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007138:	bf00      	nop
    }

    if (ret == HAL_OK)
 800713a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800713e:	2b00      	cmp	r3, #0
 8007140:	d10e      	bne.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007142:	4b06      	ldr	r3, [pc, #24]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007146:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800714a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800714e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007152:	4a02      	ldr	r2, [pc, #8]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007154:	430b      	orrs	r3, r1
 8007156:	6593      	str	r3, [r2, #88]	; 0x58
 8007158:	e006      	b.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800715a:	bf00      	nop
 800715c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007160:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007164:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800716c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007170:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007174:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007178:	2300      	movs	r3, #0
 800717a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800717e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007182:	460b      	mov	r3, r1
 8007184:	4313      	orrs	r3, r2
 8007186:	d055      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800718c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007190:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007194:	d033      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007196:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800719a:	d82c      	bhi.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800719c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071a0:	d02f      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80071a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071a6:	d826      	bhi.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80071a8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80071ac:	d02b      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80071ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80071b2:	d820      	bhi.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80071b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071b8:	d012      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80071ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071be:	d81a      	bhi.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d022      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80071c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071c8:	d115      	bne.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071ce:	3308      	adds	r3, #8
 80071d0:	2100      	movs	r1, #0
 80071d2:	4618      	mov	r0, r3
 80071d4:	f001 fcc0 	bl	8008b58 <RCCEx_PLL2_Config>
 80071d8:	4603      	mov	r3, r0
 80071da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80071de:	e015      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80071e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071e4:	3328      	adds	r3, #40	; 0x28
 80071e6:	2102      	movs	r1, #2
 80071e8:	4618      	mov	r0, r3
 80071ea:	f001 fd67 	bl	8008cbc <RCCEx_PLL3_Config>
 80071ee:	4603      	mov	r3, r0
 80071f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80071f4:	e00a      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80071fc:	e006      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80071fe:	bf00      	nop
 8007200:	e004      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007202:	bf00      	nop
 8007204:	e002      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007206:	bf00      	nop
 8007208:	e000      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800720a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800720c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10b      	bne.n	800722c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007214:	4ba1      	ldr	r3, [pc, #644]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007218:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800721c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007220:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007224:	4a9d      	ldr	r2, [pc, #628]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007226:	430b      	orrs	r3, r1
 8007228:	6593      	str	r3, [r2, #88]	; 0x58
 800722a:	e003      	b.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800722c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007230:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723c:	f002 0308 	and.w	r3, r2, #8
 8007240:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007244:	2300      	movs	r3, #0
 8007246:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800724a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800724e:	460b      	mov	r3, r1
 8007250:	4313      	orrs	r3, r2
 8007252:	d01e      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800725c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007260:	d10c      	bne.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007266:	3328      	adds	r3, #40	; 0x28
 8007268:	2102      	movs	r1, #2
 800726a:	4618      	mov	r0, r3
 800726c:	f001 fd26 	bl	8008cbc <RCCEx_PLL3_Config>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d002      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800727c:	4b87      	ldr	r3, [pc, #540]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800727e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007280:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800728c:	4a83      	ldr	r2, [pc, #524]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800728e:	430b      	orrs	r3, r1
 8007290:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729a:	f002 0310 	and.w	r3, r2, #16
 800729e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80072a2:	2300      	movs	r3, #0
 80072a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80072a8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80072ac:	460b      	mov	r3, r1
 80072ae:	4313      	orrs	r3, r2
 80072b0:	d01e      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80072b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80072ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072be:	d10c      	bne.n	80072da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80072c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072c4:	3328      	adds	r3, #40	; 0x28
 80072c6:	2102      	movs	r1, #2
 80072c8:	4618      	mov	r0, r3
 80072ca:	f001 fcf7 	bl	8008cbc <RCCEx_PLL3_Config>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d002      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80072da:	4b70      	ldr	r3, [pc, #448]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80072e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80072ea:	4a6c      	ldr	r2, [pc, #432]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072ec:	430b      	orrs	r3, r1
 80072ee:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80072f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80072fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007300:	2300      	movs	r3, #0
 8007302:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007306:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800730a:	460b      	mov	r3, r1
 800730c:	4313      	orrs	r3, r2
 800730e:	d03e      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007314:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007318:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800731c:	d022      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800731e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007322:	d81b      	bhi.n	800735c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007324:	2b00      	cmp	r3, #0
 8007326:	d003      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800732c:	d00b      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800732e:	e015      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007330:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007334:	3308      	adds	r3, #8
 8007336:	2100      	movs	r1, #0
 8007338:	4618      	mov	r0, r3
 800733a:	f001 fc0d 	bl	8008b58 <RCCEx_PLL2_Config>
 800733e:	4603      	mov	r3, r0
 8007340:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007344:	e00f      	b.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800734a:	3328      	adds	r3, #40	; 0x28
 800734c:	2102      	movs	r1, #2
 800734e:	4618      	mov	r0, r3
 8007350:	f001 fcb4 	bl	8008cbc <RCCEx_PLL3_Config>
 8007354:	4603      	mov	r3, r0
 8007356:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800735a:	e004      	b.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007362:	e000      	b.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007364:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007366:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10b      	bne.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800736e:	4b4b      	ldr	r3, [pc, #300]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007372:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800737a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800737e:	4a47      	ldr	r2, [pc, #284]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007380:	430b      	orrs	r3, r1
 8007382:	6593      	str	r3, [r2, #88]	; 0x58
 8007384:	e003      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007386:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800738a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800738e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007396:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800739a:	67bb      	str	r3, [r7, #120]	; 0x78
 800739c:	2300      	movs	r3, #0
 800739e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80073a0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80073a4:	460b      	mov	r3, r1
 80073a6:	4313      	orrs	r3, r2
 80073a8:	d03b      	beq.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80073aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073b6:	d01f      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80073b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073bc:	d818      	bhi.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80073be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073c2:	d003      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80073c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073c8:	d007      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80073ca:	e011      	b.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073cc:	4b33      	ldr	r3, [pc, #204]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d0:	4a32      	ldr	r2, [pc, #200]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80073d8:	e00f      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073de:	3328      	adds	r3, #40	; 0x28
 80073e0:	2101      	movs	r1, #1
 80073e2:	4618      	mov	r0, r3
 80073e4:	f001 fc6a 	bl	8008cbc <RCCEx_PLL3_Config>
 80073e8:	4603      	mov	r3, r0
 80073ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80073ee:	e004      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80073f6:	e000      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80073f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10b      	bne.n	800741a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007402:	4b26      	ldr	r3, [pc, #152]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007406:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800740a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800740e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007412:	4a22      	ldr	r2, [pc, #136]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007414:	430b      	orrs	r3, r1
 8007416:	6553      	str	r3, [r2, #84]	; 0x54
 8007418:	e003      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800741a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800741e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800742e:	673b      	str	r3, [r7, #112]	; 0x70
 8007430:	2300      	movs	r3, #0
 8007432:	677b      	str	r3, [r7, #116]	; 0x74
 8007434:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007438:	460b      	mov	r3, r1
 800743a:	4313      	orrs	r3, r2
 800743c:	d034      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800743e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007444:	2b00      	cmp	r3, #0
 8007446:	d003      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800744c:	d007      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800744e:	e011      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007450:	4b12      	ldr	r3, [pc, #72]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007454:	4a11      	ldr	r2, [pc, #68]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800745a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800745c:	e00e      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800745e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007462:	3308      	adds	r3, #8
 8007464:	2102      	movs	r1, #2
 8007466:	4618      	mov	r0, r3
 8007468:	f001 fb76 	bl	8008b58 <RCCEx_PLL2_Config>
 800746c:	4603      	mov	r3, r0
 800746e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007472:	e003      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800747a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800747c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10d      	bne.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007484:	4b05      	ldr	r3, [pc, #20]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007488:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800748c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007492:	4a02      	ldr	r2, [pc, #8]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007494:	430b      	orrs	r3, r1
 8007496:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007498:	e006      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800749a:	bf00      	nop
 800749c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80074a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80074b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80074b6:	2300      	movs	r3, #0
 80074b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074ba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80074be:	460b      	mov	r3, r1
 80074c0:	4313      	orrs	r3, r2
 80074c2:	d00c      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80074c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074c8:	3328      	adds	r3, #40	; 0x28
 80074ca:	2102      	movs	r1, #2
 80074cc:	4618      	mov	r0, r3
 80074ce:	f001 fbf5 	bl	8008cbc <RCCEx_PLL3_Config>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80074de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80074ea:	663b      	str	r3, [r7, #96]	; 0x60
 80074ec:	2300      	movs	r3, #0
 80074ee:	667b      	str	r3, [r7, #100]	; 0x64
 80074f0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80074f4:	460b      	mov	r3, r1
 80074f6:	4313      	orrs	r3, r2
 80074f8:	d038      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80074fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007502:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007506:	d018      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007508:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800750c:	d811      	bhi.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800750e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007512:	d014      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007518:	d80b      	bhi.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800751a:	2b00      	cmp	r3, #0
 800751c:	d011      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800751e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007522:	d106      	bne.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007524:	4bc3      	ldr	r3, [pc, #780]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007528:	4ac2      	ldr	r2, [pc, #776]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800752a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800752e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007530:	e008      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007538:	e004      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800753a:	bf00      	nop
 800753c:	e002      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800753e:	bf00      	nop
 8007540:	e000      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007542:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007544:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10b      	bne.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800754c:	4bb9      	ldr	r3, [pc, #740]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800754e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007550:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007558:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800755c:	4ab5      	ldr	r2, [pc, #724]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800755e:	430b      	orrs	r3, r1
 8007560:	6553      	str	r3, [r2, #84]	; 0x54
 8007562:	e003      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007564:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007568:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800756c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007574:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007578:	65bb      	str	r3, [r7, #88]	; 0x58
 800757a:	2300      	movs	r3, #0
 800757c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800757e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007582:	460b      	mov	r3, r1
 8007584:	4313      	orrs	r3, r2
 8007586:	d009      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007588:	4baa      	ldr	r3, [pc, #680]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800758a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800758c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007596:	4aa7      	ldr	r2, [pc, #668]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007598:	430b      	orrs	r3, r1
 800759a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800759c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80075a8:	653b      	str	r3, [r7, #80]	; 0x50
 80075aa:	2300      	movs	r3, #0
 80075ac:	657b      	str	r3, [r7, #84]	; 0x54
 80075ae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80075b2:	460b      	mov	r3, r1
 80075b4:	4313      	orrs	r3, r2
 80075b6:	d00a      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80075b8:	4b9e      	ldr	r3, [pc, #632]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80075c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80075c8:	4a9a      	ldr	r2, [pc, #616]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075ca:	430b      	orrs	r3, r1
 80075cc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80075ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80075da:	64bb      	str	r3, [r7, #72]	; 0x48
 80075dc:	2300      	movs	r3, #0
 80075de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075e0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80075e4:	460b      	mov	r3, r1
 80075e6:	4313      	orrs	r3, r2
 80075e8:	d009      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80075ea:	4b92      	ldr	r3, [pc, #584]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ee:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80075f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075f8:	4a8e      	ldr	r2, [pc, #568]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075fa:	430b      	orrs	r3, r1
 80075fc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80075fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007606:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800760a:	643b      	str	r3, [r7, #64]	; 0x40
 800760c:	2300      	movs	r3, #0
 800760e:	647b      	str	r3, [r7, #68]	; 0x44
 8007610:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007614:	460b      	mov	r3, r1
 8007616:	4313      	orrs	r3, r2
 8007618:	d00e      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800761a:	4b86      	ldr	r3, [pc, #536]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	4a85      	ldr	r2, [pc, #532]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007620:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007624:	6113      	str	r3, [r2, #16]
 8007626:	4b83      	ldr	r3, [pc, #524]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007628:	6919      	ldr	r1, [r3, #16]
 800762a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800762e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007632:	4a80      	ldr	r2, [pc, #512]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007634:	430b      	orrs	r3, r1
 8007636:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800763c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007640:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007644:	63bb      	str	r3, [r7, #56]	; 0x38
 8007646:	2300      	movs	r3, #0
 8007648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800764a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800764e:	460b      	mov	r3, r1
 8007650:	4313      	orrs	r3, r2
 8007652:	d009      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007654:	4b77      	ldr	r3, [pc, #476]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007658:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800765c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007662:	4a74      	ldr	r2, [pc, #464]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007664:	430b      	orrs	r3, r1
 8007666:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800766c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007670:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007674:	633b      	str	r3, [r7, #48]	; 0x30
 8007676:	2300      	movs	r3, #0
 8007678:	637b      	str	r3, [r7, #52]	; 0x34
 800767a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800767e:	460b      	mov	r3, r1
 8007680:	4313      	orrs	r3, r2
 8007682:	d00a      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007684:	4b6b      	ldr	r3, [pc, #428]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007688:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800768c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007694:	4a67      	ldr	r2, [pc, #412]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007696:	430b      	orrs	r3, r1
 8007698:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800769a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800769e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a2:	2100      	movs	r1, #0
 80076a4:	62b9      	str	r1, [r7, #40]	; 0x28
 80076a6:	f003 0301 	and.w	r3, r3, #1
 80076aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076ac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80076b0:	460b      	mov	r3, r1
 80076b2:	4313      	orrs	r3, r2
 80076b4:	d011      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076ba:	3308      	adds	r3, #8
 80076bc:	2100      	movs	r1, #0
 80076be:	4618      	mov	r0, r3
 80076c0:	f001 fa4a 	bl	8008b58 <RCCEx_PLL2_Config>
 80076c4:	4603      	mov	r3, r0
 80076c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80076ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80076da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e2:	2100      	movs	r1, #0
 80076e4:	6239      	str	r1, [r7, #32]
 80076e6:	f003 0302 	and.w	r3, r3, #2
 80076ea:	627b      	str	r3, [r7, #36]	; 0x24
 80076ec:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80076f0:	460b      	mov	r3, r1
 80076f2:	4313      	orrs	r3, r2
 80076f4:	d011      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076fa:	3308      	adds	r3, #8
 80076fc:	2101      	movs	r1, #1
 80076fe:	4618      	mov	r0, r3
 8007700:	f001 fa2a 	bl	8008b58 <RCCEx_PLL2_Config>
 8007704:	4603      	mov	r3, r0
 8007706:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800770a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007712:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007716:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800771a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800771e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007722:	2100      	movs	r1, #0
 8007724:	61b9      	str	r1, [r7, #24]
 8007726:	f003 0304 	and.w	r3, r3, #4
 800772a:	61fb      	str	r3, [r7, #28]
 800772c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007730:	460b      	mov	r3, r1
 8007732:	4313      	orrs	r3, r2
 8007734:	d011      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800773a:	3308      	adds	r3, #8
 800773c:	2102      	movs	r1, #2
 800773e:	4618      	mov	r0, r3
 8007740:	f001 fa0a 	bl	8008b58 <RCCEx_PLL2_Config>
 8007744:	4603      	mov	r3, r0
 8007746:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800774a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800774e:	2b00      	cmp	r3, #0
 8007750:	d003      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007752:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007756:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800775a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800775e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007762:	2100      	movs	r1, #0
 8007764:	6139      	str	r1, [r7, #16]
 8007766:	f003 0308 	and.w	r3, r3, #8
 800776a:	617b      	str	r3, [r7, #20]
 800776c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007770:	460b      	mov	r3, r1
 8007772:	4313      	orrs	r3, r2
 8007774:	d011      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800777a:	3328      	adds	r3, #40	; 0x28
 800777c:	2100      	movs	r1, #0
 800777e:	4618      	mov	r0, r3
 8007780:	f001 fa9c 	bl	8008cbc <RCCEx_PLL3_Config>
 8007784:	4603      	mov	r3, r0
 8007786:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800778a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800778e:	2b00      	cmp	r3, #0
 8007790:	d003      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007792:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007796:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800779a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800779e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a2:	2100      	movs	r1, #0
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	f003 0310 	and.w	r3, r3, #16
 80077aa:	60fb      	str	r3, [r7, #12]
 80077ac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80077b0:	460b      	mov	r3, r1
 80077b2:	4313      	orrs	r3, r2
 80077b4:	d011      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077ba:	3328      	adds	r3, #40	; 0x28
 80077bc:	2101      	movs	r1, #1
 80077be:	4618      	mov	r0, r3
 80077c0:	f001 fa7c 	bl	8008cbc <RCCEx_PLL3_Config>
 80077c4:	4603      	mov	r3, r0
 80077c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80077ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d003      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80077da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e2:	2100      	movs	r1, #0
 80077e4:	6039      	str	r1, [r7, #0]
 80077e6:	f003 0320 	and.w	r3, r3, #32
 80077ea:	607b      	str	r3, [r7, #4]
 80077ec:	e9d7 1200 	ldrd	r1, r2, [r7]
 80077f0:	460b      	mov	r3, r1
 80077f2:	4313      	orrs	r3, r2
 80077f4:	d011      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80077f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077fa:	3328      	adds	r3, #40	; 0x28
 80077fc:	2102      	movs	r1, #2
 80077fe:	4618      	mov	r0, r3
 8007800:	f001 fa5c 	bl	8008cbc <RCCEx_PLL3_Config>
 8007804:	4603      	mov	r3, r0
 8007806:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800780a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007812:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007816:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800781a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800781e:	2b00      	cmp	r3, #0
 8007820:	d101      	bne.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007822:	2300      	movs	r3, #0
 8007824:	e000      	b.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
}
 8007828:	4618      	mov	r0, r3
 800782a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800782e:	46bd      	mov	sp, r7
 8007830:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007834:	58024400 	.word	0x58024400

08007838 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b090      	sub	sp, #64	; 0x40
 800783c:	af00      	add	r7, sp, #0
 800783e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007842:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007846:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800784a:	430b      	orrs	r3, r1
 800784c:	f040 8094 	bne.w	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007850:	4b9e      	ldr	r3, [pc, #632]	; (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007854:	f003 0307 	and.w	r3, r3, #7
 8007858:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800785a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785c:	2b04      	cmp	r3, #4
 800785e:	f200 8087 	bhi.w	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007862:	a201      	add	r2, pc, #4	; (adr r2, 8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007868:	0800787d 	.word	0x0800787d
 800786c:	080078a5 	.word	0x080078a5
 8007870:	080078cd 	.word	0x080078cd
 8007874:	08007969 	.word	0x08007969
 8007878:	080078f5 	.word	0x080078f5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800787c:	4b93      	ldr	r3, [pc, #588]	; (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007884:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007888:	d108      	bne.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800788a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800788e:	4618      	mov	r0, r3
 8007890:	f001 f810 	bl	80088b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007896:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007898:	f000 bd45 	b.w	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800789c:	2300      	movs	r3, #0
 800789e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078a0:	f000 bd41 	b.w	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80078a4:	4b89      	ldr	r3, [pc, #548]	; (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078b0:	d108      	bne.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078b2:	f107 0318 	add.w	r3, r7, #24
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 fd54 	bl	8008364 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078c0:	f000 bd31 	b.w	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078c4:	2300      	movs	r3, #0
 80078c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078c8:	f000 bd2d 	b.w	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80078cc:	4b7f      	ldr	r3, [pc, #508]	; (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078d8:	d108      	bne.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078da:	f107 030c 	add.w	r3, r7, #12
 80078de:	4618      	mov	r0, r3
 80078e0:	f000 fe94 	bl	800860c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078e8:	f000 bd1d 	b.w	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80078ec:	2300      	movs	r3, #0
 80078ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078f0:	f000 bd19 	b.w	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80078f4:	4b75      	ldr	r3, [pc, #468]	; (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80078f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078fc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078fe:	4b73      	ldr	r3, [pc, #460]	; (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0304 	and.w	r3, r3, #4
 8007906:	2b04      	cmp	r3, #4
 8007908:	d10c      	bne.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800790a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800790c:	2b00      	cmp	r3, #0
 800790e:	d109      	bne.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007910:	4b6e      	ldr	r3, [pc, #440]	; (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	08db      	lsrs	r3, r3, #3
 8007916:	f003 0303 	and.w	r3, r3, #3
 800791a:	4a6d      	ldr	r2, [pc, #436]	; (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800791c:	fa22 f303 	lsr.w	r3, r2, r3
 8007920:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007922:	e01f      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007924:	4b69      	ldr	r3, [pc, #420]	; (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800792c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007930:	d106      	bne.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007934:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007938:	d102      	bne.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800793a:	4b66      	ldr	r3, [pc, #408]	; (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800793c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800793e:	e011      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007940:	4b62      	ldr	r3, [pc, #392]	; (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007948:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800794c:	d106      	bne.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800794e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007954:	d102      	bne.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007956:	4b60      	ldr	r3, [pc, #384]	; (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800795a:	e003      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800795c:	2300      	movs	r3, #0
 800795e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007960:	f000 bce1 	b.w	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007964:	f000 bcdf 	b.w	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007968:	4b5c      	ldr	r3, [pc, #368]	; (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800796a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800796c:	f000 bcdb 	b.w	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007970:	2300      	movs	r3, #0
 8007972:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007974:	f000 bcd7 	b.w	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007978:	e9d7 2300 	ldrd	r2, r3, [r7]
 800797c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007980:	430b      	orrs	r3, r1
 8007982:	f040 80ad 	bne.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8007986:	4b51      	ldr	r3, [pc, #324]	; (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800798a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800798e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007996:	d056      	beq.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8007998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800799e:	f200 8090 	bhi.w	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80079a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a4:	2bc0      	cmp	r3, #192	; 0xc0
 80079a6:	f000 8088 	beq.w	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80079aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ac:	2bc0      	cmp	r3, #192	; 0xc0
 80079ae:	f200 8088 	bhi.w	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80079b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b4:	2b80      	cmp	r3, #128	; 0x80
 80079b6:	d032      	beq.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80079b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ba:	2b80      	cmp	r3, #128	; 0x80
 80079bc:	f200 8081 	bhi.w	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80079c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d003      	beq.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80079c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c8:	2b40      	cmp	r3, #64	; 0x40
 80079ca:	d014      	beq.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80079cc:	e079      	b.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80079ce:	4b3f      	ldr	r3, [pc, #252]	; (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079da:	d108      	bne.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079e0:	4618      	mov	r0, r3
 80079e2:	f000 ff67 	bl	80088b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079ea:	f000 bc9c 	b.w	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80079ee:	2300      	movs	r3, #0
 80079f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079f2:	f000 bc98 	b.w	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80079f6:	4b35      	ldr	r3, [pc, #212]	; (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a02:	d108      	bne.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a04:	f107 0318 	add.w	r3, r7, #24
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f000 fcab 	bl	8008364 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a12:	f000 bc88 	b.w	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a16:	2300      	movs	r3, #0
 8007a18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a1a:	f000 bc84 	b.w	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a1e:	4b2b      	ldr	r3, [pc, #172]	; (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a2a:	d108      	bne.n	8007a3e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a2c:	f107 030c 	add.w	r3, r7, #12
 8007a30:	4618      	mov	r0, r3
 8007a32:	f000 fdeb 	bl	800860c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a3a:	f000 bc74 	b.w	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a42:	f000 bc70 	b.w	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a46:	4b21      	ldr	r3, [pc, #132]	; (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a4e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a50:	4b1e      	ldr	r3, [pc, #120]	; (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 0304 	and.w	r3, r3, #4
 8007a58:	2b04      	cmp	r3, #4
 8007a5a:	d10c      	bne.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8007a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d109      	bne.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a62:	4b1a      	ldr	r3, [pc, #104]	; (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	08db      	lsrs	r3, r3, #3
 8007a68:	f003 0303 	and.w	r3, r3, #3
 8007a6c:	4a18      	ldr	r2, [pc, #96]	; (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a74:	e01f      	b.n	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a76:	4b15      	ldr	r3, [pc, #84]	; (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a82:	d106      	bne.n	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8007a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a8a:	d102      	bne.n	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007a8c:	4b11      	ldr	r3, [pc, #68]	; (8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a90:	e011      	b.n	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a92:	4b0e      	ldr	r3, [pc, #56]	; (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a9e:	d106      	bne.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8007aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aa6:	d102      	bne.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007aa8:	4b0b      	ldr	r3, [pc, #44]	; (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007aac:	e003      	b.n	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007ab2:	f000 bc38 	b.w	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007ab6:	f000 bc36 	b.w	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007aba:	4b08      	ldr	r3, [pc, #32]	; (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007abc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007abe:	f000 bc32 	b.w	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ac6:	f000 bc2e 	b.w	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007aca:	bf00      	nop
 8007acc:	58024400 	.word	0x58024400
 8007ad0:	03d09000 	.word	0x03d09000
 8007ad4:	003d0900 	.word	0x003d0900
 8007ad8:	017d7840 	.word	0x017d7840
 8007adc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007ae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ae4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007ae8:	430b      	orrs	r3, r1
 8007aea:	f040 809c 	bne.w	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007aee:	4b9e      	ldr	r3, [pc, #632]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007af2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007af6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007afe:	d054      	beq.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b06:	f200 808b 	bhi.w	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b10:	f000 8083 	beq.w	8007c1a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b16:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007b1a:	f200 8081 	bhi.w	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b24:	d02f      	beq.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b2c:	d878      	bhi.n	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d004      	beq.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b3a:	d012      	beq.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8007b3c:	e070      	b.n	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b3e:	4b8a      	ldr	r3, [pc, #552]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b4a:	d107      	bne.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b50:	4618      	mov	r0, r3
 8007b52:	f000 feaf 	bl	80088b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b5a:	e3e4      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b60:	e3e1      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b62:	4b81      	ldr	r3, [pc, #516]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b6e:	d107      	bne.n	8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b70:	f107 0318 	add.w	r3, r7, #24
 8007b74:	4618      	mov	r0, r3
 8007b76:	f000 fbf5 	bl	8008364 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b7e:	e3d2      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007b80:	2300      	movs	r3, #0
 8007b82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b84:	e3cf      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b86:	4b78      	ldr	r3, [pc, #480]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b92:	d107      	bne.n	8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b94:	f107 030c 	add.w	r3, r7, #12
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f000 fd37 	bl	800860c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ba2:	e3c0      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ba8:	e3bd      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007baa:	4b6f      	ldr	r3, [pc, #444]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007bb2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007bb4:	4b6c      	ldr	r3, [pc, #432]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 0304 	and.w	r3, r3, #4
 8007bbc:	2b04      	cmp	r3, #4
 8007bbe:	d10c      	bne.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d109      	bne.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007bc6:	4b68      	ldr	r3, [pc, #416]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	08db      	lsrs	r3, r3, #3
 8007bcc:	f003 0303 	and.w	r3, r3, #3
 8007bd0:	4a66      	ldr	r2, [pc, #408]	; (8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8007bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bd8:	e01e      	b.n	8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007bda:	4b63      	ldr	r3, [pc, #396]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007be6:	d106      	bne.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bee:	d102      	bne.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007bf0:	4b5f      	ldr	r3, [pc, #380]	; (8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bf4:	e010      	b.n	8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007bf6:	4b5c      	ldr	r3, [pc, #368]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c02:	d106      	bne.n	8007c12 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c0a:	d102      	bne.n	8007c12 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007c0c:	4b59      	ldr	r3, [pc, #356]	; (8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c10:	e002      	b.n	8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007c12:	2300      	movs	r3, #0
 8007c14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007c16:	e386      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007c18:	e385      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007c1a:	4b57      	ldr	r3, [pc, #348]	; (8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c1e:	e382      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007c20:	2300      	movs	r3, #0
 8007c22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c24:	e37f      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007c26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c2a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007c2e:	430b      	orrs	r3, r1
 8007c30:	f040 80a7 	bne.w	8007d82 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007c34:	4b4c      	ldr	r3, [pc, #304]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c38:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007c3c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c44:	d055      	beq.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c4c:	f200 8096 	bhi.w	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c56:	f000 8084 	beq.w	8007d62 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8007c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c60:	f200 808c 	bhi.w	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c6a:	d030      	beq.n	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8007c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c72:	f200 8083 	bhi.w	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d004      	beq.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8007c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c82:	d012      	beq.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8007c84:	e07a      	b.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c86:	4b38      	ldr	r3, [pc, #224]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c92:	d107      	bne.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f000 fe0b 	bl	80088b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ca2:	e340      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ca8:	e33d      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007caa:	4b2f      	ldr	r3, [pc, #188]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cb6:	d107      	bne.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cb8:	f107 0318 	add.w	r3, r7, #24
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f000 fb51 	bl	8008364 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cc6:	e32e      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ccc:	e32b      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007cce:	4b26      	ldr	r3, [pc, #152]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cda:	d107      	bne.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cdc:	f107 030c 	add.w	r3, r7, #12
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f000 fc93 	bl	800860c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cea:	e31c      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007cec:	2300      	movs	r3, #0
 8007cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cf0:	e319      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007cf2:	4b1d      	ldr	r3, [pc, #116]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cf6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007cfa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007cfc:	4b1a      	ldr	r3, [pc, #104]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0304 	and.w	r3, r3, #4
 8007d04:	2b04      	cmp	r3, #4
 8007d06:	d10c      	bne.n	8007d22 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d109      	bne.n	8007d22 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d0e:	4b16      	ldr	r3, [pc, #88]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	08db      	lsrs	r3, r3, #3
 8007d14:	f003 0303 	and.w	r3, r3, #3
 8007d18:	4a14      	ldr	r2, [pc, #80]	; (8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d20:	e01e      	b.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d22:	4b11      	ldr	r3, [pc, #68]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d2e:	d106      	bne.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d36:	d102      	bne.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007d38:	4b0d      	ldr	r3, [pc, #52]	; (8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d3c:	e010      	b.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d3e:	4b0a      	ldr	r3, [pc, #40]	; (8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d4a:	d106      	bne.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8007d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d52:	d102      	bne.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007d54:	4b07      	ldr	r3, [pc, #28]	; (8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d58:	e002      	b.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007d5e:	e2e2      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007d60:	e2e1      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007d62:	4b05      	ldr	r3, [pc, #20]	; (8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007d64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d66:	e2de      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007d68:	58024400 	.word	0x58024400
 8007d6c:	03d09000 	.word	0x03d09000
 8007d70:	003d0900 	.word	0x003d0900
 8007d74:	017d7840 	.word	0x017d7840
 8007d78:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d80:	e2d1      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007d82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d86:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007d8a:	430b      	orrs	r3, r1
 8007d8c:	f040 809c 	bne.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007d90:	4b93      	ldr	r3, [pc, #588]	; (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d94:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007d98:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007da0:	d054      	beq.n	8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007da8:	f200 808b 	bhi.w	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007db2:	f000 8083 	beq.w	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8007db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007dbc:	f200 8081 	bhi.w	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dc6:	d02f      	beq.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dce:	d878      	bhi.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d004      	beq.n	8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ddc:	d012      	beq.n	8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007dde:	e070      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007de0:	4b7f      	ldr	r3, [pc, #508]	; (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007de8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007dec:	d107      	bne.n	8007dfe <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007df2:	4618      	mov	r0, r3
 8007df4:	f000 fd5e 	bl	80088b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007dfc:	e293      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e02:	e290      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e04:	4b76      	ldr	r3, [pc, #472]	; (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e10:	d107      	bne.n	8007e22 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e12:	f107 0318 	add.w	r3, r7, #24
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 faa4 	bl	8008364 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e20:	e281      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e22:	2300      	movs	r3, #0
 8007e24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e26:	e27e      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e28:	4b6d      	ldr	r3, [pc, #436]	; (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e34:	d107      	bne.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e36:	f107 030c 	add.w	r3, r7, #12
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 fbe6 	bl	800860c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e44:	e26f      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007e46:	2300      	movs	r3, #0
 8007e48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e4a:	e26c      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e4c:	4b64      	ldr	r3, [pc, #400]	; (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e54:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e56:	4b62      	ldr	r3, [pc, #392]	; (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 0304 	and.w	r3, r3, #4
 8007e5e:	2b04      	cmp	r3, #4
 8007e60:	d10c      	bne.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d109      	bne.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e68:	4b5d      	ldr	r3, [pc, #372]	; (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	08db      	lsrs	r3, r3, #3
 8007e6e:	f003 0303 	and.w	r3, r3, #3
 8007e72:	4a5c      	ldr	r2, [pc, #368]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007e74:	fa22 f303 	lsr.w	r3, r2, r3
 8007e78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e7a:	e01e      	b.n	8007eba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e7c:	4b58      	ldr	r3, [pc, #352]	; (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e88:	d106      	bne.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8007e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e90:	d102      	bne.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007e92:	4b55      	ldr	r3, [pc, #340]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007e94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e96:	e010      	b.n	8007eba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e98:	4b51      	ldr	r3, [pc, #324]	; (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ea0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ea4:	d106      	bne.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8007ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007eac:	d102      	bne.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007eae:	4b4f      	ldr	r3, [pc, #316]	; (8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007eb2:	e002      	b.n	8007eba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007eb8:	e235      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007eba:	e234      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007ebc:	4b4c      	ldr	r3, [pc, #304]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8007ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ec0:	e231      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ec6:	e22e      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ecc:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007ed0:	430b      	orrs	r3, r1
 8007ed2:	f040 808f 	bne.w	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007ed6:	4b42      	ldr	r3, [pc, #264]	; (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eda:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007ede:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8007ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ee6:	d06b      	beq.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007eee:	d874      	bhi.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ef6:	d056      	beq.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007efe:	d86c      	bhi.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f06:	d03b      	beq.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f0e:	d864      	bhi.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f16:	d021      	beq.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f1e:	d85c      	bhi.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d004      	beq.n	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f2c:	d004      	beq.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8007f2e:	e054      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007f30:	f7fe fa62 	bl	80063f8 <HAL_RCC_GetPCLK1Freq>
 8007f34:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007f36:	e1f6      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f38:	4b29      	ldr	r3, [pc, #164]	; (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f44:	d107      	bne.n	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f46:	f107 0318 	add.w	r3, r7, #24
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 fa0a 	bl	8008364 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f54:	e1e7      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f56:	2300      	movs	r3, #0
 8007f58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f5a:	e1e4      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f5c:	4b20      	ldr	r3, [pc, #128]	; (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f68:	d107      	bne.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f6a:	f107 030c 	add.w	r3, r7, #12
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f000 fb4c 	bl	800860c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f78:	e1d5      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f7e:	e1d2      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f80:	4b17      	ldr	r3, [pc, #92]	; (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f003 0304 	and.w	r3, r3, #4
 8007f88:	2b04      	cmp	r3, #4
 8007f8a:	d109      	bne.n	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f8c:	4b14      	ldr	r3, [pc, #80]	; (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	08db      	lsrs	r3, r3, #3
 8007f92:	f003 0303 	and.w	r3, r3, #3
 8007f96:	4a13      	ldr	r2, [pc, #76]	; (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8007f98:	fa22 f303 	lsr.w	r3, r2, r3
 8007f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f9e:	e1c2      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fa4:	e1bf      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007fa6:	4b0e      	ldr	r3, [pc, #56]	; (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fb2:	d102      	bne.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8007fb4:	4b0c      	ldr	r3, [pc, #48]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8007fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fb8:	e1b5      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fbe:	e1b2      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007fc0:	4b07      	ldr	r3, [pc, #28]	; (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fcc:	d102      	bne.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8007fce:	4b07      	ldr	r3, [pc, #28]	; (8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fd2:	e1a8      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fd8:	e1a5      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fde:	e1a2      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007fe0:	58024400 	.word	0x58024400
 8007fe4:	03d09000 	.word	0x03d09000
 8007fe8:	003d0900 	.word	0x003d0900
 8007fec:	017d7840 	.word	0x017d7840
 8007ff0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007ff4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ff8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007ffc:	430b      	orrs	r3, r1
 8007ffe:	d173      	bne.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008000:	4b9c      	ldr	r3, [pc, #624]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008004:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008008:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800800a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008010:	d02f      	beq.n	8008072 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008014:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008018:	d863      	bhi.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800801a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801c:	2b00      	cmp	r3, #0
 800801e:	d004      	beq.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008026:	d012      	beq.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008028:	e05b      	b.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800802a:	4b92      	ldr	r3, [pc, #584]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008032:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008036:	d107      	bne.n	8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008038:	f107 0318 	add.w	r3, r7, #24
 800803c:	4618      	mov	r0, r3
 800803e:	f000 f991 	bl	8008364 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008046:	e16e      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008048:	2300      	movs	r3, #0
 800804a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800804c:	e16b      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800804e:	4b89      	ldr	r3, [pc, #548]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008056:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800805a:	d107      	bne.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800805c:	f107 030c 	add.w	r3, r7, #12
 8008060:	4618      	mov	r0, r3
 8008062:	f000 fad3 	bl	800860c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800806a:	e15c      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800806c:	2300      	movs	r3, #0
 800806e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008070:	e159      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008072:	4b80      	ldr	r3, [pc, #512]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008076:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800807a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800807c:	4b7d      	ldr	r3, [pc, #500]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 0304 	and.w	r3, r3, #4
 8008084:	2b04      	cmp	r3, #4
 8008086:	d10c      	bne.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800808a:	2b00      	cmp	r3, #0
 800808c:	d109      	bne.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800808e:	4b79      	ldr	r3, [pc, #484]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	08db      	lsrs	r3, r3, #3
 8008094:	f003 0303 	and.w	r3, r3, #3
 8008098:	4a77      	ldr	r2, [pc, #476]	; (8008278 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800809a:	fa22 f303 	lsr.w	r3, r2, r3
 800809e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080a0:	e01e      	b.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80080a2:	4b74      	ldr	r3, [pc, #464]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080ae:	d106      	bne.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80080b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080b6:	d102      	bne.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80080b8:	4b70      	ldr	r3, [pc, #448]	; (800827c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80080ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080bc:	e010      	b.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80080be:	4b6d      	ldr	r3, [pc, #436]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080ca:	d106      	bne.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80080cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080d2:	d102      	bne.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80080d4:	4b6a      	ldr	r3, [pc, #424]	; (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80080d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080d8:	e002      	b.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80080da:	2300      	movs	r3, #0
 80080dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80080de:	e122      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80080e0:	e121      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80080e2:	2300      	movs	r3, #0
 80080e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080e6:	e11e      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80080e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080ec:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80080f0:	430b      	orrs	r3, r1
 80080f2:	d133      	bne.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80080f4:	4b5f      	ldr	r3, [pc, #380]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80080f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080fc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80080fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008100:	2b00      	cmp	r3, #0
 8008102:	d004      	beq.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800810a:	d012      	beq.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800810c:	e023      	b.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800810e:	4b59      	ldr	r3, [pc, #356]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008116:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800811a:	d107      	bne.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800811c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008120:	4618      	mov	r0, r3
 8008122:	f000 fbc7 	bl	80088b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008128:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800812a:	e0fc      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800812c:	2300      	movs	r3, #0
 800812e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008130:	e0f9      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008132:	4b50      	ldr	r3, [pc, #320]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800813a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800813e:	d107      	bne.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008140:	f107 0318 	add.w	r3, r7, #24
 8008144:	4618      	mov	r0, r3
 8008146:	f000 f90d 	bl	8008364 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800814a:	6a3b      	ldr	r3, [r7, #32]
 800814c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800814e:	e0ea      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008150:	2300      	movs	r3, #0
 8008152:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008154:	e0e7      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008156:	2300      	movs	r3, #0
 8008158:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800815a:	e0e4      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800815c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008160:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008164:	430b      	orrs	r3, r1
 8008166:	f040 808d 	bne.w	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800816a:	4b42      	ldr	r3, [pc, #264]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800816c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800816e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008172:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008176:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800817a:	d06b      	beq.n	8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800817c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008182:	d874      	bhi.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800818a:	d056      	beq.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800818c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008192:	d86c      	bhi.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008196:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800819a:	d03b      	beq.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800819c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80081a2:	d864      	bhi.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80081a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081aa:	d021      	beq.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80081ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081b2:	d85c      	bhi.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80081b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d004      	beq.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80081ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081c0:	d004      	beq.n	80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80081c2:	e054      	b.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80081c4:	f000 f8b8 	bl	8008338 <HAL_RCCEx_GetD3PCLK1Freq>
 80081c8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80081ca:	e0ac      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081cc:	4b29      	ldr	r3, [pc, #164]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081d8:	d107      	bne.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081da:	f107 0318 	add.w	r3, r7, #24
 80081de:	4618      	mov	r0, r3
 80081e0:	f000 f8c0 	bl	8008364 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081e8:	e09d      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80081ea:	2300      	movs	r3, #0
 80081ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081ee:	e09a      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081f0:	4b20      	ldr	r3, [pc, #128]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081fc:	d107      	bne.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081fe:	f107 030c 	add.w	r3, r7, #12
 8008202:	4618      	mov	r0, r3
 8008204:	f000 fa02 	bl	800860c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800820c:	e08b      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800820e:	2300      	movs	r3, #0
 8008210:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008212:	e088      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008214:	4b17      	ldr	r3, [pc, #92]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0304 	and.w	r3, r3, #4
 800821c:	2b04      	cmp	r3, #4
 800821e:	d109      	bne.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008220:	4b14      	ldr	r3, [pc, #80]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	08db      	lsrs	r3, r3, #3
 8008226:	f003 0303 	and.w	r3, r3, #3
 800822a:	4a13      	ldr	r2, [pc, #76]	; (8008278 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800822c:	fa22 f303 	lsr.w	r3, r2, r3
 8008230:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008232:	e078      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008234:	2300      	movs	r3, #0
 8008236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008238:	e075      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800823a:	4b0e      	ldr	r3, [pc, #56]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008246:	d102      	bne.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008248:	4b0c      	ldr	r3, [pc, #48]	; (800827c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800824a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800824c:	e06b      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800824e:	2300      	movs	r3, #0
 8008250:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008252:	e068      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008254:	4b07      	ldr	r3, [pc, #28]	; (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800825c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008260:	d102      	bne.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008262:	4b07      	ldr	r3, [pc, #28]	; (8008280 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008264:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008266:	e05e      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008268:	2300      	movs	r3, #0
 800826a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800826c:	e05b      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800826e:	2300      	movs	r3, #0
 8008270:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008272:	e058      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008274:	58024400 	.word	0x58024400
 8008278:	03d09000 	.word	0x03d09000
 800827c:	003d0900 	.word	0x003d0900
 8008280:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008284:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008288:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800828c:	430b      	orrs	r3, r1
 800828e:	d148      	bne.n	8008322 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008290:	4b27      	ldr	r3, [pc, #156]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008294:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008298:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800829a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082a0:	d02a      	beq.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80082a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082a8:	d838      	bhi.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80082aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d004      	beq.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80082b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082b6:	d00d      	beq.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80082b8:	e030      	b.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80082ba:	4b1d      	ldr	r3, [pc, #116]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082c6:	d102      	bne.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80082c8:	4b1a      	ldr	r3, [pc, #104]	; (8008334 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80082ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082cc:	e02b      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082ce:	2300      	movs	r3, #0
 80082d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082d2:	e028      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80082d4:	4b16      	ldr	r3, [pc, #88]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082e0:	d107      	bne.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082e6:	4618      	mov	r0, r3
 80082e8:	f000 fae4 	bl	80088b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80082ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082f0:	e019      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082f2:	2300      	movs	r3, #0
 80082f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082f6:	e016      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80082f8:	4b0d      	ldr	r3, [pc, #52]	; (8008330 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008300:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008304:	d107      	bne.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008306:	f107 0318 	add.w	r3, r7, #24
 800830a:	4618      	mov	r0, r3
 800830c:	f000 f82a 	bl	8008364 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008314:	e007      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008316:	2300      	movs	r3, #0
 8008318:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800831a:	e004      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800831c:	2300      	movs	r3, #0
 800831e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008320:	e001      	b.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008322:	2300      	movs	r3, #0
 8008324:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8008326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008328:	4618      	mov	r0, r3
 800832a:	3740      	adds	r7, #64	; 0x40
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	58024400 	.word	0x58024400
 8008334:	017d7840 	.word	0x017d7840

08008338 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800833c:	f7fe f82c 	bl	8006398 <HAL_RCC_GetHCLKFreq>
 8008340:	4602      	mov	r2, r0
 8008342:	4b06      	ldr	r3, [pc, #24]	; (800835c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008344:	6a1b      	ldr	r3, [r3, #32]
 8008346:	091b      	lsrs	r3, r3, #4
 8008348:	f003 0307 	and.w	r3, r3, #7
 800834c:	4904      	ldr	r1, [pc, #16]	; (8008360 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800834e:	5ccb      	ldrb	r3, [r1, r3]
 8008350:	f003 031f 	and.w	r3, r3, #31
 8008354:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008358:	4618      	mov	r0, r3
 800835a:	bd80      	pop	{r7, pc}
 800835c:	58024400 	.word	0x58024400
 8008360:	080095b4 	.word	0x080095b4

08008364 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008364:	b480      	push	{r7}
 8008366:	b089      	sub	sp, #36	; 0x24
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800836c:	4ba1      	ldr	r3, [pc, #644]	; (80085f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800836e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008370:	f003 0303 	and.w	r3, r3, #3
 8008374:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008376:	4b9f      	ldr	r3, [pc, #636]	; (80085f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800837a:	0b1b      	lsrs	r3, r3, #12
 800837c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008380:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008382:	4b9c      	ldr	r3, [pc, #624]	; (80085f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008386:	091b      	lsrs	r3, r3, #4
 8008388:	f003 0301 	and.w	r3, r3, #1
 800838c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800838e:	4b99      	ldr	r3, [pc, #612]	; (80085f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008392:	08db      	lsrs	r3, r3, #3
 8008394:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008398:	693a      	ldr	r2, [r7, #16]
 800839a:	fb02 f303 	mul.w	r3, r2, r3
 800839e:	ee07 3a90 	vmov	s15, r3
 80083a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	f000 8111 	beq.w	80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	f000 8083 	beq.w	80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	2b02      	cmp	r3, #2
 80083be:	f200 80a1 	bhi.w	8008504 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d003      	beq.n	80083d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d056      	beq.n	800847c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80083ce:	e099      	b.n	8008504 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083d0:	4b88      	ldr	r3, [pc, #544]	; (80085f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 0320 	and.w	r3, r3, #32
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d02d      	beq.n	8008438 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083dc:	4b85      	ldr	r3, [pc, #532]	; (80085f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	08db      	lsrs	r3, r3, #3
 80083e2:	f003 0303 	and.w	r3, r3, #3
 80083e6:	4a84      	ldr	r2, [pc, #528]	; (80085f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80083e8:	fa22 f303 	lsr.w	r3, r2, r3
 80083ec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	ee07 3a90 	vmov	s15, r3
 80083f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	ee07 3a90 	vmov	s15, r3
 80083fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008406:	4b7b      	ldr	r3, [pc, #492]	; (80085f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800840e:	ee07 3a90 	vmov	s15, r3
 8008412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008416:	ed97 6a03 	vldr	s12, [r7, #12]
 800841a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80085fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800841e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800842a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800842e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008432:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008436:	e087      	b.n	8008548 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	ee07 3a90 	vmov	s15, r3
 800843e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008442:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008600 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800844a:	4b6a      	ldr	r3, [pc, #424]	; (80085f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800844c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008452:	ee07 3a90 	vmov	s15, r3
 8008456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800845a:	ed97 6a03 	vldr	s12, [r7, #12]
 800845e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80085fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800846a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800846e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800847a:	e065      	b.n	8008548 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	ee07 3a90 	vmov	s15, r3
 8008482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008486:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800848a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800848e:	4b59      	ldr	r3, [pc, #356]	; (80085f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008496:	ee07 3a90 	vmov	s15, r3
 800849a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800849e:	ed97 6a03 	vldr	s12, [r7, #12]
 80084a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80085fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80084a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084be:	e043      	b.n	8008548 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	ee07 3a90 	vmov	s15, r3
 80084c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80084ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084d2:	4b48      	ldr	r3, [pc, #288]	; (80085f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084da:	ee07 3a90 	vmov	s15, r3
 80084de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80084e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80085fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80084ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008502:	e021      	b.n	8008548 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	ee07 3a90 	vmov	s15, r3
 800850a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800850e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008516:	4b37      	ldr	r3, [pc, #220]	; (80085f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800851e:	ee07 3a90 	vmov	s15, r3
 8008522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008526:	ed97 6a03 	vldr	s12, [r7, #12]
 800852a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80085fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800852e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800853a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800853e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008542:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008546:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008548:	4b2a      	ldr	r3, [pc, #168]	; (80085f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800854a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854c:	0a5b      	lsrs	r3, r3, #9
 800854e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008552:	ee07 3a90 	vmov	s15, r3
 8008556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800855a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800855e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008562:	edd7 6a07 	vldr	s13, [r7, #28]
 8008566:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800856a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800856e:	ee17 2a90 	vmov	r2, s15
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008576:	4b1f      	ldr	r3, [pc, #124]	; (80085f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857a:	0c1b      	lsrs	r3, r3, #16
 800857c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008580:	ee07 3a90 	vmov	s15, r3
 8008584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008588:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800858c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008590:	edd7 6a07 	vldr	s13, [r7, #28]
 8008594:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800859c:	ee17 2a90 	vmov	r2, s15
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80085a4:	4b13      	ldr	r3, [pc, #76]	; (80085f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a8:	0e1b      	lsrs	r3, r3, #24
 80085aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085ae:	ee07 3a90 	vmov	s15, r3
 80085b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80085ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085be:	edd7 6a07 	vldr	s13, [r7, #28]
 80085c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085ca:	ee17 2a90 	vmov	r2, s15
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80085d2:	e008      	b.n	80085e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	609a      	str	r2, [r3, #8]
}
 80085e6:	bf00      	nop
 80085e8:	3724      	adds	r7, #36	; 0x24
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	58024400 	.word	0x58024400
 80085f8:	03d09000 	.word	0x03d09000
 80085fc:	46000000 	.word	0x46000000
 8008600:	4c742400 	.word	0x4c742400
 8008604:	4a742400 	.word	0x4a742400
 8008608:	4bbebc20 	.word	0x4bbebc20

0800860c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800860c:	b480      	push	{r7}
 800860e:	b089      	sub	sp, #36	; 0x24
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008614:	4ba1      	ldr	r3, [pc, #644]	; (800889c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008618:	f003 0303 	and.w	r3, r3, #3
 800861c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800861e:	4b9f      	ldr	r3, [pc, #636]	; (800889c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008622:	0d1b      	lsrs	r3, r3, #20
 8008624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008628:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800862a:	4b9c      	ldr	r3, [pc, #624]	; (800889c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800862c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862e:	0a1b      	lsrs	r3, r3, #8
 8008630:	f003 0301 	and.w	r3, r3, #1
 8008634:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008636:	4b99      	ldr	r3, [pc, #612]	; (800889c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800863a:	08db      	lsrs	r3, r3, #3
 800863c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008640:	693a      	ldr	r2, [r7, #16]
 8008642:	fb02 f303 	mul.w	r3, r2, r3
 8008646:	ee07 3a90 	vmov	s15, r3
 800864a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800864e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	2b00      	cmp	r3, #0
 8008656:	f000 8111 	beq.w	800887c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	2b02      	cmp	r3, #2
 800865e:	f000 8083 	beq.w	8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	2b02      	cmp	r3, #2
 8008666:	f200 80a1 	bhi.w	80087ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d003      	beq.n	8008678 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	2b01      	cmp	r3, #1
 8008674:	d056      	beq.n	8008724 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008676:	e099      	b.n	80087ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008678:	4b88      	ldr	r3, [pc, #544]	; (800889c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 0320 	and.w	r3, r3, #32
 8008680:	2b00      	cmp	r3, #0
 8008682:	d02d      	beq.n	80086e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008684:	4b85      	ldr	r3, [pc, #532]	; (800889c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	08db      	lsrs	r3, r3, #3
 800868a:	f003 0303 	and.w	r3, r3, #3
 800868e:	4a84      	ldr	r2, [pc, #528]	; (80088a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008690:	fa22 f303 	lsr.w	r3, r2, r3
 8008694:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	ee07 3a90 	vmov	s15, r3
 800869c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	ee07 3a90 	vmov	s15, r3
 80086a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ae:	4b7b      	ldr	r3, [pc, #492]	; (800889c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086b6:	ee07 3a90 	vmov	s15, r3
 80086ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086be:	ed97 6a03 	vldr	s12, [r7, #12]
 80086c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80086de:	e087      	b.n	80087f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	ee07 3a90 	vmov	s15, r3
 80086e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80088a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80086ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086f2:	4b6a      	ldr	r3, [pc, #424]	; (800889c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086fa:	ee07 3a90 	vmov	s15, r3
 80086fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008702:	ed97 6a03 	vldr	s12, [r7, #12]
 8008706:	eddf 5a67 	vldr	s11, [pc, #412]	; 80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800870a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800870e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800871a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800871e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008722:	e065      	b.n	80087f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	ee07 3a90 	vmov	s15, r3
 800872a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800872e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80088ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008736:	4b59      	ldr	r3, [pc, #356]	; (800889c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800873e:	ee07 3a90 	vmov	s15, r3
 8008742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008746:	ed97 6a03 	vldr	s12, [r7, #12]
 800874a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800874e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800875a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800875e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008762:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008766:	e043      	b.n	80087f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	ee07 3a90 	vmov	s15, r3
 800876e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008772:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80088b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800877a:	4b48      	ldr	r3, [pc, #288]	; (800889c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800877c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800877e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008782:	ee07 3a90 	vmov	s15, r3
 8008786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800878a:	ed97 6a03 	vldr	s12, [r7, #12]
 800878e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800879a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800879e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087aa:	e021      	b.n	80087f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	ee07 3a90 	vmov	s15, r3
 80087b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80088ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80087ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087be:	4b37      	ldr	r3, [pc, #220]	; (800889c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087c6:	ee07 3a90 	vmov	s15, r3
 80087ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80087d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80088a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80087d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80087f0:	4b2a      	ldr	r3, [pc, #168]	; (800889c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f4:	0a5b      	lsrs	r3, r3, #9
 80087f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087fa:	ee07 3a90 	vmov	s15, r3
 80087fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008802:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008806:	ee37 7a87 	vadd.f32	s14, s15, s14
 800880a:	edd7 6a07 	vldr	s13, [r7, #28]
 800880e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008812:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008816:	ee17 2a90 	vmov	r2, s15
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800881e:	4b1f      	ldr	r3, [pc, #124]	; (800889c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008822:	0c1b      	lsrs	r3, r3, #16
 8008824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008828:	ee07 3a90 	vmov	s15, r3
 800882c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008830:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008834:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008838:	edd7 6a07 	vldr	s13, [r7, #28]
 800883c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008840:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008844:	ee17 2a90 	vmov	r2, s15
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800884c:	4b13      	ldr	r3, [pc, #76]	; (800889c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800884e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008850:	0e1b      	lsrs	r3, r3, #24
 8008852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008856:	ee07 3a90 	vmov	s15, r3
 800885a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800885e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008862:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008866:	edd7 6a07 	vldr	s13, [r7, #28]
 800886a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800886e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008872:	ee17 2a90 	vmov	r2, s15
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800887a:	e008      	b.n	800888e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	609a      	str	r2, [r3, #8]
}
 800888e:	bf00      	nop
 8008890:	3724      	adds	r7, #36	; 0x24
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop
 800889c:	58024400 	.word	0x58024400
 80088a0:	03d09000 	.word	0x03d09000
 80088a4:	46000000 	.word	0x46000000
 80088a8:	4c742400 	.word	0x4c742400
 80088ac:	4a742400 	.word	0x4a742400
 80088b0:	4bbebc20 	.word	0x4bbebc20

080088b4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b089      	sub	sp, #36	; 0x24
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088bc:	4ba0      	ldr	r3, [pc, #640]	; (8008b40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c0:	f003 0303 	and.w	r3, r3, #3
 80088c4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80088c6:	4b9e      	ldr	r3, [pc, #632]	; (8008b40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ca:	091b      	lsrs	r3, r3, #4
 80088cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088d0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80088d2:	4b9b      	ldr	r3, [pc, #620]	; (8008b40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d6:	f003 0301 	and.w	r3, r3, #1
 80088da:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80088dc:	4b98      	ldr	r3, [pc, #608]	; (8008b40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088e0:	08db      	lsrs	r3, r3, #3
 80088e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088e6:	693a      	ldr	r2, [r7, #16]
 80088e8:	fb02 f303 	mul.w	r3, r2, r3
 80088ec:	ee07 3a90 	vmov	s15, r3
 80088f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088f4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f000 8111 	beq.w	8008b22 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	2b02      	cmp	r3, #2
 8008904:	f000 8083 	beq.w	8008a0e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	2b02      	cmp	r3, #2
 800890c:	f200 80a1 	bhi.w	8008a52 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d003      	beq.n	800891e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	2b01      	cmp	r3, #1
 800891a:	d056      	beq.n	80089ca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800891c:	e099      	b.n	8008a52 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800891e:	4b88      	ldr	r3, [pc, #544]	; (8008b40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f003 0320 	and.w	r3, r3, #32
 8008926:	2b00      	cmp	r3, #0
 8008928:	d02d      	beq.n	8008986 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800892a:	4b85      	ldr	r3, [pc, #532]	; (8008b40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	08db      	lsrs	r3, r3, #3
 8008930:	f003 0303 	and.w	r3, r3, #3
 8008934:	4a83      	ldr	r2, [pc, #524]	; (8008b44 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008936:	fa22 f303 	lsr.w	r3, r2, r3
 800893a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	ee07 3a90 	vmov	s15, r3
 8008942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	ee07 3a90 	vmov	s15, r3
 800894c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008950:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008954:	4b7a      	ldr	r3, [pc, #488]	; (8008b40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800895c:	ee07 3a90 	vmov	s15, r3
 8008960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008964:	ed97 6a03 	vldr	s12, [r7, #12]
 8008968:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008b48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800896c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008970:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008974:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008978:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800897c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008980:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008984:	e087      	b.n	8008a96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	ee07 3a90 	vmov	s15, r3
 800898c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008990:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008b4c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008994:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008998:	4b69      	ldr	r3, [pc, #420]	; (8008b40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800899a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089a0:	ee07 3a90 	vmov	s15, r3
 80089a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80089ac:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008b48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80089b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089c8:	e065      	b.n	8008a96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	ee07 3a90 	vmov	s15, r3
 80089d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089d4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008b50 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80089d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089dc:	4b58      	ldr	r3, [pc, #352]	; (8008b40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089e4:	ee07 3a90 	vmov	s15, r3
 80089e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80089f0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008b48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80089f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a0c:	e043      	b.n	8008a96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	ee07 3a90 	vmov	s15, r3
 8008a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a18:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008b54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008a1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a20:	4b47      	ldr	r3, [pc, #284]	; (8008b40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a28:	ee07 3a90 	vmov	s15, r3
 8008a2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a30:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a34:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008b48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008a38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a50:	e021      	b.n	8008a96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	ee07 3a90 	vmov	s15, r3
 8008a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a5c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008b4c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008a60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a64:	4b36      	ldr	r3, [pc, #216]	; (8008b40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a6c:	ee07 3a90 	vmov	s15, r3
 8008a70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a74:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a78:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008b48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008a7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a94:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008a96:	4b2a      	ldr	r3, [pc, #168]	; (8008b40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a9a:	0a5b      	lsrs	r3, r3, #9
 8008a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aa0:	ee07 3a90 	vmov	s15, r3
 8008aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008aac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ab0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ab4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008abc:	ee17 2a90 	vmov	r2, s15
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008ac4:	4b1e      	ldr	r3, [pc, #120]	; (8008b40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac8:	0c1b      	lsrs	r3, r3, #16
 8008aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ace:	ee07 3a90 	vmov	s15, r3
 8008ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ad6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ada:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ade:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008aea:	ee17 2a90 	vmov	r2, s15
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008af2:	4b13      	ldr	r3, [pc, #76]	; (8008b40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af6:	0e1b      	lsrs	r3, r3, #24
 8008af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008afc:	ee07 3a90 	vmov	s15, r3
 8008b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b18:	ee17 2a90 	vmov	r2, s15
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008b20:	e008      	b.n	8008b34 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	609a      	str	r2, [r3, #8]
}
 8008b34:	bf00      	nop
 8008b36:	3724      	adds	r7, #36	; 0x24
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr
 8008b40:	58024400 	.word	0x58024400
 8008b44:	03d09000 	.word	0x03d09000
 8008b48:	46000000 	.word	0x46000000
 8008b4c:	4c742400 	.word	0x4c742400
 8008b50:	4a742400 	.word	0x4a742400
 8008b54:	4bbebc20 	.word	0x4bbebc20

08008b58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b62:	2300      	movs	r3, #0
 8008b64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b66:	4b53      	ldr	r3, [pc, #332]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b6a:	f003 0303 	and.w	r3, r3, #3
 8008b6e:	2b03      	cmp	r3, #3
 8008b70:	d101      	bne.n	8008b76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e099      	b.n	8008caa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008b76:	4b4f      	ldr	r3, [pc, #316]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a4e      	ldr	r2, [pc, #312]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008b7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b82:	f7f8 f959 	bl	8000e38 <HAL_GetTick>
 8008b86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b88:	e008      	b.n	8008b9c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008b8a:	f7f8 f955 	bl	8000e38 <HAL_GetTick>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	1ad3      	subs	r3, r2, r3
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d901      	bls.n	8008b9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008b98:	2303      	movs	r3, #3
 8008b9a:	e086      	b.n	8008caa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b9c:	4b45      	ldr	r3, [pc, #276]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d1f0      	bne.n	8008b8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008ba8:	4b42      	ldr	r3, [pc, #264]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	031b      	lsls	r3, r3, #12
 8008bb6:	493f      	ldr	r1, [pc, #252]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	628b      	str	r3, [r1, #40]	; 0x28
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	025b      	lsls	r3, r3, #9
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	431a      	orrs	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	041b      	lsls	r3, r3, #16
 8008bda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008bde:	431a      	orrs	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	3b01      	subs	r3, #1
 8008be6:	061b      	lsls	r3, r3, #24
 8008be8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008bec:	4931      	ldr	r1, [pc, #196]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008bf2:	4b30      	ldr	r3, [pc, #192]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	695b      	ldr	r3, [r3, #20]
 8008bfe:	492d      	ldr	r1, [pc, #180]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c00:	4313      	orrs	r3, r2
 8008c02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008c04:	4b2b      	ldr	r3, [pc, #172]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c08:	f023 0220 	bic.w	r2, r3, #32
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	4928      	ldr	r1, [pc, #160]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c12:	4313      	orrs	r3, r2
 8008c14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008c16:	4b27      	ldr	r3, [pc, #156]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1a:	4a26      	ldr	r2, [pc, #152]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c1c:	f023 0310 	bic.w	r3, r3, #16
 8008c20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008c22:	4b24      	ldr	r3, [pc, #144]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c26:	4b24      	ldr	r3, [pc, #144]	; (8008cb8 <RCCEx_PLL2_Config+0x160>)
 8008c28:	4013      	ands	r3, r2
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	69d2      	ldr	r2, [r2, #28]
 8008c2e:	00d2      	lsls	r2, r2, #3
 8008c30:	4920      	ldr	r1, [pc, #128]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c32:	4313      	orrs	r3, r2
 8008c34:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008c36:	4b1f      	ldr	r3, [pc, #124]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c3a:	4a1e      	ldr	r2, [pc, #120]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c3c:	f043 0310 	orr.w	r3, r3, #16
 8008c40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d106      	bne.n	8008c56 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008c48:	4b1a      	ldr	r3, [pc, #104]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c4c:	4a19      	ldr	r2, [pc, #100]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008c54:	e00f      	b.n	8008c76 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d106      	bne.n	8008c6a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008c5c:	4b15      	ldr	r3, [pc, #84]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c60:	4a14      	ldr	r2, [pc, #80]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008c68:	e005      	b.n	8008c76 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008c6a:	4b12      	ldr	r3, [pc, #72]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6e:	4a11      	ldr	r2, [pc, #68]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008c74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008c76:	4b0f      	ldr	r3, [pc, #60]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a0e      	ldr	r2, [pc, #56]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008c80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c82:	f7f8 f8d9 	bl	8000e38 <HAL_GetTick>
 8008c86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c88:	e008      	b.n	8008c9c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008c8a:	f7f8 f8d5 	bl	8000e38 <HAL_GetTick>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d901      	bls.n	8008c9c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	e006      	b.n	8008caa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c9c:	4b05      	ldr	r3, [pc, #20]	; (8008cb4 <RCCEx_PLL2_Config+0x15c>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d0f0      	beq.n	8008c8a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	58024400 	.word	0x58024400
 8008cb8:	ffff0007 	.word	0xffff0007

08008cbc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008cca:	4b53      	ldr	r3, [pc, #332]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cce:	f003 0303 	and.w	r3, r3, #3
 8008cd2:	2b03      	cmp	r3, #3
 8008cd4:	d101      	bne.n	8008cda <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e099      	b.n	8008e0e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008cda:	4b4f      	ldr	r3, [pc, #316]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a4e      	ldr	r2, [pc, #312]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ce4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ce6:	f7f8 f8a7 	bl	8000e38 <HAL_GetTick>
 8008cea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008cec:	e008      	b.n	8008d00 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008cee:	f7f8 f8a3 	bl	8000e38 <HAL_GetTick>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	1ad3      	subs	r3, r2, r3
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d901      	bls.n	8008d00 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e086      	b.n	8008e0e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008d00:	4b45      	ldr	r3, [pc, #276]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1f0      	bne.n	8008cee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008d0c:	4b42      	ldr	r3, [pc, #264]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d10:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	051b      	lsls	r3, r3, #20
 8008d1a:	493f      	ldr	r1, [pc, #252]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	628b      	str	r3, [r1, #40]	; 0x28
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	3b01      	subs	r3, #1
 8008d26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	3b01      	subs	r3, #1
 8008d30:	025b      	lsls	r3, r3, #9
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	431a      	orrs	r2, r3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	041b      	lsls	r3, r3, #16
 8008d3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008d42:	431a      	orrs	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	3b01      	subs	r3, #1
 8008d4a:	061b      	lsls	r3, r3, #24
 8008d4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008d50:	4931      	ldr	r1, [pc, #196]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008d52:	4313      	orrs	r3, r2
 8008d54:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008d56:	4b30      	ldr	r3, [pc, #192]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	492d      	ldr	r1, [pc, #180]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008d64:	4313      	orrs	r3, r2
 8008d66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008d68:	4b2b      	ldr	r3, [pc, #172]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d6c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	699b      	ldr	r3, [r3, #24]
 8008d74:	4928      	ldr	r1, [pc, #160]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008d76:	4313      	orrs	r3, r2
 8008d78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008d7a:	4b27      	ldr	r3, [pc, #156]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7e:	4a26      	ldr	r2, [pc, #152]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008d86:	4b24      	ldr	r3, [pc, #144]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008d88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d8a:	4b24      	ldr	r3, [pc, #144]	; (8008e1c <RCCEx_PLL3_Config+0x160>)
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	69d2      	ldr	r2, [r2, #28]
 8008d92:	00d2      	lsls	r2, r2, #3
 8008d94:	4920      	ldr	r1, [pc, #128]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008d96:	4313      	orrs	r3, r2
 8008d98:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008d9a:	4b1f      	ldr	r3, [pc, #124]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9e:	4a1e      	ldr	r2, [pc, #120]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008da4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d106      	bne.n	8008dba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008dac:	4b1a      	ldr	r3, [pc, #104]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db0:	4a19      	ldr	r2, [pc, #100]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008db2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008db6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008db8:	e00f      	b.n	8008dda <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d106      	bne.n	8008dce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008dc0:	4b15      	ldr	r3, [pc, #84]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc4:	4a14      	ldr	r2, [pc, #80]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008dc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008dca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008dcc:	e005      	b.n	8008dda <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008dce:	4b12      	ldr	r3, [pc, #72]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd2:	4a11      	ldr	r2, [pc, #68]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008dd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008dd8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008dda:	4b0f      	ldr	r3, [pc, #60]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a0e      	ldr	r2, [pc, #56]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008de4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008de6:	f7f8 f827 	bl	8000e38 <HAL_GetTick>
 8008dea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008dec:	e008      	b.n	8008e00 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008dee:	f7f8 f823 	bl	8000e38 <HAL_GetTick>
 8008df2:	4602      	mov	r2, r0
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	1ad3      	subs	r3, r2, r3
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d901      	bls.n	8008e00 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	e006      	b.n	8008e0e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008e00:	4b05      	ldr	r3, [pc, #20]	; (8008e18 <RCCEx_PLL3_Config+0x15c>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d0f0      	beq.n	8008dee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	58024400 	.word	0x58024400
 8008e1c:	ffff0007 	.word	0xffff0007

08008e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d101      	bne.n	8008e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e049      	b.n	8008ec6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d106      	bne.n	8008e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7f7 fe5e 	bl	8000b08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2202      	movs	r2, #2
 8008e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	3304      	adds	r3, #4
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	4610      	mov	r0, r2
 8008e60:	f000 f99e 	bl	80091a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
	...

08008ed0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b085      	sub	sp, #20
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d001      	beq.n	8008ee8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e04c      	b.n	8008f82 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2202      	movs	r2, #2
 8008eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a26      	ldr	r2, [pc, #152]	; (8008f90 <HAL_TIM_Base_Start+0xc0>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d022      	beq.n	8008f40 <HAL_TIM_Base_Start+0x70>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f02:	d01d      	beq.n	8008f40 <HAL_TIM_Base_Start+0x70>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a22      	ldr	r2, [pc, #136]	; (8008f94 <HAL_TIM_Base_Start+0xc4>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d018      	beq.n	8008f40 <HAL_TIM_Base_Start+0x70>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a21      	ldr	r2, [pc, #132]	; (8008f98 <HAL_TIM_Base_Start+0xc8>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d013      	beq.n	8008f40 <HAL_TIM_Base_Start+0x70>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a1f      	ldr	r2, [pc, #124]	; (8008f9c <HAL_TIM_Base_Start+0xcc>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d00e      	beq.n	8008f40 <HAL_TIM_Base_Start+0x70>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a1e      	ldr	r2, [pc, #120]	; (8008fa0 <HAL_TIM_Base_Start+0xd0>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d009      	beq.n	8008f40 <HAL_TIM_Base_Start+0x70>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a1c      	ldr	r2, [pc, #112]	; (8008fa4 <HAL_TIM_Base_Start+0xd4>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d004      	beq.n	8008f40 <HAL_TIM_Base_Start+0x70>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a1b      	ldr	r2, [pc, #108]	; (8008fa8 <HAL_TIM_Base_Start+0xd8>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d115      	bne.n	8008f6c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	689a      	ldr	r2, [r3, #8]
 8008f46:	4b19      	ldr	r3, [pc, #100]	; (8008fac <HAL_TIM_Base_Start+0xdc>)
 8008f48:	4013      	ands	r3, r2
 8008f4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2b06      	cmp	r3, #6
 8008f50:	d015      	beq.n	8008f7e <HAL_TIM_Base_Start+0xae>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f58:	d011      	beq.n	8008f7e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f042 0201 	orr.w	r2, r2, #1
 8008f68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f6a:	e008      	b.n	8008f7e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f042 0201 	orr.w	r2, r2, #1
 8008f7a:	601a      	str	r2, [r3, #0]
 8008f7c:	e000      	b.n	8008f80 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3714      	adds	r7, #20
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop
 8008f90:	40010000 	.word	0x40010000
 8008f94:	40000400 	.word	0x40000400
 8008f98:	40000800 	.word	0x40000800
 8008f9c:	40000c00 	.word	0x40000c00
 8008fa0:	40010400 	.word	0x40010400
 8008fa4:	40001800 	.word	0x40001800
 8008fa8:	40014000 	.word	0x40014000
 8008fac:	00010007 	.word	0x00010007

08008fb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d101      	bne.n	8008fcc <HAL_TIM_ConfigClockSource+0x1c>
 8008fc8:	2302      	movs	r3, #2
 8008fca:	e0dc      	b.n	8009186 <HAL_TIM_ConfigClockSource+0x1d6>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2202      	movs	r2, #2
 8008fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008fe4:	68ba      	ldr	r2, [r7, #8]
 8008fe6:	4b6a      	ldr	r3, [pc, #424]	; (8009190 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008fe8:	4013      	ands	r3, r2
 8008fea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ff2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68ba      	ldr	r2, [r7, #8]
 8008ffa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a64      	ldr	r2, [pc, #400]	; (8009194 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009002:	4293      	cmp	r3, r2
 8009004:	f000 80a9 	beq.w	800915a <HAL_TIM_ConfigClockSource+0x1aa>
 8009008:	4a62      	ldr	r2, [pc, #392]	; (8009194 <HAL_TIM_ConfigClockSource+0x1e4>)
 800900a:	4293      	cmp	r3, r2
 800900c:	f200 80ae 	bhi.w	800916c <HAL_TIM_ConfigClockSource+0x1bc>
 8009010:	4a61      	ldr	r2, [pc, #388]	; (8009198 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009012:	4293      	cmp	r3, r2
 8009014:	f000 80a1 	beq.w	800915a <HAL_TIM_ConfigClockSource+0x1aa>
 8009018:	4a5f      	ldr	r2, [pc, #380]	; (8009198 <HAL_TIM_ConfigClockSource+0x1e8>)
 800901a:	4293      	cmp	r3, r2
 800901c:	f200 80a6 	bhi.w	800916c <HAL_TIM_ConfigClockSource+0x1bc>
 8009020:	4a5e      	ldr	r2, [pc, #376]	; (800919c <HAL_TIM_ConfigClockSource+0x1ec>)
 8009022:	4293      	cmp	r3, r2
 8009024:	f000 8099 	beq.w	800915a <HAL_TIM_ConfigClockSource+0x1aa>
 8009028:	4a5c      	ldr	r2, [pc, #368]	; (800919c <HAL_TIM_ConfigClockSource+0x1ec>)
 800902a:	4293      	cmp	r3, r2
 800902c:	f200 809e 	bhi.w	800916c <HAL_TIM_ConfigClockSource+0x1bc>
 8009030:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009034:	f000 8091 	beq.w	800915a <HAL_TIM_ConfigClockSource+0x1aa>
 8009038:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800903c:	f200 8096 	bhi.w	800916c <HAL_TIM_ConfigClockSource+0x1bc>
 8009040:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009044:	f000 8089 	beq.w	800915a <HAL_TIM_ConfigClockSource+0x1aa>
 8009048:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800904c:	f200 808e 	bhi.w	800916c <HAL_TIM_ConfigClockSource+0x1bc>
 8009050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009054:	d03e      	beq.n	80090d4 <HAL_TIM_ConfigClockSource+0x124>
 8009056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800905a:	f200 8087 	bhi.w	800916c <HAL_TIM_ConfigClockSource+0x1bc>
 800905e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009062:	f000 8086 	beq.w	8009172 <HAL_TIM_ConfigClockSource+0x1c2>
 8009066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800906a:	d87f      	bhi.n	800916c <HAL_TIM_ConfigClockSource+0x1bc>
 800906c:	2b70      	cmp	r3, #112	; 0x70
 800906e:	d01a      	beq.n	80090a6 <HAL_TIM_ConfigClockSource+0xf6>
 8009070:	2b70      	cmp	r3, #112	; 0x70
 8009072:	d87b      	bhi.n	800916c <HAL_TIM_ConfigClockSource+0x1bc>
 8009074:	2b60      	cmp	r3, #96	; 0x60
 8009076:	d050      	beq.n	800911a <HAL_TIM_ConfigClockSource+0x16a>
 8009078:	2b60      	cmp	r3, #96	; 0x60
 800907a:	d877      	bhi.n	800916c <HAL_TIM_ConfigClockSource+0x1bc>
 800907c:	2b50      	cmp	r3, #80	; 0x50
 800907e:	d03c      	beq.n	80090fa <HAL_TIM_ConfigClockSource+0x14a>
 8009080:	2b50      	cmp	r3, #80	; 0x50
 8009082:	d873      	bhi.n	800916c <HAL_TIM_ConfigClockSource+0x1bc>
 8009084:	2b40      	cmp	r3, #64	; 0x40
 8009086:	d058      	beq.n	800913a <HAL_TIM_ConfigClockSource+0x18a>
 8009088:	2b40      	cmp	r3, #64	; 0x40
 800908a:	d86f      	bhi.n	800916c <HAL_TIM_ConfigClockSource+0x1bc>
 800908c:	2b30      	cmp	r3, #48	; 0x30
 800908e:	d064      	beq.n	800915a <HAL_TIM_ConfigClockSource+0x1aa>
 8009090:	2b30      	cmp	r3, #48	; 0x30
 8009092:	d86b      	bhi.n	800916c <HAL_TIM_ConfigClockSource+0x1bc>
 8009094:	2b20      	cmp	r3, #32
 8009096:	d060      	beq.n	800915a <HAL_TIM_ConfigClockSource+0x1aa>
 8009098:	2b20      	cmp	r3, #32
 800909a:	d867      	bhi.n	800916c <HAL_TIM_ConfigClockSource+0x1bc>
 800909c:	2b00      	cmp	r3, #0
 800909e:	d05c      	beq.n	800915a <HAL_TIM_ConfigClockSource+0x1aa>
 80090a0:	2b10      	cmp	r3, #16
 80090a2:	d05a      	beq.n	800915a <HAL_TIM_ConfigClockSource+0x1aa>
 80090a4:	e062      	b.n	800916c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6818      	ldr	r0, [r3, #0]
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	6899      	ldr	r1, [r3, #8]
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	685a      	ldr	r2, [r3, #4]
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	f000 f997 	bl	80093e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80090c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68ba      	ldr	r2, [r7, #8]
 80090d0:	609a      	str	r2, [r3, #8]
      break;
 80090d2:	e04f      	b.n	8009174 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6818      	ldr	r0, [r3, #0]
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	6899      	ldr	r1, [r3, #8]
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	685a      	ldr	r2, [r3, #4]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	f000 f980 	bl	80093e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	689a      	ldr	r2, [r3, #8]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090f6:	609a      	str	r2, [r3, #8]
      break;
 80090f8:	e03c      	b.n	8009174 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6818      	ldr	r0, [r3, #0]
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	6859      	ldr	r1, [r3, #4]
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	461a      	mov	r2, r3
 8009108:	f000 f8f0 	bl	80092ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2150      	movs	r1, #80	; 0x50
 8009112:	4618      	mov	r0, r3
 8009114:	f000 f94a 	bl	80093ac <TIM_ITRx_SetConfig>
      break;
 8009118:	e02c      	b.n	8009174 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6818      	ldr	r0, [r3, #0]
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	6859      	ldr	r1, [r3, #4]
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	461a      	mov	r2, r3
 8009128:	f000 f90f 	bl	800934a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2160      	movs	r1, #96	; 0x60
 8009132:	4618      	mov	r0, r3
 8009134:	f000 f93a 	bl	80093ac <TIM_ITRx_SetConfig>
      break;
 8009138:	e01c      	b.n	8009174 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6818      	ldr	r0, [r3, #0]
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	6859      	ldr	r1, [r3, #4]
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	461a      	mov	r2, r3
 8009148:	f000 f8d0 	bl	80092ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2140      	movs	r1, #64	; 0x40
 8009152:	4618      	mov	r0, r3
 8009154:	f000 f92a 	bl	80093ac <TIM_ITRx_SetConfig>
      break;
 8009158:	e00c      	b.n	8009174 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4619      	mov	r1, r3
 8009164:	4610      	mov	r0, r2
 8009166:	f000 f921 	bl	80093ac <TIM_ITRx_SetConfig>
      break;
 800916a:	e003      	b.n	8009174 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	73fb      	strb	r3, [r7, #15]
      break;
 8009170:	e000      	b.n	8009174 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009172:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009184:	7bfb      	ldrb	r3, [r7, #15]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3710      	adds	r7, #16
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	ffceff88 	.word	0xffceff88
 8009194:	00100040 	.word	0x00100040
 8009198:	00100030 	.word	0x00100030
 800919c:	00100020 	.word	0x00100020

080091a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a46      	ldr	r2, [pc, #280]	; (80092cc <TIM_Base_SetConfig+0x12c>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d013      	beq.n	80091e0 <TIM_Base_SetConfig+0x40>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091be:	d00f      	beq.n	80091e0 <TIM_Base_SetConfig+0x40>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4a43      	ldr	r2, [pc, #268]	; (80092d0 <TIM_Base_SetConfig+0x130>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d00b      	beq.n	80091e0 <TIM_Base_SetConfig+0x40>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4a42      	ldr	r2, [pc, #264]	; (80092d4 <TIM_Base_SetConfig+0x134>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d007      	beq.n	80091e0 <TIM_Base_SetConfig+0x40>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4a41      	ldr	r2, [pc, #260]	; (80092d8 <TIM_Base_SetConfig+0x138>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d003      	beq.n	80091e0 <TIM_Base_SetConfig+0x40>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	4a40      	ldr	r2, [pc, #256]	; (80092dc <TIM_Base_SetConfig+0x13c>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d108      	bne.n	80091f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4a35      	ldr	r2, [pc, #212]	; (80092cc <TIM_Base_SetConfig+0x12c>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d01f      	beq.n	800923a <TIM_Base_SetConfig+0x9a>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009200:	d01b      	beq.n	800923a <TIM_Base_SetConfig+0x9a>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a32      	ldr	r2, [pc, #200]	; (80092d0 <TIM_Base_SetConfig+0x130>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d017      	beq.n	800923a <TIM_Base_SetConfig+0x9a>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4a31      	ldr	r2, [pc, #196]	; (80092d4 <TIM_Base_SetConfig+0x134>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d013      	beq.n	800923a <TIM_Base_SetConfig+0x9a>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a30      	ldr	r2, [pc, #192]	; (80092d8 <TIM_Base_SetConfig+0x138>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d00f      	beq.n	800923a <TIM_Base_SetConfig+0x9a>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4a2f      	ldr	r2, [pc, #188]	; (80092dc <TIM_Base_SetConfig+0x13c>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d00b      	beq.n	800923a <TIM_Base_SetConfig+0x9a>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a2e      	ldr	r2, [pc, #184]	; (80092e0 <TIM_Base_SetConfig+0x140>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d007      	beq.n	800923a <TIM_Base_SetConfig+0x9a>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a2d      	ldr	r2, [pc, #180]	; (80092e4 <TIM_Base_SetConfig+0x144>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d003      	beq.n	800923a <TIM_Base_SetConfig+0x9a>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a2c      	ldr	r2, [pc, #176]	; (80092e8 <TIM_Base_SetConfig+0x148>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d108      	bne.n	800924c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009240:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	68fa      	ldr	r2, [r7, #12]
 8009248:	4313      	orrs	r3, r2
 800924a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	695b      	ldr	r3, [r3, #20]
 8009256:	4313      	orrs	r3, r2
 8009258:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	689a      	ldr	r2, [r3, #8]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a16      	ldr	r2, [pc, #88]	; (80092cc <TIM_Base_SetConfig+0x12c>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d00f      	beq.n	8009298 <TIM_Base_SetConfig+0xf8>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a18      	ldr	r2, [pc, #96]	; (80092dc <TIM_Base_SetConfig+0x13c>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d00b      	beq.n	8009298 <TIM_Base_SetConfig+0xf8>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a17      	ldr	r2, [pc, #92]	; (80092e0 <TIM_Base_SetConfig+0x140>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d007      	beq.n	8009298 <TIM_Base_SetConfig+0xf8>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a16      	ldr	r2, [pc, #88]	; (80092e4 <TIM_Base_SetConfig+0x144>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d003      	beq.n	8009298 <TIM_Base_SetConfig+0xf8>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a15      	ldr	r2, [pc, #84]	; (80092e8 <TIM_Base_SetConfig+0x148>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d103      	bne.n	80092a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	691a      	ldr	r2, [r3, #16]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	691b      	ldr	r3, [r3, #16]
 80092aa:	f003 0301 	and.w	r3, r3, #1
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d105      	bne.n	80092be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	691b      	ldr	r3, [r3, #16]
 80092b6:	f023 0201 	bic.w	r2, r3, #1
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	611a      	str	r2, [r3, #16]
  }
}
 80092be:	bf00      	nop
 80092c0:	3714      	adds	r7, #20
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	40010000 	.word	0x40010000
 80092d0:	40000400 	.word	0x40000400
 80092d4:	40000800 	.word	0x40000800
 80092d8:	40000c00 	.word	0x40000c00
 80092dc:	40010400 	.word	0x40010400
 80092e0:	40014000 	.word	0x40014000
 80092e4:	40014400 	.word	0x40014400
 80092e8:	40014800 	.word	0x40014800

080092ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b087      	sub	sp, #28
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6a1b      	ldr	r3, [r3, #32]
 80092fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6a1b      	ldr	r3, [r3, #32]
 8009302:	f023 0201 	bic.w	r2, r3, #1
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	699b      	ldr	r3, [r3, #24]
 800930e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	011b      	lsls	r3, r3, #4
 800931c:	693a      	ldr	r2, [r7, #16]
 800931e:	4313      	orrs	r3, r2
 8009320:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	f023 030a 	bic.w	r3, r3, #10
 8009328:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800932a:	697a      	ldr	r2, [r7, #20]
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	4313      	orrs	r3, r2
 8009330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	693a      	ldr	r2, [r7, #16]
 8009336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	697a      	ldr	r2, [r7, #20]
 800933c:	621a      	str	r2, [r3, #32]
}
 800933e:	bf00      	nop
 8009340:	371c      	adds	r7, #28
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr

0800934a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800934a:	b480      	push	{r7}
 800934c:	b087      	sub	sp, #28
 800934e:	af00      	add	r7, sp, #0
 8009350:	60f8      	str	r0, [r7, #12]
 8009352:	60b9      	str	r1, [r7, #8]
 8009354:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6a1b      	ldr	r3, [r3, #32]
 800935a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6a1b      	ldr	r3, [r3, #32]
 8009360:	f023 0210 	bic.w	r2, r3, #16
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	699b      	ldr	r3, [r3, #24]
 800936c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009374:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	031b      	lsls	r3, r3, #12
 800937a:	693a      	ldr	r2, [r7, #16]
 800937c:	4313      	orrs	r3, r2
 800937e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009386:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	011b      	lsls	r3, r3, #4
 800938c:	697a      	ldr	r2, [r7, #20]
 800938e:	4313      	orrs	r3, r2
 8009390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	693a      	ldr	r2, [r7, #16]
 8009396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	697a      	ldr	r2, [r7, #20]
 800939c:	621a      	str	r2, [r3, #32]
}
 800939e:	bf00      	nop
 80093a0:	371c      	adds	r7, #28
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr
	...

080093ac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	4b09      	ldr	r3, [pc, #36]	; (80093e4 <TIM_ITRx_SetConfig+0x38>)
 80093c0:	4013      	ands	r3, r2
 80093c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80093c4:	683a      	ldr	r2, [r7, #0]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	4313      	orrs	r3, r2
 80093ca:	f043 0307 	orr.w	r3, r3, #7
 80093ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	68fa      	ldr	r2, [r7, #12]
 80093d4:	609a      	str	r2, [r3, #8]
}
 80093d6:	bf00      	nop
 80093d8:	3714      	adds	r7, #20
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	ffcfff8f 	.word	0xffcfff8f

080093e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b087      	sub	sp, #28
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	607a      	str	r2, [r7, #4]
 80093f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009402:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	021a      	lsls	r2, r3, #8
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	431a      	orrs	r2, r3
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	4313      	orrs	r3, r2
 8009410:	697a      	ldr	r2, [r7, #20]
 8009412:	4313      	orrs	r3, r2
 8009414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	697a      	ldr	r2, [r7, #20]
 800941a:	609a      	str	r2, [r3, #8]
}
 800941c:	bf00      	nop
 800941e:	371c      	adds	r7, #28
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009428:	b480      	push	{r7}
 800942a:	b085      	sub	sp, #20
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009438:	2b01      	cmp	r3, #1
 800943a:	d101      	bne.n	8009440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800943c:	2302      	movs	r3, #2
 800943e:	e06d      	b.n	800951c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2202      	movs	r2, #2
 800944c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a30      	ldr	r2, [pc, #192]	; (8009528 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d004      	beq.n	8009474 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a2f      	ldr	r2, [pc, #188]	; (800952c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d108      	bne.n	8009486 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800947a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	4313      	orrs	r3, r2
 8009484:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800948c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	68fa      	ldr	r2, [r7, #12]
 8009494:	4313      	orrs	r3, r2
 8009496:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a20      	ldr	r2, [pc, #128]	; (8009528 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d022      	beq.n	80094f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094b2:	d01d      	beq.n	80094f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a1d      	ldr	r2, [pc, #116]	; (8009530 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d018      	beq.n	80094f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a1c      	ldr	r2, [pc, #112]	; (8009534 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d013      	beq.n	80094f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a1a      	ldr	r2, [pc, #104]	; (8009538 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d00e      	beq.n	80094f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a15      	ldr	r2, [pc, #84]	; (800952c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d009      	beq.n	80094f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a16      	ldr	r2, [pc, #88]	; (800953c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d004      	beq.n	80094f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a15      	ldr	r2, [pc, #84]	; (8009540 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d10c      	bne.n	800950a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	68ba      	ldr	r2, [r7, #8]
 80094fe:	4313      	orrs	r3, r2
 8009500:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2201      	movs	r2, #1
 800950e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	3714      	adds	r7, #20
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr
 8009528:	40010000 	.word	0x40010000
 800952c:	40010400 	.word	0x40010400
 8009530:	40000400 	.word	0x40000400
 8009534:	40000800 	.word	0x40000800
 8009538:	40000c00 	.word	0x40000c00
 800953c:	40001800 	.word	0x40001800
 8009540:	40014000 	.word	0x40014000

08009544 <__libc_init_array>:
 8009544:	b570      	push	{r4, r5, r6, lr}
 8009546:	4d0d      	ldr	r5, [pc, #52]	; (800957c <__libc_init_array+0x38>)
 8009548:	4c0d      	ldr	r4, [pc, #52]	; (8009580 <__libc_init_array+0x3c>)
 800954a:	1b64      	subs	r4, r4, r5
 800954c:	10a4      	asrs	r4, r4, #2
 800954e:	2600      	movs	r6, #0
 8009550:	42a6      	cmp	r6, r4
 8009552:	d109      	bne.n	8009568 <__libc_init_array+0x24>
 8009554:	4d0b      	ldr	r5, [pc, #44]	; (8009584 <__libc_init_array+0x40>)
 8009556:	4c0c      	ldr	r4, [pc, #48]	; (8009588 <__libc_init_array+0x44>)
 8009558:	f000 f820 	bl	800959c <_init>
 800955c:	1b64      	subs	r4, r4, r5
 800955e:	10a4      	asrs	r4, r4, #2
 8009560:	2600      	movs	r6, #0
 8009562:	42a6      	cmp	r6, r4
 8009564:	d105      	bne.n	8009572 <__libc_init_array+0x2e>
 8009566:	bd70      	pop	{r4, r5, r6, pc}
 8009568:	f855 3b04 	ldr.w	r3, [r5], #4
 800956c:	4798      	blx	r3
 800956e:	3601      	adds	r6, #1
 8009570:	e7ee      	b.n	8009550 <__libc_init_array+0xc>
 8009572:	f855 3b04 	ldr.w	r3, [r5], #4
 8009576:	4798      	blx	r3
 8009578:	3601      	adds	r6, #1
 800957a:	e7f2      	b.n	8009562 <__libc_init_array+0x1e>
 800957c:	080095cc 	.word	0x080095cc
 8009580:	080095cc 	.word	0x080095cc
 8009584:	080095cc 	.word	0x080095cc
 8009588:	080095d0 	.word	0x080095d0

0800958c <memset>:
 800958c:	4402      	add	r2, r0
 800958e:	4603      	mov	r3, r0
 8009590:	4293      	cmp	r3, r2
 8009592:	d100      	bne.n	8009596 <memset+0xa>
 8009594:	4770      	bx	lr
 8009596:	f803 1b01 	strb.w	r1, [r3], #1
 800959a:	e7f9      	b.n	8009590 <memset+0x4>

0800959c <_init>:
 800959c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959e:	bf00      	nop
 80095a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095a2:	bc08      	pop	{r3}
 80095a4:	469e      	mov	lr, r3
 80095a6:	4770      	bx	lr

080095a8 <_fini>:
 80095a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095aa:	bf00      	nop
 80095ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ae:	bc08      	pop	{r3}
 80095b0:	469e      	mov	lr, r3
 80095b2:	4770      	bx	lr
